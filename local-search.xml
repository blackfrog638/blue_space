<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【诗】 太阳的方向</title>
    <link href="/2024/10/25/%E3%80%90%E8%AF%97%E3%80%91%E5%A4%AA%E9%98%B3%E7%9A%84%E6%96%B9%E5%90%91/"/>
    <url>/2024/10/25/%E3%80%90%E8%AF%97%E3%80%91%E5%A4%AA%E9%98%B3%E7%9A%84%E6%96%B9%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1>太阳的方向</h1><p>白银上洒满<br>点点黄金<br>陌生的家，前往<br>太阳的方向。</p><p>前方无云，却<br>雾霭重重<br>空中前行的千帆<br>默默无闻的远方</p><p>古老的灰尘扑向<br>彩色盐碱地<br>诡异的乐曲<br>迎来终章</p><p>苦涩与悲怆化作<br>未知的印章<br>前进哪怕<br>九死南荒</p><p><img src="/img/241104.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【爬虫】 谁才是近几年的番剧“神作”？</title>
    <link href="/2024/09/09/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E8%B0%81%E6%89%8D%E6%98%AF%E8%BF%91%E5%87%A0%E5%B9%B4%E7%9A%84%E7%95%AA%E5%89%A7%E2%80%9C%E7%A5%9E%E4%BD%9C%E2%80%9D%EF%BC%9F/"/>
    <url>/2024/09/09/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E8%B0%81%E6%89%8D%E6%98%AF%E8%BF%91%E5%87%A0%E5%B9%B4%E7%9A%84%E7%95%AA%E5%89%A7%E2%80%9C%E7%A5%9E%E4%BD%9C%E2%80%9D%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1>谁才是近几年的番剧“神作”？</h1><blockquote><p>有一段时间看<a href="https://bgm.tv/">bamgumi</a>上的评分，尤其是评分的排行榜的时候，我就不由得回忆起那些曾经高开低走的动画，在刚开播的时候还能在排行榜前排看到它们，但一道出现了奇怪的结局之后，又早就掉得无影无踪，实在是令人感叹。当然，也有很多的佳作，在刚开播的时候岌岌无名，但最后才发现它其实是唯一真神。</p></blockquote><p>又发现，正好bangumi有了<a href="https://netaba.re/">natabare</a>这样的动画评分历史变化功能，那我不如直接做一个数据可视化，来看出近几年番剧的评分变化是怎么样的。<em>那既然有了点子，那就直接去做吧</em>！</p><h2 id="分析一下网页资源">分析一下网页资源</h2><h3 id="单个番剧">单个番剧</h3><p>首先要做的第一件事情那就肯定是观察<code>natabare</code>网站的构成，然后找到得到对应数据的办法了。</p><p><img src="/img/2024090901.png" alt="这里是natabare的折线图（以某动画为例子）"></p><p>我们右键审查元素-&gt;网络 就可以看到这个网站加载的各种资源。</p><p><img src="/img/2024090902.png" alt="这里是network"></p><p>我们<strong>注意到</strong>，其中有一个<code>json</code>文件，这里面记载了这部动画每一天的各种数据。</p><p><img src="/img/2024090903.png" alt="这里是network"></p><p>那么在这里我们就可以很高兴地发现！里面的数据居然已经直接发出来了，根本不需要使用<code>js逆向</code>，或者<code>beautifulsoup</code>之类的其他的较为进阶的爬虫的技术了，我们只要把json接受下来然后对其进行处理，就可以直接搞定了。</p><p>我们对网页的资源分析已经完成，接下来就是写代码了。</p><h3 id="番剧列表">番剧列表</h3><p>我们选取2020年的评分靠前的动画列表：</p><p><img src="/img/2024090904.png" alt="列表"></p><p>我们可以通过获得<code>番剧列表</code>网页，来得到我们所需的评分靠前的动画。</p><h2 id="接收资源">接收资源</h2><p>本人并没有考虑过接收的效率问题，所以没有使用<code>scrapy</code>,<code>aiohttp</code>等等可能可以非常有效地提升爬取效率的工具，只用了非常朴素的<code>request</code>库,为了方便编写…</p><h3 id="获取某一部番剧的json">获取某一部番剧的json</h3><p>爬取番剧json的函数大致如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_data</span>(<span class="hljs-params">_<span class="hljs-built_in">id</span></span>):<br>    headers = &#123;<span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>&#125;<br>    headers[<span class="hljs-string">&#x27;User-Agent&#x27;</span>] = random.choice(user_agent_list)<br>    site_url = base_url + <span class="hljs-built_in">str</span>(_<span class="hljs-built_in">id</span>)<br>    <span class="hljs-comment"># 关闭警报</span><br>    requests.packages.urllib3.disable_warnings()<br>    tries = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> tries &lt; <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(site_url, verify=<span class="hljs-literal">False</span>, headers=headers, timeout=<span class="hljs-number">15</span>)<br>            <span class="hljs-keyword">if</span> (r.status_code != <span class="hljs-number">200</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;404&#x27;</span><br>            json_data = json.loads(r.text)<br>            <span class="hljs-keyword">return</span> json_data<br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;timeout. Retrying in&#x27;</span> + <span class="hljs-built_in">str</span>(tries) + <span class="hljs-string">&#x27;/5&#x27;</span>)<br>            tries += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>其中最重要的一个步骤可能就是timeout的处理了。如果没有多次尝试的错误处理，最后非常有可能会卡在一半不再运行。因为请求在超出一定时间限制之后，就不会再获得任何信息。</p><h3 id="将一部番剧的所有信息用一个类进行处理">将一部番剧的所有信息用一个类进行处理</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Anime</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, _<span class="hljs-built_in">id</span></span>):<br>        raw = scrape_data(_<span class="hljs-built_in">id</span>)<br><br>        <span class="hljs-keyword">if</span> raw == <span class="hljs-string">&#x27;404&#x27;</span>:<br>            self.score = <span class="hljs-string">&#x27;error&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No data for&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;name_cn&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span>:<br>                self.name = raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;name_cn&#x27;</span>]<br>            <span class="hljs-keyword">else</span>:<br>                self.name = raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]<br>            self.score = []<br>            <span class="hljs-comment"># self.image = raw[&#x27;subject&#x27;][&#x27;images&#x27;][&#x27;grid&#x27;]</span><br>            self.air_date = raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;air_date&#x27;</span>]<br>            self.score = self.get_score(raw)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_score</span>(<span class="hljs-params">self, raw</span>):<br>        scores = &#123;&#125;<br>        score_set = raw[<span class="hljs-string">&#x27;history&#x27;</span>]<br>        i = <span class="hljs-number">0</span><br>        isopen = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(score_set)-<span class="hljs-number">1</span>:<br>            time = score_set[i][<span class="hljs-string">&#x27;recordedAt&#x27;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> compare_air_date(time, self.air_date) == <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rating&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> score_set[i]:<br>                <span class="hljs-keyword">continue</span><br>            now_score = calculate_score(score_set[i][<span class="hljs-string">&#x27;rating&#x27;</span>][<span class="hljs-string">&#x27;count&#x27;</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> now_score:<br>                self.air_date = time<br>                <span class="hljs-keyword">continue</span><br>            scores[time] = now_score<br>            clock = datetime.datetime.strptime(time, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) + datetime.timedelta(days=-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">while</span> clock.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> scores <span class="hljs-keyword">and</span> isopen:<br>                <span class="hljs-comment"># (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br>                scores[clock.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)] = now_score<br>                clock += datetime.timedelta(days=-<span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># print(clock.strftime(&#x27;%Y-%m-%d&#x27;))</span><br>            isopen = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">return</span> scores<br></code></pre></td></tr></table></figure><p>类中存储的信息有： <strong>动画名称</strong>、<strong>开播时间（用于筛选较为有用的信息）</strong>、<strong>各个时间段的评分</strong>。 其中也内置了一个方法<code>get_score</code>， 用于提取json中的评分信息。</p><h3 id="获取番剧列表">获取番剧列表</h3><p>我们获取到番剧列表的网站<code>https://bgm.tv/anime/browser/airtime/2020?sort=rank&amp;page=2</code>，其中<code>2020</code>是可替换成各种年份的,而参数<code>page</code>代表了页码号。通过<code>beautifulsoup</code>来获取番剧列表中的元素，得到列表中每一个动画的id。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url</span>(<span class="hljs-params">year, page</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取年份，页码对应url&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;https://bgm.tv/anime/browser/airtime/&quot;</span>+ <span class="hljs-built_in">str</span>(year) + <span class="hljs-string">&quot;?sort=rank&amp;page=&quot;</span> + <span class="hljs-built_in">str</span>(page)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">launch_to_page</span>(<span class="hljs-params">year, page</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;发送get请求&quot;&quot;&quot;</span><br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0&#x27;</span>,<br>               <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>&#125;<br>    html = requests.get(get_url(year, page), headers = headers).text<br>    <span class="hljs-keyword">return</span> html<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_soup</span>(<span class="hljs-params">year, page</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;分析网页进行id的提取&quot;&quot;&quot;</span><br>    html = launch_to_page(year, page)<br>    soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    soup_of_list = soup.find_all(<span class="hljs-string">&#x27;li&#x27;</span>, class_=[<span class="hljs-string">&#x27;item odd clearit&#x27;</span>, <span class="hljs-string">&#x27;item even clearit&#x27;</span>])<br>    links = [li.find(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> soup_of_list]<br>    ids = [<span class="hljs-built_in">int</span>(li[<span class="hljs-number">9</span>:]) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> links]<br>    <span class="hljs-keyword">return</span> ids<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_anime_after</span>(<span class="hljs-params">year</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;得到某一年以后的每个番剧构成的列表&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 今年是2024！</span><br>    ids = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(year, <span class="hljs-number">2025</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n scraping anime page for year &quot;</span> + <span class="hljs-built_in">str</span>(y) + <span class="hljs-string">&quot;...&quot;</span>)<br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, PAGES_LIMIT + <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;scraping page: &quot;</span> + <span class="hljs-built_in">str</span>(page) + <span class="hljs-string">&quot;...&quot;</span>)<br>            ids = ids + get_soup(y, page)<br>    <span class="hljs-keyword">return</span> ids<br></code></pre></td></tr></table></figure><p>在这里值得一提的，可能就是使用了beautifulsoup的<code>get_soup</code>函数。我们可以分析一下列表的html元素构成：</p><p><img src="/img/2024090904.png" alt="2022年的html元素"></p><p>可以发现，为了做出斑马纹样式，它的列表是作出了奇偶性的分类，所以这两种class都在我们的考虑范围之内。</p><p>得到了每一个列表的元素之后，我们再获取它的跳转链接，用<strong>切片</strong>获取它的id就好了。</p><h2 id="存储数据">存储数据</h2><h3 id="写入csv文件">写入csv文件</h3><p>这里我们将所有数据写入csv文件。csv是一种纯文本文件，可以使用它来写入信息到表格中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_files</span>():<br>    <span class="hljs-comment"># write field</span><br>    fieldnames = [<span class="hljs-string">&#x27;name&#x27;</span>]<br>    fieldnames.extend(pd.date_range(START_DATE, END_DATE).strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>).tolist())<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)<br>        writer.writeheader()<br>        ids = get_anime_after(<span class="hljs-number">2018</span>)<br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> ids:<br>            cnt += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;writing row: &quot;</span> + <span class="hljs-built_in">str</span>(_<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;(&quot;</span> + <span class="hljs-built_in">str</span>(cnt) + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(ids)) + <span class="hljs-string">&quot;)&quot;</span>)<br>            a = Anime(_<span class="hljs-built_in">id</span>)<br>            <span class="hljs-keyword">if</span> a.score == <span class="hljs-string">&#x27;error&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            row = a.score<br>            row[<span class="hljs-string">&#x27;name&#x27;</span>] = a.name<br>            writer.writerow(row)<br></code></pre></td></tr></table></figure><p>这样子我们的爬虫就大功告成了。可是怎么样才能让我们获取到的数据显示出来更方便地看到呢？这里就需要数据可视化的作用了。</p><h2 id="数据可视化">数据可视化</h2><p>由于数据是由时间变化的，这里更适合制作一个条形图的视频，这里推荐用<a href="https://flourish.studio/">flourish</a>。</p><p>我们把自己的数据（csv文件）传入flourish，就可以直接得到视频了。</p><p><img src="/img/2024091001.png" alt="我们得到的视频截图"></p><blockquote><p>感谢你读到最后。你也可以点击<a href="https://public.flourish.studio/visualisation/17440062/">此链接</a>看到最后成品。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>动画</tag>
      
      <tag>杂谈</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法题应有的出题规范（写给sastoj）</title>
    <link href="/2024/09/04/%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/"/>
    <url>/2024/09/04/%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1>算法题应有的出题规范（写给sastoj）</h1><blockquote><p>给算法竞赛出题涉及题面，测试点等多个方面，由于没有规范的情况下，出题人容易出格式千奇百怪，题面表达不清等问题，所以在这里给出<code>sastoj</code>特色出题规范 当然，关于题面，数据点等方法也同样适用于任何其他oj。</p></blockquote><h2 id="题面书写">题面书写</h2><blockquote><p>此部分的规范不对愚人节比赛的题目有任何约束力。但应遵守本文档的其他部分。</p></blockquote><h3 id="组成部分">组成部分</h3><p>通常来说一道完整的题面应包含一下部分（*表示可省略）：</p><ol><li><p>*题目背景。讲述一道题目的背景，可以不写。题目背景用于介绍题目所属故事，便于读者理解，也可以用于增加题目趣味性。</p></li><li><p><strong>题目描述</strong>。题目的核心部分。要 <strong>没有歧义</strong> 地<strong>符合格式</strong>地指出任务的要求。</p></li><li><p><strong>输入/输出格式</strong>。指出输入的形式，类型和数据范围。</p></li><li><p><strong>输入/输出样例</strong>。表示给出的一种输入以及正确程序应该输出的结果。样例可以有多个。</p></li><li><p>*补充。对题目可能产生歧义的部分作出解释，或对样例进行说明。</p></li></ol><h3 id="题目描述的规范">题目描述的规范</h3><p>题目描述是对于一道题目的核心部分。对于一个合格的题面，题目描述部分应当<strong>没有任何歧义地指出</strong>一个题目所要求解决的问题。有以下几条可能出现失误的要点必须遵守：</p><ul><li><strong>对于一个需要解释的名词（尽管约定俗成）， 必须指出它的具体定义。必要时可以使用数学表达式。</strong></li></ul><p>下面给出一部分常用名词的具体定义：</p><p><em>排列(Permutation)：一段1~n的整数序列。保证1~n每个数字有且仅出现一次。</em></p><p><em>子序列(subsequence):从给定序列中去除一些元素，而不改变其他元素之间相对位置而得到的。</em></p><p><em>子串(substring):表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 串中从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 这一段，也就是顺次排列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[i],S[i+1],\ldots,S[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 形成的字符串。</em></p><p><em>自环 (loop)：对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span> 中的边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e = (u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">u = v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span> 被称作一个自环。</em></p><p>更多相关基础词语的定义，参见<a href="https://oi-wiki.org/">oi-wiki</a>或者维基百科等资源。</p><ul><li><strong>对于每一个需要作为输入输出数据的数（或作为运算时的中间变量），必须使用不同的字母进行标识。字母旁边最好标上对应数据范围。（若没有，则须在补充中说明）</strong></li></ul><p>比如，下面这样的题目（a+b problem）的描述是不被允许的：</p><blockquote><p>给出两个整数，请输出它们的和。</p></blockquote><p>正确的表述如下:</p><blockquote><p>给出两个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">a, b \leq 10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>），输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>。</p></blockquote><ul><li><strong>题目描述可以延续题目背景所说的世界观所描述。但是在写出要求（约束条件）的时候，必须要标准写出。不能掺杂任何模棱两可的词汇。</strong></li></ul><p>写题目的大忌是认为做题者会往理所应当的思路上来理解自己的题目。然而事实上，不同人可能会有各种的理解（这可能也是赛时clarification的意义）。我们要保证的是在不能让做题者产生任何不符合标准程序的理解。一种解决方式是给自己的题面 <em>“找茬”</em> 。</p><h3 id="IO格式、样例及补充">IO格式、样例及补充</h3><p><strong>输入输出格式部分</strong>：</p><p>输入格式应该标明总共的行数，以及每行需要输入的内容。请注意，这里要输入的所有内容也一定要给出字母。</p><p>sastoj给出了可以选择行末空格以及文末换行的功能，所以应当在体面中也对此有所表明。</p><p><strong>输入输出样例</strong>：</p><p>每一个样例应该给出<code>（输入/输出）#序号</code>的小标题。并在下面给出多行代码块。</p><p><strong>补充</strong>：</p><p>补充内容一定要写上样例解释（<em>样例解释的规范参见“题目描述的规范”</em>）便于做题者进行理解。如果有参考的资料，引用，或者附件，都应该在这一段中标明。</p><p>如果题目描述中没有数据范围，则务必在此补充上。</p><h2 id="题面格式">题面格式</h2><h3 id="关于markdown">关于markdown</h3><p>我们使用<code>markdown</code>来书写题面。markdown是一种设计来易于阅读、编写和理解的标记语言。</p><p>要学习markdown语法可见<a href="https://markdown.com.cn/basic-syntax/">官方教程</a></p><p>在<strong>题面书写</strong>部分，我们已经列出了一道题面的组成部分，这些部分应当都使用二级标题，一级标题则用来写此题的题面。</p><p>具体来说，markdown应如下图所示：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section"># 标题</span><br><span class="hljs-section">## 题目背景</span><br><span class="hljs-section">## 题目描述</span><br><span class="hljs-section">## 输入格式</span><br><span class="hljs-section">## 输出格式</span><br><span class="hljs-section">## 输入输出样例</span><br><span class="hljs-section">### 输入#1</span><br><span class="hljs-section">### 输出#1</span><br><span class="hljs-section">### 输入#2</span><br><span class="hljs-section">### 输出#2</span><br><span class="hljs-section">## 补充</span><br></code></pre></td></tr></table></figure><h3 id="关于markdownlint">关于markdownlint</h3><blockquote><p>The Markdown markup language is designed to be easy to read, write, and understand. It succeeds - and its flexibility is both a benefit and a drawback. Many styles are possible, so formatting can be inconsistent. Some constructs don’t work well in all parsers and should be avoided. The CommonMark specification standardizes parsers - but not authors.</p></blockquote><p><code>markdownlint</code> 是一套用来规范markdown书写格式的工具。有了markdownlint，写作者的语法将更为规范。</p><p>使用markdownlint可以按照<a href="https://github.com/DavidAnson/markdownlint">GitHub官网</a>的方式，使用nodejs进行下载，也可以使用<code>vscode</code>，<code>obsidian</code>等工具自带的markdownlint扩展。</p><p>关于sastoj的markdownlint规范，请点击<a href="https://github.com/NJUPT-SAST/sastoj-docs/blob/main/.markdownlint.jsonc">此链接</a>。</p><p><strong>使用方式</strong>：将上述链接中的文件复制到你所写markdown文件所在的同一工作环境中以使markdownlint按照规定的<code>.markdownlint.jsonc</code>文件所述的规范进行错误提醒。</p><h3 id="题面中所涉及的markdown规范">题面中所涉及的markdown规范</h3><ol><li><p>所有出现的变量，数字，数学符号，公式等，必须使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">Latex</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span></span></span></span>。</p></li><li><p>在一些需要注意的要点中，可以使用<strong>加粗符号来重点说明</strong>。</p></li><li><p>一些专有的英文名词，可以使用<code>代码块</code>标注。</p></li><li><p>输入输出样例，必须包含在<code>多行代码块</code>中。</p></li><li><p>如果必须要插入图片（用作样例的解释或者具体说明等）须提前存在图床中再使用<code>![]()</code>的格式。</p></li><li><p><em>不要</em><strong>滥用</strong> <s>markdown</s>的<code>特殊</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>格式</mtext></mrow><annotation encoding="application/x-tex">格式</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">格式</span></span></span></span>。</p></li></ol><h2 id="测试点设置">测试点设置</h2><p><code>sastoj</code>目前仅支持常规题的测试点。测试点可以有多个，每一个都可以有对应的分数点。如果你程序的输出结果与数据点的<code>.out</code>或<code>.ans</code>文件相同，视为通过该测试点，应该获得对应分数。</p><h3 id="出数据的原则">出数据的原则</h3><p>我们在生成一个题目的数据时，应当遵守如下原则：</p><ul><li><strong>如果是新手向的比赛（非ICPC赛制），最好在数据点中加入样例。</strong></li></ul><p>作为初次接触程序设计竞赛的新手，他们可能对一道题目如何提交，如何判分等步骤产生困惑，只能根据样例来判断自己的代码是否正确。为了不让他们感到困惑，最好在数据点中加入样例。</p><ul><li><strong>对于非ICPC赛制的比赛，数据范围的设置应当有一定梯度。</strong></li></ul><p>根据算法的优劣的区别，一道题目的分数也应当有所区别，分数在一定程度上更是对于一道题目完成度的体现。比如说，对一道数据结构题目，应当至少提供<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">30%</span></span></span></span>的答案正确的暴力算法分数。</p><ul><li><strong>一道完整数据点的题目应当有针对特判的数据。</strong></li></ul><p>在许多题目中，对于一些特殊的数据，不能使用常规的算法来解决问题。为了考察参赛者思维的严谨性，应当有一些特殊的数据来考察参赛者是否考虑到了这种情况。</p><ul><li><strong>只有复杂度优秀的算法才能够获得满分，但尽量不要卡常数。</strong></li></ul><p>这要求出题者需要一定程度上严格把握时间、空间限制。既不能出现数据偏弱，可以用暴力卡过去的情况，也不能出现数据太强，参赛者屡屡被卡常的情况。出题者应对比赛用评测机有一定估量，在写标准程序的时候，可以故意把常数写的大一点。</p><ul><li><strong>对于ICPC赛制的比赛，应当有能hack掉每一种错误算法的数据。</strong></li></ul><p>常用(<s>臭名昭著</s>)的方法有：生成菊花图，生成链，卡单哈希等等。当然，这些不一定要做，但是针对生成错误答案的程序应该将其hack掉。</p><ul><li><strong>使用lf进行换行，而非crlf。</strong></li></ul><p>算法竞赛的评测机采用<code>Linux</code>系统，在 Linux 和 Mac 上，<code>LF</code>相当于新文本行的开始。如果采用windows系统所输出的回车+换行符<code>CRLF</code>的话，可能会产生一下不确定的错误。</p><p>虽然sastoj有将<code>CRLF</code>转化为<code>LF</code>的功能，但我们仍然建议在出数据的时候就以<code>LF</code>进行换行。</p><h3 id="工具与方法">工具与方法</h3><p>对于较大的数据点，手动输入肯定是不现实的。下面有一部分出数据的工具与方法介绍：</p><h4 id="编写python程序">编写python程序</h4><p><code>python</code>由于其轻量化的优势，常常用来生成一道题目的测试数据（当然，您也可以使用其他的语言）。这里仅介绍python编写数据生成器的方法。</p><p>以<code>a+b problem</code>为例，下面是生成数据的代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>，<span class="hljs-number">11</span>): <span class="hljs-comment"># 我们生成1.in,1.out,2.in,2.out....</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>.in&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        a = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>)<br>        b = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>)<br>        <span class="hljs-comment"># 我们生成1~100000范围内的整数a和b </span><br>        f.write(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;b&#125;</span>\n&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>))<br>        <span class="hljs-comment">#将生成的数据写入文件。</span><br>        <span class="hljs-comment">#注意：为了保证写入lf而不是crlf，我们将字符串以utf-8编码，转化为二进制写入</span><br>        os.system(<span class="hljs-string">f&quot;.\std.exe &lt; <span class="hljs-subst">&#123;i&#125;</span>.in &gt; <span class="hljs-subst">&#123;i&#125;</span>.out&quot;</span>)<br>        <span class="hljs-comment"># std.exe为出题者所写的标准程序。这条命令表示以&#123;i&#125;.in为输入，以std.exe为程序，将输出写入&#123;i&#125;.out文件。</span><br></code></pre></td></tr></table></figure><h4 id="使用CYaRon">使用<code>CYaRon</code></h4><p><code>CYaRon</code>是洛谷开发的一款开源的数据生成工具。其中支持生成不同类型的树、图等数据。当然，CYaRon也是基于Python的。</p><p>CYaRon的稳定版本可以从pip获取:</p><p><code>pip install cyaron</code></p><p>在此之前，需要准备好Python。</p><p>当然，您可以参照文档进行<a href="https://github.com/luogu-dev/cyaron/wiki">学习</a>。</p><h2 id="配置文件">配置文件</h2><p>为了设置题目的时空限制，设置题目类型以及配置数据点结构， <code>sastoj</code> 设置了一套配置文件的规则。</p><p>对于不同题型的题目的配置文件方法，详情见<a href="https://github.com/Jisu-Woniu/rsjudge-test-cases-schema/tree/main/out">示例</a></p><p>作为出题者，一般情况下我们使用<code>.toml</code>格式写配置文件。配置文件中能够标明题目的时空限制，分数分布以及数据点的关系等等。</p><h3 id="使用yapyto生成配置文件">使用yapyto生成配置文件</h3><p><code>yapyto</code>是一款基于python的<strong>sastoj专用</strong>配置文件生成工具。主要功能有</p><ol><li><p>根据当前的数据点自动生成所需的配置文件</p></li><li><p>将<a href="hydro.ac"><code>hydro</code></a>上的题目便捷转化为sastoj所需的格式。</p></li><li><p>给定标程以及对应的数据生成器，直接生成输入输出文件和对应的配置文件。</p></li></ol><p>您需要把yapyto的<a href="https://github.com/FishZe/yapyto">GitHub仓库</a><code>clone</code>到本地进行使用。</p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>ACM</tag>
      
      <tag>出题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/31/hello-world/"/>
    <url>/2024/08/31/hello-world/</url>
    
    <content type="html"><![CDATA[<blockquote><p>official example of hexo</p></blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记人生中第一次XCPC</title>
    <link href="/2024/05/30/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1XCPC%E6%AF%94%E8%B5%9B/"/>
    <url>/2024/05/30/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1XCPC%E6%AF%94%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>ACM这个东西，其实我高中时期就有所耳闻了。而作为一个前OIer，感觉上了大学之后acm比赛是怎么说都得碰一碰的。</p><p>所以说，为此，我参加了校队，虽然自己不是计算机专业的，但是总是和一些计软院的同学（以及将要进入计软院的同学）在一起。可能因为学院以及专业不同的原因吧 <s>（其实主要是性格原因）</s> ，跟那些同学也熟络不起来，最后呢，还是在老师以及同门学长的帮助之下找到了队友。</p><p>个人觉得团队版的程序设计竞赛真的很<code>cool</code>诶，一个人不会有太大的压力，也不会有像考试那样的令人害怕的氛围，最重要的是， <strong>同学与同学之间的帮助真的是无私的</strong> 。这点真的是强调竞争的某些考试类比赛永远也得不到的。</p><p>所以，怎么说呢，就算是没有成绩，也不失为一种奇妙的体验吧，我这么想着。</p><h2 id="day-n">day  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">-n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span></span></span></span></h2><p>JSCPC的时间已经定好了，举办地点在离我们很近的南大。虽然说我所在的队伍是打星名额，是不上领奖台的。但是，我还是很想去一次。但是，却发现jscpc的时间居然跟大学物理的期中考试时间冲突了。</p><p>我第一反应肯定是去申请补考/缓考的。找过了各种负责的机构以及老师，但是最后的结果却令人失望。一个计入绩点的考试，居然没有补考缓考，我也不知道他们这帮人是怎么想的。也就是说， <strong>我如果去比赛的话，我的期中考试分数就是零分</strong> 。</p><p>固然，参加比赛不会给我带来什么实质性的奖励，反而会对我的绩点造成损失。在别人都能拿高分的情况下啊，我一个零分必然是极其显眼的。做了很久的心理斗争，问了自己很多次“我自己真正想要的是什么”。</p><p>我果然还是想去JSCPC。</p><p>**什么也无法舍弃的人，什么也做不到。**出自一个我最喜欢的动画人物之口。我想，我也是时候应该舍弃一些东西了。</p><h2 id="day-0">day 0</h2><p>校队组织了一次模拟赛，也是我第一次跟两位学长见面。在模拟赛的时候被队长的代码手速震惊到了。真的打的太快了…或者说，可能这才是竞赛选手应该有的打字速度。但是我作为一个小学第一节打字课没上的人，操着我的蹩脚打字法一直到现在，改邪归正也是不可能的了。当然，应该这是做题比较熟练的一种体现吧。但是呢，就算我们有着这么快的写题速度，AC量跟不上也无济于事啊。我们眼睁睁看着我们的排名从第二一直往下掉，掉的没底了。就因为一道单调栈的题目，我们思路想错了没跟上。</p><p>这次之后我想了很多的原因，也大概明白XCPC比赛到底应该是个怎么个打法了。</p><h2 id="day-1">day 1</h2><p>今天星期六，做好决定的我，准备去南大来一波真正的热身赛。</p><p><img src="/img/JSCPC-2.jpg" alt="这里"></p><p>今天下着小雨，我们过去的时候雨刚停，温度非常的令人舒服。</p><p>首先是赞助商huawei的宣讲会，又是经典的大神分享环节。我觉得吧，打算竞的大神都会多多少少 ~~有一种特殊的个人魅力（（ ~~ 可能也是因为所处类似环境造成的认同感吧。感觉这次的赞助商还蛮慷慨的哈，免费抽奖的礼物特别多，有耳机，手表啥的都送，据我所知应该不便宜。当然啦我肯定是啥也没抽到。不过我们学校的一个学长抽到了，他好像还是我未来的队友wwww</p><p>送了我们30块钱的饭票，南大的吃的可以随便抢购，除了吃了顿晚饭甚至还可以零元购各种零食饮料，给人的感觉还是很爽的。</p><p>然后就打了个热身赛吧（其实就是熟悉环境随便打打罢了），不过可惜的是我前一天刚看欧拉函数，结果一道欧拉函数的题还没推出结论，还是打表找的结论，搞得我很惭愧…</p><h2 id="day-2">day 2</h2><p>这次是真的要比赛了，不是开玩笑了哈。</p><p>以学校为单位集合拍照的时候，才发现我们学校的名额多得离谱，可能仅次于东道主南大吧。</p><p>题目发下来之后，我们每个人先读不同的题目，看到签到就做。由于我们队长的敲代码十分熟练，所以很快就把签到给打掉了，写完这两道题之后我们的排名很高。之后呢，我提供了一下一道二分题的思路，也是很轻松的就过，3个气球到手。（话说这个气球机制我也觉得很有意思，做出来一道题就给一道题对应颜色的气球，如果是一血的话甚至能获得一个字母形状的气球）</p><p>之后的状况其实就有点坐牢了。另外两位学长攻克一道博弈论题，我因为博弈论很烂，所以去看看其他的题目有没有拿下的机会，但是好像还是没有什么机会。就这样，一位学长不断提供思路，我感觉结论都蛮对的，另一位学长写题交题，但是连交了5发，都寄了。<strong>+5</strong>的罚时啊，之前几题一发过的优势可以说是全无了。不过好在我最后在他们的思路上发现了正解是怎么做的，，也算是过了4题了。</p><p>午饭的免费麦当劳很不错。</p><p>淡蓝色的H题很少人过，我不明白为什么，因为我觉得贪心并不难啊，但是最后因为各种各样的原因还是没有交题。最后讲题的时候说是dp，那我似乎确实是想错了。我们用最后的时间去写主席树已经是来不及了，也不知道能不能过，总之其实还是挺遗憾的。</p><p><strong>所以最后的结果出来了， 场切4题，如果不打星算是上游的铜牌。</strong></p><h2 id="what’s-more">what’s more?</h2><p>说实话这一次还是有一些让我有点遗憾的点的，但是你总不能对着自己的完美发挥说这是自己的真实水平对吧，发挥失常才是实力的一部分。省赛拿铜牌，全国比赛拿牌就真够呛。总之<strong>我还是太菜</strong>。</p><p>颁奖结束后接了辅导员的电话，他跟我反馈了我不去物理考试后，老师对我的态度，但是我很感谢他尊重我的选择。怎么说呢，作为一个优柔寡断的人，我一般失去了什么东西都要斤斤计较，陷入内耗，但是这次并没有，反而是一种自信的感觉将我包围。可能是我真的知道自己想要什么了吧。一个人要是患得患失，永远将自己束缚在规矩的链条之中，那还和NPC有什么区别呢，终归还是要被玩家利用和欺负的。</p><p>骑自行车回学校的路上把代表了那道博弈论题的红气球弄丢了。</p><p>一些小感想罢了，最后还是希望我能走的更远吧。<br><img src="/img/JSCPC-3.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回忆</tag>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【诗】 食堂</title>
    <link href="/2024/03/16/%E3%80%90%E8%AF%97%E3%80%91%E9%A3%9F%E5%A0%82/"/>
    <url>/2024/03/16/%E3%80%90%E8%AF%97%E3%80%91%E9%A3%9F%E5%A0%82/</url>
    
    <content type="html"><![CDATA[<h1>食堂</h1><p>冰冷的朝阳向东坠落<br>抬头却只有漆黑的月亮<br>在波光粼粼的夜空中<br>只有乌鸦在潜泳</p><p>走在光辉道路的  野鸡<br>躲在下水道里的  铁锈<br>白云吞噬边界</p><p>嘴巴为了遗忘<br>鼻子领航虚空<br>树枝的闹钟，其实是<br>胡须</p><p>橙黄的大地<br>幽灵<br>独我一人</p><p><img src="/img/2403162.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随便想的两道算法题+题解</title>
    <link href="/2024/02/28/%E9%9A%8F%E4%BE%BF%E6%83%B3%E7%9A%84%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98+%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/02/28/%E9%9A%8F%E4%BE%BF%E6%83%B3%E7%9A%84%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98+%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>在初中的时候，感觉打OI最有意思的事情之一就是出题。因为自己出的题目可以套一些奇奇怪怪的设定来整活，还可以名正言顺地迫害小伙伴。不过呢出的都不是什么正经题目。</p><p>现在几年过去了，感觉已经好久没有出过题目了，正好社团的友谊赛给了我一个契机来认真出两道题，个人认为这两题的难度，思维量，码量也都说的过去，就出一篇题解。</p><h2 id="A-萌娘评鉴指南"><a href="https://www.luogu.com.cn/problem/U391746">A.萌娘评鉴指南</a></h2><p>题目大意就是给主角找对象啦(* /ω＼*)</p><h3 id="概括">概括</h3><p>给定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个集合，这<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个集合组成一个序列，给定3种操作，一共进行<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>次：</p><ol><li>给编号l~r的集合每个集合添加一个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></li><li>给编号l~r的集合每个集合进行反转 <strong>（去掉有的数字，添加原先没有的数字）</strong></li><li>询问编号l~r的集合中，有数字<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>的集合数量是奇数还是偶数。</li></ol><p>数据范围：  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">n,m \leq 2\times10^5, c\leq15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">15</span></span></span></span>.</p><h3 id="思路：">思路：</h3><h4 id="位运算：">位运算：</h4><p>其实看到c的范围就可以找到这题的突破口。因为对于集合里的每个数，都只有“有”和“没有”两种状态，所以完全可以利用位运算，来把每个集合转化为二进制的数字，这样集合就可以以<code>int</code>的形式存储了。</p><p>例： 1,2,4 -&gt; 1011 -&gt; 11</p><p>使用位运算，我们又可以重新翻译一下这道题目：</p><p>给定n个整数，进行q次以下可能的操作：</p><ol><li>给编号l~r的数每个数都 <strong>按位或</strong> <code>1&lt;&lt;c</code></li><li>给编号l~r的数每个数都进行 <strong>取反</strong></li><li>查询l~r的数的<strong>异或和</strong>  <strong>按位与</strong> <code>1&lt;&lt;c</code>的结果。</li></ol><p>熟悉位运算的应该能非常容易作出这种转化，不熟悉的也会发现这几种操作可以和原先所说的完全对应起来。</p><h4 id="线段树：">线段树：</h4><p>因为询问的是异或的结果，而异或是满足结合律的，结合数据范围，我们必须要想到一种能够在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>复杂度内进行操作的方法。</p><p>那么很明显就是用 <strong>线段树</strong>。 线段树维护的内容是区间内的异或和。</p><p>那么问题来了，怎么样完成1操作和2操作呢？</p><p>对于线段树而言，肯定是要建lazytag的，通过合理地设置lazytag，我们就可以合理建出满足要求的线段树 <s>（车轱辘话时间）</s></p><p>显然，lazytag中包含以下两个内容： <strong>区间要取或的值</strong> 和 <strong>区间是否取反</strong>。但是有一个问题：区间进行取反之后，区间要取或的值就变了！思考一下可以发现，要取或的值，取反之后，再取与就可以了。</p><p>所以实际上我们的lazytag要存储3个内容：</p><ol><li>区间要取或的值</li><li>区间是否取反</li><li>区间要取与的值</li></ol><p>此外，还有n个细节需要注意：</p><ol><li>区间长度为偶数，异或和不需要取反，长度为奇数要取反</li><li>如果区间长度为偶数，那么取或操作应该改为取反后取与（因为某一位如果有偶数个1，那么异或和就是0）</li><li>是否取反的标记，应该使用 <strong>异或</strong> 操作,因为取反两次就相当于没有取反，如果用了赋值会出错。</li></ol><h3 id="代码：">代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> a[<span class="hljs-number">500100</span>];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tag</span>&#123;<br>    <span class="hljs-type">int</span> val, v_and = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>, v_or = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> rev = <span class="hljs-number">0</span>;<br>&#125;t[<span class="hljs-number">2000100</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ls</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<span class="hljs-keyword">return</span> p&lt;&lt;<span class="hljs-number">1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">rs</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<span class="hljs-keyword">return</span> p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<br>    t[p].val = t[<span class="hljs-built_in">ls</span>(p)].val ^ t[<span class="hljs-built_in">rs</span>(p)].val;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">lazy</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> vand, <span class="hljs-type">int</span> vor, <span class="hljs-type">bool</span> isrev)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(isrev)&#123;<br>        <span class="hljs-type">int</span> temp = t[p].v_and;<br>        t[p].v_and = (~t[p].v_or);<br>        t[p].v_or = (~temp);<br>        <span class="hljs-keyword">if</span>(((r-l+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>)t[p].val= (~t[p].val);<br>    &#125;<br>    <span class="hljs-keyword">if</span>((r-l+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>        t[p].val &amp;= vand;<br>        t[p].val &amp;= (~vor);       <br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        t[p].val &amp;= vand;<br>        t[p].val |= vor;<br>    &#125;<br>    <br>    t[p].rev ^= isrev; <br>    t[p].v_and &amp;= vand;<br>    t[p].v_and |= vor;<br>    t[p].v_or |= vor;<br>    t[p].v_or &amp;= vand;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">lazy</span>(<span class="hljs-built_in">ls</span>(p),l,mid,t[p].v_and,t[p].v_or,t[p].rev);<br>    <span class="hljs-built_in">lazy</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r,t[p].v_and,t[p].v_or,t[p].rev);<br>    t[p].v_and = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>;<br>    t[p].v_or = <span class="hljs-number">0</span>;<br>    t[p].rev = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;t[p].val=a[l];<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p), l, mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p), mid+<span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> nl, <span class="hljs-type">int</span> nr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> vand, <span class="hljs-type">int</span> vor, <span class="hljs-type">bool</span> isrev)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(nl &lt;= l &amp;&amp; nr &gt;=r)&#123;<span class="hljs-built_in">pushdown</span>(p,l,r);<span class="hljs-built_in">lazy</span>(p,l,r,vand,vor,isrev);<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-built_in">pushdown</span>(p,l,r);<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(nl&lt;=mid)<span class="hljs-built_in">update</span>(nl, nr, l, mid, <span class="hljs-built_in">ls</span>(p), vand, vor, isrev);<br>    <span class="hljs-keyword">if</span>(nr &gt;mid)<span class="hljs-built_in">update</span>(nl, nr, mid+<span class="hljs-number">1</span>, r, <span class="hljs-built_in">rs</span>(p), vand, vor, isrev);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> nl, <span class="hljs-type">int</span> nr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(nl &lt;= l &amp;&amp; nr&gt;=r)&#123;<span class="hljs-built_in">pushdown</span>(p,l,r);<span class="hljs-keyword">return</span> t[p].val;&#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushdown</span>(p, l, r);<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(nl&lt;=mid)res^=<span class="hljs-built_in">query</span>(nl, nr, l, mid, <span class="hljs-built_in">ls</span>(p));<br>    <span class="hljs-keyword">if</span>(nr&gt; mid)res^=<span class="hljs-built_in">query</span>(nl, nr, mid+<span class="hljs-number">1</span>,r,<span class="hljs-built_in">rs</span>(p));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> ci;<br>        cin&gt;&gt;ci;<br>        <span class="hljs-keyword">while</span>(ci--)&#123;<br>            <span class="hljs-type">int</span> u;<br>            cin&gt;&gt;u;<br>            a[i] += (<span class="hljs-number">1</span>&lt;&lt;u);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> op;<br>        cin&gt;&gt;op;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> l,r,c;<br>            cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;<br>            <span class="hljs-built_in">update</span>(l,r,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>), (<span class="hljs-number">1</span>&lt;&lt;c), <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">int</span> l ,r;<br>            cin&gt;&gt;l&gt;&gt;r;<br>            <span class="hljs-built_in">update</span>(l,r,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">int</span> l, r, c;<br>            cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;<br>            cout&lt;&lt;((<span class="hljs-built_in">query</span>(l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) &amp; (<span class="hljs-number">1</span>&lt;&lt;c))?<span class="hljs-string">&quot;Yes&quot;</span>:<span class="hljs-string">&quot;No&quot;</span> )&lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-新建文件夹"><a href="https://www.luogu.com.cn/problem/U399877">B.新建文件夹</a></h2><p>在出这道题之前，我开玩笑地说“题目已经在出了（新建文件夹）”，于是干脆就把这题叫作新建文件夹好了，题目大意也跟我出题的过程有关，只能说当时的精神状态极为良好（笑）</p><h3 id="概括：">概括：</h3><p>以深度优先的顺序访问一棵树的每个节点，直到访问到目标的叶子节点结束。询问访问节点数量的期望。</p><h3 id="思路：-2">思路：</h3><p>这题可以说跟上一题相比非常简单了。</p><p>我们可以发现，从根节点到目标叶子节点的这一条链，是一定会被访问到的。也就是说访问到这些节点的概率为1。</p><p>那么其它的节点呢？我们会发现，对于链上的每一个节点，他们的兄弟节点被访问的概率都是相等的，它们要么被访问到，要么没有被访问到，概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。<br>对于这些节点的所有子孙节点，他们都是一定会被访问到的。因为只有把这些节点全部走完才可能返回上一级，所以他们的概率也是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p><p>那么答案就出来了：从根节点到目标叶子节点的这一条链节点的数量+其它节点数量/2.</p><p>总码量奇短无比。</p><h3 id="代码：-2">代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,target,len;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">3000010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> c;<br>        cin&gt;&gt;c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;c;j++)&#123;<br>            <span class="hljs-type">int</span> x;<br>            cin&gt;&gt;x;<br>            fa[x] = i;<br>        &#125;<br>    &#125;<br>    cin&gt;&gt;target;<br>    <span class="hljs-keyword">while</span> (target != <span class="hljs-number">0</span>)<br>    &#123;<br>        len++;<br>        target = fa[target];<br>    &#125;<br>    cout&lt;&lt;len + (n-len)/<span class="hljs-number">2</span>&lt;&lt;((n-len)%<span class="hljs-number">2</span>?<span class="hljs-string">&quot;.500000&quot;</span>:<span class="hljs-string">&quot;.000000&quot;</span>)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>算法</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闪回 蝉鸣 再不会回来的你</title>
    <link href="/2024/01/03/%E5%86%8D%E4%B8%8D%E4%BC%9A%E5%9B%9E%E6%9D%A5%E7%9A%84%E4%BD%A0/"/>
    <url>/2024/01/03/%E5%86%8D%E4%B8%8D%E4%BC%9A%E5%9B%9E%E6%9D%A5%E7%9A%84%E4%BD%A0/</url>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1334077117&auto=1&height=66"></iframe><p><strong>刚遇见X的时候，我也只还是个小孩子。</strong></p><p>毕业，告别，来到新城市上学。新的学校，新的城市，新的人。一切都是那么的陌生而让人恐惧。话虽这么说，但当初我自己的嚣张和开朗还是能做到让现在的我十分吃惊的程度 <em>（换做现在的我，就算是真的表现还可以也会挺低调的罢可能）</em> 。有什么知道的就说，展示自己所会的东西，但其实充其量就是个幼稚鬼。</p><p>那是的我是一个十分矛盾的人，一边会因为身边全是比我强几倍的人而心生恐惧，另一边又会非常激动地炫耀自己所会的东西。可能是我对以前的自己恨之入骨罢，所以一想到那时，就会抽自己几个巴掌。</p><p>我兴奋地操弄教室的一体机，也就是这个时候碰见的X。</p><p>最开始，我也仅仅是把X当作计算机方面的同好，我经常说一些对计算机的浅薄看法，而X真的会对此做一些具体的分析，而这里面则不可避免地掺杂着若干我听不懂的名词。</p><p>X是一个无法被当时幼稚的我所理解的一个“奇怪”的人。好像不喜欢做一般12岁孩子爱做的任何事情。我喜欢凑热闹，而X一点也不喜欢凑热闹。我喜欢宣扬一些网络烂梗，而X虽然对此了解，但是也不会像我一样当一个复读机。在人际交流之间完全没有什么顾虑的13岁，我跟不太熟的人线上聊天也会轻松发一句“在吗”，而X则喜欢以“你好”开头；那时的我们可能只要聊得来，或者说过几句话就能以“朋友”相称，可是X从来也没有说过某人是“朋友”。</p><p>我在暑假时略微学过一点点python，而X前端的水平却已经不是一星半点了。X在当时已经可以使用前端去写音乐播放器，2048等，而我的python水平只能对着命令行傻乐。不过，13岁的我，总有挺多新奇的想法呢。令我印象深刻的，比如说用另一种特殊的方式去写中文，或者是创造一门新的编程语言之类的。由于学识有限，但是创造的东西也只能用幼稚来形容，但是X在想这些的时候，可能真的很快乐吧。</p><p>仔细想来，X也真的在很多方面影响了我呢。</p><p>“我的天哪，你真的好强。”有的时候我会不自禁地对X发出赞叹。</p><p><strong>“我是废物。”</strong> 我第一次听到这句话的时候是真被吓了一跳。X与一般人的谦虚不同，别人的谦虚可能只是为了低调，为了不让自己骄傲的举措，然而本人还是自信的。但是X在描述自己的时候，是真的会给人一种非常自卑，对自己心生怨恨，想要骂死自己的感觉。</p><p>为什么我这么清楚？大概是因为我也受到了影响吧。 <strong>写这段的时候就像在写我自己一样。</strong> 在X的影响与现实的打击下，我也成为了一个非常自卑，对自己心生怨恨的人。在描述自己的时候，也是恨不得骂死自己。连走路也开始跟X一样低着头弯着腰，好像不想见到任何人。</p><hr><p><strong>OI给了我和X一个更大的共同话题。</strong></p><p>不知什么时候开始，我和X开始不约而同地学起了C++。在我还完全不懂X所讲的什么<code>Vue.js</code>,<code>Grid</code>之类的东西为何物时，至少C++给了我们一个差不多同等的平台吧。大概在语法起步的时候，他带我找到了我们学校负责OI的一个老师，还带我去找了隔壁班的S。我们一起注册了洛谷账号，OI的旅程也就从这里开始了。</p><p>我不会学习。与之相反，X是一个天才。在做题数量差不多的情况下，X可以赛时完成一大部分题目拿高分，而弱小的我不说去能达到X的高度，只要争取不爆零已经是一种奢望。每次想到与X相比的事，就会让我心理感到不平衡想退役。 <strong>所以，我也只是一直望着X的背影越走越远，直到我再也看不见，也捉摸不透……</strong></p><p>在语文课的自由阅读时间一起看《C++ Primer》被发现，整一些莫名其妙的接龙，在社团里出一些有意思的题目，OI确实比我想象的要有趣的多呢…这也可能是我中学时期，唯一一件可以让我感到“学习很快乐”的事情。</p><p>然而，就算学习过程中有着鲜花，也掩盖不住这段路程的艰难呢。我所获得的，远比我所希望的要少。初一刚起步，初二NOIP初赛就被打爆，初三，NOIP又莫名其妙的被取消，取而代之的是一个叫做CSP的“有实无名”的比赛。 <em>“初三不拿普及一等奖，以后也别想了。”</em> 我这么想着。</p><p>初赛正常地通过，接下来就是最重要的复赛了呢。那几个月里，我不管午休，以最快的速度做完作业，然后立马用晚课的剩下时间冲去机房开始做题。虽然说作业写得十分快，但是好像质量也还不错。那段时间，可能是我初中学习最认真的时候了。此时的我，已经不记得跟老师打过多少次的晚课申请，也不记得重新打过多少次模板，虽然我很不想说，但是可能“紧张而充实”真的是那时候的最佳写照吧。</p><p>时间一天天流过，终于到了前往南京的日子呢。南航的键盘果然用起来很舒服。晚上，比赛结束，走上归程，当时我们也只是有说有笑， <strong>我也根本没有想到，可能快乐会就这样画上句号，我更没有想到，之后会走上那样的结局。</strong></p><p>“你考了多少？”几天之后，我问X。<br>“我估分265，要是到了我就女装。”X说。<br>“好巧，我也估分265，到了我也女装。”我笑着回答。</p><p>结果出来了，我因为忘记骗分的原因拿了255，而X幸运地正好265分。X要女装了，不过我们都完成了应有的使命——拿到普及一等奖。根据条约，X不负众望地，在寒假用灵梦的cos服女装了。 <em>我很开心，不知道X又是以什么心情去面对这件事的呢…</em></p><hr><p><strong>写到这里，曾经的快乐时光一起向我涌来，内心五味杂陈。</strong></p><p>寒假。</p><p>“你穿成这样，真的不冷吗？？”我惊讶地看着X，在寒冷的冬天，最外面的一层却只是一件一点也不厚的长袖校服。</p><p>“确实不冷。”X的父亲说，不穿羽绒服就别想出门了，然而就这样X也只是拿着羽绒服，并没有穿。“你也太nb了。”我笑着说。</p><p>“这杯可乐你要吗？送你了。”在一家麦当劳里，我对X说。跟不喜欢喝可乐的我相比，X好像很喜欢喝可乐。这样吃麦当劳的时候倒也正合适。“谢谢。”X回答。不知道为什么，这句话从X口中说出，好像确实对我来说有点陌生。</p><p>“你真的好像一只猫啊，哦不对，你就是猫。”我说道。“晚上不睡觉，抗寒能力强，而且还会编程。”我不知怎么的，就莫名其妙的把“猫”和“编程”这两个事情联系了起来。“哦对，Github图标的那只猫肯定就是你！”我恍然大悟地说道。</p><p>“不。”X回答。这是一句经典且简单的反驳，很有X的风格。</p><p>“按照你以前说的你家的地方，你乘地铁不应该跟我一个方向吗，为什么总跟我反向乘地铁？”我很疑惑，“哦我知道了，你有一个房子，但是有两个地址。”我说道。这种不合逻辑的荒诞的话，可能我也只会跟X说了。因为只有跟X说才能get到这种风格话的笑点。</p><p>“对。”X笑了，我也笑了。</p><p>说起来，确实很巧呢。X是出了名的不睡觉，我也是出了名的不吃饭。X很喜欢把一些看不清的东西乱读来整笑点，我也喜欢空耳别人的话变成来整笑点。不知道是我向来如此，还是一定程度上受了影响呢。</p><p>初三的最后一次秋游。</p><p>一共就没多大地地方，可整个上午我好像没有见到一个人，只是跟X在漫无目的地走着。而没有我，X早就不想秋游，而是在平板上玩自己的Arcaea了。“你不能这样，你跟班主任报备说自己不玩手机游戏，结果就在这玩平板了，跟我去看小猪跳水。”</p><p>就这样兜兜转转，聊了什么我早已忘记，一个上午也就这样过去。与大部队会合之后，他们都对我什么项目都没去而感到吃惊，而这之后，我也去玩了项目而不去管X在干什么。那时候的X，究竟在做什么呢……</p><p>初中的时候班级办过很多活动，而在我印象里有很多很多的活动我都是和X一起度过的。就连班主任也评价道：“有着相同的兴趣，就算性格不同也能关系很好呢。”是不是只有兴趣相同这么简单呢？我也不知道。</p><p>“我的有些话，难道会去跟其他那些人去交流吗？肯定是找你吧。”残存的记忆中，好像X确实是对我说过这么一段话。</p><p><strong>春风刮起，天气逐渐温暖，可我的心却从未这么寒冷过。</strong></p><p>“你要退役了？”我惊讶地说。</p><p>“啊对。”</p><p>“不是，为啥？你这么强，而且还刚拿了一等奖，拿完奖还写了一长篇文章来描述你的心路历程，怎么现在又说要退役了？”</p><p>“是这样的。”X笑了笑，说，“我感觉我现在想要研究一个叫⌈编程语言基础⌋的东西。而且将来我也肯定不会走高考路线的，我要去国际班。”</p><p>“啊啊…好吧，恭喜你。”我也不知道应该说什么了。是啊，不一直是这么一个有主见的人吗，我想着。一直让人猜不透。而且，X的能力也过于强，导致我无论在哪里，也都只能望着背影，深深感到自己的弱小。我大抵是会走高考路线，也不会放弃OI的吧，毕竟我也想有一个能和X并肩的机会啊。</p><p><em>不过现在回想起来，我高中的OI不能说学的很少吧，也真的是约等于没学了。这其中，学校的压力，学习的压力，可能只占一小部分。可能最大的原因，只是，我失去了向前的动力罢。</em></p><p><strong>终于还是要再见了，如果能是一场体面的告别该有多好，可惜…</strong></p><p>X的情绪不稳定确实也不是一天两天了（当然我也没什么资格说别人情绪不稳定）。在有几个学期的期末，我会被不知道为什么的冷言以对。那种感觉说实话有点让人恐惧，我也不明白自己做错了什么。但是与其他时候不同，这次X没有对我冷淡，跟我保持着良好的关系的同时，好像对其它的事情充满了愤怒。</p><p>大概是那次换座位开始的吧。本来是在正常不过的两周一次换座位，班级换座位的效率却异常之低。X一怒之下，拿起自己的笔，朝自己的后颈戳去……</p><p>我愣住了。到底发生了什么？我也就这样子恍惚着，终于到了晚课下课。</p><p>“我感觉，这些负面情绪的来源全都在于这个班级。离开这个班，很多问题都会解决的，我只要在等几个月就好了。”X对我说。</p><p>“为什么？”</p><p>“这个班里面有了太多我看不惯的人，或者说，他们的思想水平都很低。”</p><p>大概X的确是有资格说出这句话的吧。大概在初中的这段时间，X一直给我科普各种各样的事情，有网上的，有现实的。从X在网上发言的语气以及思想深度来看，确实已经比同年龄段的人要高出太多了。我在高中时时常不停感叹：“我在主动接受这些信息的时候要在高中，而X已经走在我前面三年了。”也多亏了X，让我能在初中时期，能有如此之大的媒介素养的提升。</p><p>“你不能这样，你得有一颗包容的心。不能因为怎么怎么就看不惯别人啊。”我这么对X说。</p><p>X回复了什么，说实话我确实已经忘记了。但是我忘不掉X持续了几个月的，红的有点发黑的后颈。</p><p>短短的一个学期，X似乎干了很多次这种事情。但是每一次事情发生后，我都会去问发生了什么。说实话，我能讲的大道理也就这么多，X也真的快让我词穷了。X会先肯定我说的话，但是之后却还是那么干。我也才知道，我以为我很了解X，其实我一无所知罢了。</p><p>中考的压力压得我喘不过气来，然而我还是时不时的在为X担心着。有一天，X又找到我。“你说的很对，我看来是一个严重的反社会人格。”然后笑着，拿出了一张满是血迹的餐巾纸。我很心痛，但是更多的却又是愤怒。因为我无论怎么去劝说X，得到的还是这样的结局，还是在不断地自残。</p><p>“你知道吗，现在我很想揍你。”以前X有时会这么对我说，但今天却是我说出来的。</p><p>“但我知道，你不会这么做的。” <strong>现在看来，X说出这句话完全是处于对我的信任吧。但我却完全会错了意。</strong> 当时的我甚至以为X在挑战我的底线。</p><p><strong>“我感觉你从来没把我说的话当一回事，那这样吧，我以后不会再跟你说任何一句话了。”</strong></p><p>我和X的关系就这样莫名其妙地结束了。结束的很突然，最令我感到痛苦的是，居然是由我以一个莫名其妙的原因亲手结束掉的。之后的几天，我无法理解我到底为什么要这么做。跟一个人绝交，竟然是因为对这人太关心？太荒谬了。但是事实却就是这样也已经无法挽回了。</p><p>我曾经以为，我的朋友很多，而X只是一个连朋友都称不上的人。但是我错了，在最后的几天里，我总是不知道为什么自己一个人低着头走出教室，看看X在哪里，甚至希望能重新回来找我。但是……明明是我说的不再跟别人说话，却希望着别人重新回来找我，我也真是有够蠢的。我也不知道X到底发生了什么会这样。也许我知道了之后，就不会这么做了吧。可能，我确实低估了X在我心中的地位吧。</p><p>夏天到了呢。我还是跟往常一样，确实有时会萌生一些有趣的想法，但我已经不知道，能跟谁说了。</p><p>中考时，蝉在外面鸣叫，大雨倾盆而下。我因为午休的时候打呼噜被人嘲讽，不想再回宿舍午休。而X也没有去宿舍。</p><p>教室里又只剩下了我跟X两个人。</p><p>教室里真安静啊，除了外面的雨声什么也听不到。</p><p>想去跟X说些什么，最后还是什么也没敢说。就在两个人一言不发的情况下，中午结束了，初中生涯也马上要画上句号。我想，我和X可能以后也再不会相见了吧。</p><p>此时的我怎么还会去乞求别人的原谅呢？我连自己都原谅不了自己。X就算到了现在一直恨着我的话，我想也是理所当然的。</p><p>我很不喜欢用“后悔”的字眼，因为我觉得一切都是命中注定，唯独这件事情，我可能真的会后悔一辈子吧。</p><blockquote><p>是啊 你是朋友 握住我的手吧<br>是啊 你是一个人的 没什么能呆的地方吧<br>不断反复的<br>闪回 蝉鸣 再不会回来的你<br>永远破碎掉的 两人同一款的钥匙圈<br>夏日已然消去 只想对洁白肌肤的少女<br>近乎悲伤般 着迷起来<br>——《少女レイ》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回忆</tag>
      
      <tag>OI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>悲惨的经历——蒟蒻的博客搭建故事</title>
    <link href="/2023/11/30/bloglog/"/>
    <url>/2023/11/30/bloglog/</url>
    
    <content type="html"><![CDATA[<h2 id="记录一下搭建服务器以及创建博客的历程">记录一下搭建服务器以及创建博客的历程</h2><blockquote><p>写在前面</p><p>其实是这几天摆烂太久了，又加上发烧，使得我突然又重新想去做点什么事情来把我的想法记录下来，于是就觉得搭个博客是必要的<br>~~话说我需要一直记录自己的过去，是因为已经老了吗（笑）~~但是不可避免地，在时候几天肯定会在这个上面出现很多很多问题，于是就想着把这个记下来好了</p></blockquote><h3 id="day1：23-11-30">day1：23.11.30</h3><p>搞了个腾讯云账号，已经不知道怎么办了，现在想办法整到最便宜的办法吧</p><h3 id="day2-23-12-1">day2: 23.12.1</h3><p>花了一百多块钱，买了个一年的服务器，哎呀我心疼的要死，之前确实还没有在网上花过钱，感觉心在滴血好吧…<br>这样的话不得不好好维护一下这个新博客了。</p><p>之后又花了35块钱买了个貌似是比较便宜的域名，还要实名认证啥的，反正挺麻烦的。算了，我这钱都出了总不能白出吧，大不了每个月少吃一顿麦当劳好了。</p><p>后面是真难搞，做了一系列心理准备，干脆把系统重装了得了（指服务器系统）</p><p>经过了一系列的莫名其妙瞎折腾，我居然已经把wordpress给安装完成了，但是很可怕的一点是，我宝塔的用户名和密码忘了，但愿之后不要伏笔回收（</p><h3 id="day3-23-12-2">day3: 23.12.2</h3><p>出人意料的是，在整个网页的制作当中，考验代码能力的阶段几乎是没有的，大概也只是因为我根本不会前端罢。下了个<em>Hestia</em>主题，就差不多可以进行一系列页面的编辑啊啥的了，总的来说还挺顺利。（说实话，在搞wordpress之前， 我真的一直以为别人的博客是完全自己做了个网页上去）</p><p>那现在也差不多这个空间也算是完成了 可能这个文章也算完结了罢（</p><h3 id="dayn-23-12-24">dayn: 23.12.24</h3><p>就是说突然发现博客不能用了（笑）。原因是我没有进行备案。</p><p>但是有一说一，那个备案的过程也真是有够哈人的，啥信息都要上交过去，万一有啥问题，我可遭不住。</p><p>想来想去，还是决定放弃掉原来的那个地方，而在github上面重新搞。</p><p>看到别人说什么，在github上部署wordpress要下载mamp之类的，我也没想着是怎么一回事反正就下了，最后还是竹篮打水一场空，可见不动脑子的下场。</p><h3 id="day-n-x-23-12-28">day n+x 23.12.28</h3><p>在搞了不知道有几天，终于是把hexo的框架重新搞定了。现在写文章应该是不会遇到什么问题，而且心中更加安全了（没想到最开始买的那个服务器没起到应尽的责任，算了，就让它跑跑服务好了。。。</p><h3 id="搭建博客的过程总算是结束了。其中的过程真的是有够艰难的了，可能是我脑子不够的原因吧，能让本来还比较简单的事情搞得那么复杂…">搭建博客的过程总算是结束了。其中的过程真的是有够艰难的了，可能是我脑子不够的原因吧，能让本来还比较简单的事情搞得那么复杂…</h3>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>服务器</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【洛谷日报】浅谈后缀数组算法</title>
    <link href="/2020/02/24/%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/"/>
    <url>/2020/02/24/%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>浅谈后缀数组算法</h1><blockquote><p>后缀数组(suffix array)是一个通过对字符串的所有后缀经过排序后得到的数组。<br>后缀数组同时也是后缀树的一个替代品，它比后缀树更好写，所以OIers通常会使用后缀数组，而非后缀树。</p></blockquote><p>参考资料（转侵删）：</p><blockquote><p><a href="https://xminh.github.io/2018/02/27/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%9C%80%E8%AF%A6%E7%BB%86(maybe)%E8%AE%B2%E8%A7%A3.html">xminh的blog</a><br><a href="https://zh.wikipedia.org/zh-hans/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84">后缀数组-Wikipedia</a><br><a href="https://wenku.baidu.com/view/5b886b1ea76e58fafab00374.html">国家集训队2009论文</a><br><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F">基数排序-百度百科</a><br>《算法竞赛入门经典》刘汝佳</p></blockquote><h2 id="前言">前言</h2><p>最近看到了一些将后缀数组的文章，看上去写的不错，便对后缀数组这个算法心生兴趣，学了之后发现，他写起代码来还是对萌新有一些难度的（比如说我），所以我想把自己在学习的过程中遇到的一些困难记录下来，以免大家也在此环节纠缠不清。嫌我啰嗦的就挑代码看吧。</p><h2 id="一些约定-介绍">一些约定&amp;介绍</h2><p>所谓后缀数组，数组大家都知道，那啥是后缀嘞？</p><p>一个字符串S，它里面有很多个<strong>子串</strong>，所谓子串，也就是字符串以任意字符为开头，再在它后面的任意一个字符结尾的字符串。之后以<code>str[i,j](i&lt;=j)</code>来表示从S[i]~S[j]的字符串。</p><p>而<strong>后缀</strong>，则是子串里面特殊的一种，如果它的长度为<code>n</code>，下标以0位开头,那么<code>j=n-1</code>。z之后以<code>suf(i)</code>表示以<code>i</code>为开头的后缀</p><p><strong>后缀数组</strong>(<code>sa[]</code>)，就是处理这些后缀的排名。也就是说，如果把一个字符串里的所有后缀全都取出来(共n个)，再让他们以<strong>字典序排列</strong>，我们可以通过后缀数组来清楚地看到排第一、第二、第三……的后缀是从几开头的。</p><p>后缀数组，通常还会带有一个“附加产品”——<strong>名次数组</strong>(<code>rk[]</code>)，这个数组，可以让人知道从i开头的后缀，在所有后缀中能排第几。</p><p>如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/838huxxs.png" alt=""></p><p><em>简单来说，<code>sa[]</code>记录的是 <strong>“排第几的是谁”</strong>，而<code>rk[]</code>记录的是 <strong>“它排第几”</strong>。</em></p><p>同时，我们还能发现一个性质：<code>sa[rk[i]] = rk[sa[i]] = i</code>。</p><p>理解了后缀数组到底是什么之后，我们就可以学习后缀数组的求法。</p><h2 id="实现一个后缀数组">实现一个后缀数组</h2><p>怎么求后缀数组，可以说是本文最主要，最重要的部分。我们有很多种求法。</p><h3 id="O-n-2-log-n-做法"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 做法</h3><p>非常简单，就是最暴力的做法：把每个后缀当一个字符串，再将其扔进<code>sort()</code>里完事。<code>sort()</code>的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，再加上字符串大小比较的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>总共就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。这么暴力的东西谁都会写，当然也比正解要慢了许多。</p><h3 id="O-n-log-n-做法"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 做法</h3><p>一共有两种著名的求后缀数组的算法，我们先讲简单易学好理解的<strong>倍增</strong>算法。</p><h4 id="倍增算法">倍增算法</h4><p><s>好学归好学，关键难理解</s></p><p>刚才字符串暴力排序的复杂度之所以高，那是因为他直接<em>横向</em>地比较了每个字符串的大小，这样根本没有优化的空间和方法。但如果我们换个思路，纵向比较呢？</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/myq8g4q8.png" alt=""></p><p>有人要说：这样做不是跟刚才一样吗？</p><p>但是其实不是，首先，我们抛弃了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的排序比较，有更大的优化空间。第二，人是活的，我们可以将其稍加调整，不对其字符进行比较，而使用其字符所在的排名进行比较。如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qnya82mq.png" alt=""></p><p>每个字符串的第一个字符已经比较完毕，根据字典序比较的原则，接下来就应该比较第二个字符。当然，比较第二个字符的前提是第一个字符也要按照字典序排列。也就是说，我们形成了一个<strong>双关键字</strong>的排序。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1arqmdxz.png" alt=""></p><p>那接下来呢？比较第三个字符吗？并不是。倍增算法就体现在这里。我们会发现，其实应该将它们两两合并，变成4个关键字仍然不影响排序。但是，我们上一步已经两两合并了，也就是说，4个关键字，实质上只要管2个关键字，这就是<em>倍增</em>。接下来倍增为8，依然如此。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5vjgnace.png" alt=""></p><p><strong>那么我们什么时候可以停止倍增呢？</strong></p><p>要知道，如果像奥尔加团长一样不停下来的话，就会<strong>TLE</strong>，所以，当倍增数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的时候，就可以停了。（因为所有第二关键字都是0）并且，如图所示，如果<code>sa[]</code>数组没有任何数字是相同的话，也可以提前停止。（因为第一关键字不出现相等的情况）。</p><p>不过，排序是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的，倍增一共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 次，咋就<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>呐？</p><p>要知道，字符的排序，有一个特性：最大值较小。因为字符数量有限，考虑所有数字和字母，最大的’z’也不过一百多。再加上特殊的双关键字排序，我们完全可以不用快排，而改用<strong>基数排序</strong>。</p><h4 id="基数排序">基数排序</h4><p>基数排序就是把数据统统扔进桶里面的排序（<br>在执行基数排序的时候，我们要建一个数组，这个数组的没一个元素，就是所谓的“桶”。</p><p><em>例 ： 排序<code>(1,2)</code>,<code>(3,2)</code>,<code>(1,3)</code>，第一个数为第一关键字，第二个数为第一关键字。</em></p><ol><li><p>我们先按照<strong>第二关键字</strong>，一个一个把数据扔进桶里。</p><table><thead><tr><th></th><th>桶1</th><th>桶2</th><th>桶3</th></tr></thead><tbody><tr><td>无</td><td><code>(1,2)</code>,<code>(3,2)</code></td><td><code>(1,3)</code></td><td></td></tr></tbody></table></li><li><p>将桶里面的东西全抽出来，不改变在桶内的数据，然后再按<strong>第一关键字</strong>扔进桶里。<br>|        |  桶1   |       桶2       |    桶3 |<br>|  ----  | --------------- | ------ | ------ |<br>| <code>(1,2)</code>,<code>(1,3)</code>     | 无 | <code>(3,2)</code>|</p></li></ol><p>再将其抽出来后，就是一个排完序的数组啦~</p><p>这样排序的正确性在于：我们第一次排完序之后，实际上就已经保证了<strong>同一第一关键字，第二关键字的相对顺序正确</strong>。这样，我们只要保持原来相对顺序不变，只管第一关键字排序就行了。这也是第一次排序是按照第二关键字的原因。</p><p>那么，我们先看一下基数排序的代码（单关键字，双关键字本质上就是做它两遍）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//b数组：桶</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[s[i]]++;<br><span class="hljs-comment">//++表示将一个数据放入桶</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-comment">//通过求前缀和的方法，将每一个桶内的东西排上名次</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[s[i]]]=i;<br><span class="hljs-comment">//由于我们求得是sa[],所以b[s[i]]表示排名（刚才已经前缀和过了）而--的原因是为了消除并列的情况，i表示此后缀的标号。</span><br></code></pre></td></tr></table></figure><p>不难发现，使用基数排序后，排序的复杂度达到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。再加上倍增所用的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，总复杂度就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>思路都讲完了，接下来就上代码了。理解了思路不一定写的出代码，因为代码有很多细节需要考虑。</p><p>首先，是初始化的代码。初始化先使用基数排序，直接求出倍增之前的<code>sa[]</code>数组,顺便还能初始化一下<code>x[]</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*初始化阶段：基数排序*/</span><br><span class="hljs-comment">//m是桶的上限，也就是ascii码中最大的编号</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[i]=s[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[i]]]=i;<br></code></pre></td></tr></table></figure><p>接下来就到了倍增的环节。大家可能认为，每一次倍增就要进行基数排序两次（双关键字），其实不然。我们对第二关键字的排序结果是可以直接通过在初始化时的<code>sa[]</code>数组直接算出的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;=n;k*=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//倍增的开头，k就是长度</span><br>    num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//y[i]:记录第二关键字排序之后排第i位的对应x[]数组的下标是谁（有点拗口）</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n-k;i&lt;n;i++)y[num++] = i;<br>    <span class="hljs-comment">//通过前几幅图的观察得知，数组中后k个数的y值都是0，肯定最小，所以排名肯定最高</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)y[num++] = sa[i]-k;<br>    <span class="hljs-comment">//sa[i]&lt;k的，不可能成为一个第二关键词。在之后-k，是因为对应x[]数组</span><br></code></pre></td></tr></table></figure><p>接下来，对第一关键字的基数排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=m;i++)b[i] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[y[i]]]++;<br><span class="hljs-comment">//因为y[]指向的是x[]下标，它就顺理成章地成为了这次基数排序时x的下标,整个基数排序的过程相当于把i换成了y[i]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[y[i]]]]=y[i],y[i]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//y[i]=0可以顺便对y[]进行初始化</span><br></code></pre></td></tr></table></figure><p>那么是不是排完一遍序，倍增的一个循环就结束了呢？当然不是。因为我们并没有更新<code>x[]</code>的值（<code>y[]</code>的值已经提前求出），所以，接下来就可以利用更新完的<code>sa[]</code>来更新<code>x[]</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">swap</span>(x,y);<span class="hljs-comment">//这里看似是交换，其实是利用已经初始化的y[]来建一个原有x[]的副本</span><br>num = <span class="hljs-number">0</span>;<span class="hljs-comment">//归零</span><br>x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<span class="hljs-comment">//排第一的人的排名是第一（废话）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;n;i++)x[sa[i]] = (y[sa[i]]==y[sa[i<span class="hljs-number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="hljs-number">-1</span>]+k])?num:++num;<br><span class="hljs-comment">//上面的for:如果他们的第一关键字和第二关键字都和上一名相同，他们本质上是同一排名。如果不相同，那么排名++</span><br><span class="hljs-keyword">if</span>(num==n)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//num=n代表整个x数组内没有一个相同的排名，说明倍增可以停止了</span><br>m=num;<span class="hljs-comment">//同时，整个数组的最大值就是num，不可能有更大的桶存在</span><br></code></pre></td></tr></table></figure><p>好的！这就是求后缀数组的全部代码！接着，带上你的完整代码，去AC <a href="https://www.luogu.com.cn/problem/P3809">P3809</a>吧！（注意数组范围，注意卡常）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> s[<span class="hljs-number">10001000</span>];<br><span class="hljs-comment">//在定义数组的时候，有一个小细节，这里的y[]必须开两倍大小</span><br><span class="hljs-type">int</span> b[<span class="hljs-number">7501000</span>],x[<span class="hljs-number">7501000</span>],y[<span class="hljs-number">7501000</span>],sa[<span class="hljs-number">7501000</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[i]=s[i]]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[i]]]=i;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;n;k*=<span class="hljs-number">2</span>)&#123;<br>        num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n-k;i&lt;n;i++)y[num++] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)y[num++] = sa[i]-k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=m;i++)b[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[y[i]]]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[y[i]]]]=y[i],y[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">swap</span>(x,y);<br>        num = <span class="hljs-number">0</span>;<br>        x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;n;i++)x[sa[i]] = (y[sa[i]]==y[sa[i<span class="hljs-number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="hljs-number">-1</span>]+k])?num:++num;<br>        <span class="hljs-keyword">if</span>(num==n)<span class="hljs-keyword">break</span>;<br>        m=num;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">gets</span>(s);<br>    n = <span class="hljs-built_in">strlen</span>(s);<br>m = <span class="hljs-number">128</span>;<br><span class="hljs-built_in">SA</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,sa[i]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sa[n<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了倍增算法，还有一种奇特的DC3算法，写起来很复杂，也快不了多少，个人认为OIer只要学倍增算法就够了。</p><h2 id="后缀数组的应用">后缀数组的应用</h2><p>既然我们已经生成了后缀数组，那么它到底可以用来干什么呢？它可以用来做哪些题目呢？</p><h3 id="LCP">LCP</h3><p><strong>所谓LCP，就是Longest Common Prefix,最长公共前缀。</strong>~~话说叫LC的怎么那么多：LCT,LCA,LCM,LCP…~~比如说：字符串<code>abbaa</code>与<code>abaab</code>的lcp就是2.因为他们的前两个字符相同。之后的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>函数中的i与j，表示的是它们在后缀数组<code>sa[]</code>中的的下标，这也是为什么我们刚才要求后缀数组的原因。</p><p>通过求<code>sa[]</code>,我们可以求出它们两两之间的LCP，从而解决各种问题。那么这个LCP该如何求呢？</p><p>对此，我们可以证明几个小定理。（不需要可以跳过）：</p><h4 id="显然的">显然的</h4><p>LCP交换律：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,j)=LCP(j,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span><br>自己跟自己的lcp：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>−</mo><mi>s</mi><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">LCP(i,i)=len(i)=n-sa_i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>通过上述两条，我们继续推出：</p><p>（篇幅有限，对两条定理感兴趣的可以去<a href="https://xminh.github.io/2018/02/27/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%9C%80%E8%AF%A6%E7%BB%86">xminh的blog</a>阅读）</p><h4 id="LCP-Lemma">LCP Lemma</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,k) = min (LCP(i,j),LCP(j,k)) (i \le j \le k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span><br>这个可以很容易的用图示感性理解：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/em1bfhwc.png" alt=""></p><h4 id="LCP-Theorem">LCP Theorem</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,k)=min (LCP(j,j-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span></span> ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 &lt; i \leq j \leq k \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> )</p><h4 id="求出LCP的方法">求出LCP的方法</h4><p>知道了LCP Lemma和LCP Theorem了之后，其实是远远不够的。因为我们还是不知道求LCP的方法。如果使用暴力的话，那么求出所有lcp也需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，这比求SA数组还要慢得多。所以不能这样，对此可以进行一些优化。</p><p>我们求LCP，其实并不需要求一个二位数组，而是使用一个数组<code>height[]</code>，来表示在<code>sa[]</code>中，相邻两个后缀的LCP。同时再建一个数组<code>h[]</code>作为辅助，<code>h[i] = height[rk[i]]</code> （写代码时并不需要建立<code>h[]</code>）。通过建这个数组，我们可以推一个最为重要的定理： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。这个就有必要证明一下了。</p><p>我们在<code>sa[]</code>数组里面找一个后缀，设它在原字符串的下标为<code>i-1</code>。在<code>sa[]</code>中的前面一个后缀，它在原字符串的下标为<code>k</code>。现在，把它们两个后缀的首字母都砍掉，它们就变成了<code>i</code>和<code>k+1</code>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g4aqb00f.png" alt=""></p><p>这张图我们也可以看出，当两者的首字母相同时，删除首字母后排名先后肯定也是不变的。而且，它们的LCP长度为<code>h[i-1]-1</code>。而根据LCP Theorem，我们可以知道，这个LCP长度是这个区间中最小的，因此 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>那么当两者首字母不同呢？那就更简单了，首字母不同，它们的LCP一定是0，不可能有比他更小的了。综上所述，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p><p>应用这个定理，可以排除很多情况，直接将复杂度降到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>接下来就是代码的实现问题了，直接上代码吧！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">height</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-comment">//k可以看做当前的h[i-1]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i) rk[sa[i]]=i;<span class="hljs-comment">//这个在文章的开头就提到过</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)  <br>    &#123;<br>        <span class="hljs-keyword">if</span> (rk[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//height[0]肯定为0</span><br>        <span class="hljs-keyword">if</span> (k) k--;<span class="hljs-comment">//h[i] &gt;= h[i-1]-1,所以直接从h[i-1]-1开始枚举</span><br>        <span class="hljs-type">int</span> j=sa[rk[i]<span class="hljs-number">-1</span>];<span class="hljs-comment">//j是i相邻的一个后缀，求height</span><br>        <span class="hljs-keyword">while</span> (j+k&lt;=n &amp;&amp; i+k&lt;=n &amp;&amp; s[i+k]==s[j+k]) k++;<span class="hljs-comment">//枚举它们的LCP</span><br>        ht[rk[i]]=k;<span class="hljs-comment">//k就是LCP的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们求出了height数组！那么如何利用height，来求LCP呢？</p><p>根据LCP Theorem，我们知道，这可以转化为一个<strong>RMQ</strong>问题，使用<strong>st表</strong>(Sparse-Table，稀疏表)来解决这个问题。感兴趣的可以移步关于st表的博客。</p><h3 id="例题">例题</h3><p>学会了如何写一个后缀数组以及LCP之后，我们就可以利用它们做几道题了。</p><h4 id="P2408-不同子串个数">P2408 <a href="https://www.luogu.com.cn/problem/P2408">不同子串个数</a></h4><blockquote><p>给你一个长为N的字符串，求不同的子串的个数。</p></blockquote><p>这道可以说是一道SA最简单的裸题了。<s>算法标签里面没标sa</s>一般我们找不同子串，都是按照长度枚举之后暴力去重。但是我们运用后缀数组，就可以实现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>去重。</p><p>具体是这样的：我们知道，对于每一个后缀，它都能产生自身长度个前缀。而<strong>所有后缀的所有前缀</strong>，其实就是这个字符串的所有子串。然后怎么去重呢？这就要使用<code>height[]</code>数组了。我们知道，相邻两个后缀的LCP大小，其实就是这两个后缀的子串中，有几个是重复的。因此我们只要把所有子串的个数，减去<code>height[]</code>数组的每一项，就可以了。</p><p>而且，所有子串的个数，我们还可以使用公式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">T_i = \frac{n(n+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>来<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>求得，那就更方便了！</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*抄是过不了的，要看清本题数据范围*/</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        ans-=ht[i];<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br></code></pre></td></tr></table></figure><h4 id="UVA11107Life-Forms">UVA11107<a href="https://www.luogu.com.cn/problem/UVA11107">Life Forms</a></h4><blockquote><p>给n个字符串，求长度最大字符串，要求在超过一半的字符串中出现。</p></blockquote><p>这道题有很多的解法，先介绍一下在蓝书里面的后缀数组解法。</p><p>首先把所有字符串拼起来。将这个大字符串求后缀数组和<code>height[]</code>。然后，我们可以进行二分答案来判定这个“长度最大字符串”的长度<code>l</code>。每当碰到一个<code>height[]</code>中的元素小于这个所判定的长度，就给它分段。如图所示。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7ajzp9nc.png" alt=""></p><p>（绿色横线表示分段）</p><p>如果说都一段中，有超过n/2个原串，那么说明这个长度<code>l</code>是合法的。</p><p>但是万一有两个不同原串拼在一起变成了一个新串导致lcp错误怎么办？没有关系。我们可以在每两个原串中，放一个从来没有出现过的字符，这样子就能使两个不同原串强制分段，lcp=0.比如说有3个串：<code>abcd</code>,<code>acbd</code>,<code>cdba</code>，我们这样子拼起来：<code>abcd-acbd_cdbaJ</code>（最后一个字符也要加）。</p><h2 id="结语">结语</h2><p>好了，这就是关于后缀数组的全部内容了，可以在评论区留言。后缀数组的功能远不止这些，我也只是挑了2道较易理解的题。希望对大家有所帮助~祝大家在OI之路上顺利，各个吊打我！/cy</p><blockquote><p>本文写于2020年。然而现在的我已经完全不会后缀数组了，令人感叹。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>算法</tag>
      
      <tag>后缀数组</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
