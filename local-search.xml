<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>闪回 蝉鸣 再不会回来的你</title>
    <link href="/2024/01/03/%E5%86%8D%E4%B8%8D%E4%BC%9A%E5%9B%9E%E6%9D%A5%E7%9A%84%E4%BD%A0/"/>
    <url>/2024/01/03/%E5%86%8D%E4%B8%8D%E4%BC%9A%E5%9B%9E%E6%9D%A5%E7%9A%84%E4%BD%A0/</url>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1334077117&auto=1&height=66"></iframe><p><strong>刚遇见X的时候，我也只还是个小孩子。</strong></p><p>毕业，告别，来到新城市上学。新的学校，新的城市，新的人。一切都是那么的陌生而让人恐惧。话虽这么说，但当初我自己的嚣张和开朗还是能做到让现在的我十分吃惊的程度 <em>（换做现在的我，就算是真的表现还可以也会挺低调的罢可能）</em> 。有什么知道的就说，展示自己所会的东西，但其实充其量就是个幼稚鬼。</p><p>那是的我是一个十分矛盾的人，一边会因为身边全是比我强几倍的人而心生恐惧，另一边又会非常激动地炫耀自己所会的东西。可能是我对以前的自己恨之入骨罢，所以一想到那时，就会抽自己几个巴掌。</p><p>我兴奋地操弄教室的一体机，也就是这个时候碰见的X。</p><p>最开始，我也仅仅是把X当作计算机方面的同好，我经常说一些对计算机的浅薄看法，而X真的会对此做一些具体的分析，而这里面则不可避免地掺杂着若干我听不懂的名词。</p><p>X是一个无法被当时幼稚的我所理解的一个“奇怪”的人。好像不喜欢做一般12岁孩子爱做的任何事情。我喜欢凑热闹，而X一点也不喜欢凑热闹。我喜欢宣扬一些网络烂梗，而X虽然对此了解，但是也不会像我一样当一个复读机。在人际交流之间完全没有什么顾虑的13岁，我跟不太熟的人线上聊天也会轻松发一句“在吗”，而X则喜欢以“你好”开头；那时的我们可能只要聊得来，或者说过几句话就能以“朋友”相称，可是X从来也没有说过某人是“朋友”。</p><p>我在暑假时略微学过一点点python，而X前端的水平却已经不是一星半点了。X在当时已经可以使用前端去写音乐播放器，2048等，而我的python水平只能对着命令行傻乐。不过，13岁的我，总有挺多新奇的想法呢。令我印象深刻的，比如说用另一种特殊的方式去写中文，或者是创造一门新的编程语言之类的。由于学识有限，但是创造的东西也只能用幼稚来形容，但是X在想这些的时候，可能真的很快乐吧。</p><p>仔细想来，X也真的在很多方面影响了我呢。</p><p>“我的天哪，你真的好强。”有的时候我会不自禁地对X发出赞叹。</p><p><strong>“我是废物。”</strong> 我第一次听到这句话的时候是真被吓了一跳。X与一般人的谦虚不同，别人的谦虚可能只是为了低调，为了不让自己骄傲的举措，然而本人还是自信的。但是X在描述自己的时候，是真的会给人一种非常自卑，对自己心生怨恨，想要骂死自己的感觉。</p><p>为什么我这么清楚？大概是因为我也受到了影响吧。 <strong>写这段的时候就像在写我自己一样。</strong> 在X的影响与现实的打击下，我也成为了一个非常自卑，对自己心生怨恨的人。在描述自己的时候，也是恨不得骂死自己。连走路也开始跟X一样低着头弯着腰，好像不想见到任何人。</p><hr><p><strong>OI给了我和X一个更大的共同话题。</strong></p><p>不知什么时候开始，我和X开始不约而同地学起了C++。在我还完全不懂X所讲的什么<code>Vue.js</code>,<code>Grid</code>之类的东西为何物时，至少C++给了我们一个差不多同等的平台吧。大概在语法起步的时候，他带我找到了我们学校负责OI的一个老师，还带我去找了隔壁班的S。我们一起注册了洛谷账号，OI的旅程也就从这里开始了。</p><p>我不会学习。与之相反，X是一个天才。在做题数量差不多的情况下，X可以赛时完成一大部分题目拿高分，而弱小的我不说去能达到X的高度，只要争取不爆零已经是一种奢望。每次想到与X相比的事，就会让我心理感到不平衡想退役。 <strong>所以，我也只是一直望着X的背影越走越远，直到我再也看不见，也捉摸不透……</strong></p><p>在语文课的自由阅读时间一起看《C++ Primer》被发现，整一些莫名其妙的接龙，在社团里出一些有意思的题目，OI确实比我想象的要有趣的多呢…这也可能是我中学时期，唯一一件可以让我感到“学习很快乐”的事情。</p><p>然而，就算学习过程中有着鲜花，也掩盖不住这段路程的艰难呢。我所获得的，远比我所希望的要少。初一刚起步，初二NOIP初赛就被打爆，初三，NOIP又莫名其妙的被取消，取而代之的是一个叫做CSP的“有实无名”的比赛。 <em>“初三不拿普及一等奖，以后也别想了。”</em> 我这么想着。</p><p>初赛正常地通过，接下来就是最重要的复赛了呢。那几个月里，我不管午休，以最快的速度做完作业，然后立马用晚课的剩下时间冲去机房开始做题。虽然说作业写得十分快，但是好像质量也还不错。那段时间，可能是我初中学习最认真的时候了。此时的我，已经不记得跟老师打过多少次的晚课申请，也不记得重新打过多少次模板，虽然我很不想说，但是可能“紧张而充实”真的是那时候的最佳写照吧。</p><p>时间一天天流过，终于到了前往南京的日子呢。南航的键盘果然用起来很舒服。晚上，比赛结束，走上归程，当时我们也只是有说有笑， <strong>我也根本没有想到，可能快乐会就这样画上句号，我更没有想到，之后会走上那样的结局。</strong></p><p>“你考了多少？”几天之后，我问X。<br>“我估分265，要是到了我就女装。”X说。<br>“好巧，我也估分265，到了我也女装。”我笑着回答。</p><p>结果出来了，我因为忘记骗分的原因拿了255，而X幸运地正好265分。X要女装了，不过我们都完成了应有的使命——拿到普及一等奖。根据条约，X不负众望地，在寒假用灵梦的cos服女装了。 <em>我很开心，不知道X又是以什么心情去面对这件事的呢…</em></p><hr><p><strong>写到这里，曾经的快乐时光一起向我涌来，内心五味杂陈。</strong></p><p>寒假。</p><p>“你穿成这样，真的不冷吗？？”我惊讶地看着X，在寒冷的冬天，最外面的一层却只是一件一点也不厚的长袖校服。</p><p>“确实不冷。”X的父亲说，不穿羽绒服就别想出门了，然而就这样X也只是拿着羽绒服，并没有穿。“你也太nb了。”我笑着说。</p><p>“这杯可乐你要吗？送你了。”在一家麦当劳里，我对X说。跟不喜欢喝可乐的我相比，X好像很喜欢喝可乐。这样吃麦当劳的时候倒也正合适。“谢谢。”X回答。不知道为什么，这句话从X口中说出，好像确实对我来说有点陌生。</p><p>“你真的好像一只猫啊，哦不对，你就是猫。”我说道。“晚上不睡觉，抗寒能力强，而且还会编程。”我不知怎么的，就莫名其妙的把“猫”和“编程”这两个事情联系了起来。“哦对，Github图标的那只猫肯定就是你！”我恍然大悟地说道。</p><p>“不。”X回答。这是一句经典且简单的反驳，很有X的风格。</p><p>“按照你以前说的你家的地方，你乘地铁不应该跟我一个方向吗，为什么总跟我反向乘地铁？”我很疑惑，“哦我知道了，你有一个房子，但是有两个地址。”我说道。这种不合逻辑的荒诞的话，可能我也只会跟X说了。因为只有跟X说才能get到这种风格话的笑点。</p><p>“对。”X笑了，我也笑了。</p><p>说起来，确实很巧呢。X是出了名的不睡觉，我也是出了名的不吃饭。X很喜欢把一些看不清的东西乱读来整笑点，我也喜欢空耳别人的话变成来整笑点。不知道是我向来如此，还是一定程度上受了影响呢。</p><p>初三的最后一次秋游。</p><p>一共就没多大地地方，可整个上午我好像没有见到一个人，只是跟X在漫无目的地走着。而没有我，X早就不想秋游，而是在平板上玩自己的Arcaea了。“你不能这样，你跟班主任报备说自己不玩手机游戏，结果就在这玩平板了，跟我去看小猪跳水。”</p><p>就这样兜兜转转，聊了什么我早已忘记，一个上午也就这样过去。与大部队会合之后，他们都对我什么项目都没去而感到吃惊，而这之后，我也去玩了项目而不去管X在干什么。那时候的X，究竟在做什么呢……</p><p>初中的时候班级办过很多活动，而在我印象里有很多很多的活动我都是和X一起度过的。就连班主任也评价道：“有着相同的兴趣，就算性格不同也能关系很好呢。”是不是只有兴趣相同这么简单呢？我也不知道。</p><p>“我的有些话，难道会去跟其他那些人去交流吗？肯定是找你吧。”残存的记忆中，好像X确实是对我说过这么一段话。</p><p><strong>春风刮起，天气逐渐温暖，可我的心却从未这么寒冷过。</strong></p><p>“你要退役了？”我惊讶地说。</p><p>“啊对。”</p><p>“不是，为啥？你这么强，而且还刚拿了一等奖，拿完奖还写了一长篇文章来描述你的心路历程，怎么现在又说要退役了？”</p><p>“是这样的。”X笑了笑，说，“我感觉我现在想要研究一个叫⌈编程语言基础⌋的东西。而且将来我也肯定不会走高考路线的，我要去国际班。”</p><p>“啊啊…好吧，恭喜你。”我也不知道应该说什么了。是啊，不一直是这么一个有主见的人吗，我想着。一直让人猜不透。而且，X的能力也过于强，导致我无论在哪里，也都只能望着背影，深深感到自己的弱小。我大抵是会走高考路线，也不会放弃OI的吧，毕竟我也想有一个能和X并肩的机会啊。</p><p><em>不过现在回想起来，我高中的OI不能说学的很少吧，也真的是约等于没学了。这其中，学校的压力，学习的压力，可能只占一小部分。可能最大的原因，只是，我失去了向前的动力罢。</em></p><p><strong>终于还是要再见了，如果能是一场体面的告别该有多好，可惜…</strong></p><p>X的情绪不稳定确实也不是一天两天了（当然我也没什么资格说别人情绪不稳定）。在有几个学期的期末，我会被不知道为什么的冷言以对。那种感觉说实话有点让人恐惧，我也不明白自己做错了什么。但是与其他时候不同，这次X没有对我冷淡，跟我保持着良好的关系的同时，好像对其它的事情充满了愤怒。</p><p>大概是那次换座位开始的吧。本来是在正常不过的两周一次换座位，班级换座位的效率却异常之低。X一怒之下，拿起自己的笔，朝自己的后颈戳去……</p><p>我愣住了。到底发生了什么？我也就这样子恍惚着，终于到了晚课下课。</p><p>“我感觉，这些负面情绪的来源全都在于这个班级。离开这个班，很多问题都会解决的，我只要在等几个月就好了。”X对我说。</p><p>“为什么？”</p><p>“这个班里面有了太多我看不惯的人，或者说，他们的思想水平都很低。”</p><p>大概X的确是有资格说出这句话的吧。大概在初中的这段时间，X一直给我科普各种各样的事情，有网上的，有现实的。从X在网上发言的语气以及思想深度来看，确实已经比同年龄段的人要高出太多了。我在高中时时常不停感叹：“我在主动接受这些信息的时候要在高中，而X已经走在我前面三年了。”也多亏了X，让我能在初中时期，能有如此之大的媒介素养的提升。</p><p>“你不能这样，你得有一颗包容的心。不能因为怎么怎么就看不惯别人啊。”我这么对X说。</p><p>X回复了什么，说实话我确实已经忘记了。但是我忘不掉X持续了几个月的，红的有点发黑的后颈。</p><p>短短的一个学期，X似乎干了很多次这种事情。但是每一次事情发生后，我都会去问发生了什么。说实话，我能讲的大道理也就这么多，X也真的快让我词穷了。X会先肯定我说的话，但是之后却还是那么干。我也才知道，我以为我很了解X，其实我一无所知罢了。</p><p>中考的压力压得我喘不过气来，然而我还是时不时的在为X担心着。有一天，X又找到我。“你说的很对，我看来是一个严重的反社会人格。”然后笑着，拿出了一张满是血迹的餐巾纸。我很心痛，但是更多的却又是愤怒。因为我无论怎么去劝说X，得到的还是这样的结局，还是在不断地自残。</p><p>“你知道吗，现在我很想揍你。”以前X有时会这么对我说，但今天却是我说出来的。</p><p>“但我知道，你不会这么做的。” <strong>现在看来，X说出这句话完全是处于对我的信任吧。但我却完全会错了意。</strong> 当时的我甚至以为X在挑战我的底线。</p><p><strong>“我感觉你从来没把我说的话当一回事，那这样吧，我以后不会再跟你说任何一句话了。”</strong></p><p>我和X的关系就这样莫名其妙地结束了。结束的很突然，最令我感到痛苦的是，居然是由我以一个莫名其妙的原因亲手结束掉的。之后的几天，我无法理解我到底为什么要这么做。跟一个人绝交，竟然是因为对这人太关心？太荒谬了。但是事实却就是这样也已经无法挽回了。</p><p>我曾经以为，我的朋友很多，而X只是一个连朋友都称不上的人。但是我错了，在最后的几天里，我总是不知道为什么自己一个人低着头走出教室，看看X在哪里，甚至希望能重新回来找我。但是……明明是我说的不再跟别人说话，却希望着别人重新回来找我，我也真是有够蠢的。我也不知道X到底发生了什么会这样。也许我知道了之后，就不会这么做了吧。可能，我确实低估了X在我心中的地位吧。</p><p>夏天到了呢。我还是跟往常一样，确实有时会萌生一些有趣的想法，但我已经不知道，能跟谁说了。</p><p>中考时，蝉在外面鸣叫，大雨倾盆而下。我因为午休的时候打呼噜被人嘲讽，不想再回宿舍午休。而X也没有去宿舍。</p><p>教室里又只剩下了我跟X两个人。</p><p>教室里真安静啊，除了外面的雨声什么也听不到。</p><p>想去跟X说些什么，最后还是什么也没敢说。就在两个人一言不发的情况下，中午结束了，初中生涯也马上要画上句号。我想，我和X可能以后也再不会相见了吧。</p><p>此时的我怎么还会去乞求别人的原谅呢？我连自己都原谅不了自己。X就算到了现在一直恨着我的话，我想也是理所当然的。</p><p>我很不喜欢用“后悔”的字眼，因为我觉得一切都是命中注定，唯独这件事情，我可能真的会后悔一辈子吧。</p><blockquote><p>是啊 你是朋友 握住我的手吧<br>是啊 你是一个人的 没什么能呆的地方吧<br>不断反复的<br>闪回 蝉鸣 再不会回来的你<br>永远破碎掉的 两人同一款的钥匙圈<br>夏日已然消去 只想对洁白肌肤的少女<br>近乎悲伤般 着迷起来<br>——《少女レイ》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/28/hello-world/"/>
    <url>/2023/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<blockquote><p>official example of hexo</p></blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>悲惨的经历——蒟蒻的博客搭建故事</title>
    <link href="/2023/11/30/bloglog/"/>
    <url>/2023/11/30/bloglog/</url>
    
    <content type="html"><![CDATA[<h2 id="记录一下搭建服务器以及创建博客的历程">记录一下搭建服务器以及创建博客的历程</h2><blockquote><p>写在前面</p><p>其实是这几天摆烂太久了，又加上发烧，使得我突然又重新想去做点什么事情来把我的想法记录下来，于是就觉得搭个博客是必要的<br>~~话说我需要一直记录自己的过去，是因为已经老了吗（笑）~~但是不可避免地，在时候几天肯定会在这个上面出现很多很多问题，于是就想着把这个记下来好了</p></blockquote><h3 id="day1：23-11-30">day1：23.11.30</h3><p>搞了个腾讯云账号，已经不知道怎么办了，现在想办法整到最便宜的办法吧</p><h3 id="day2-23-12-1">day2: 23.12.1</h3><p>花了一百多块钱，买了个一年的服务器，哎呀我心疼的要死，之前确实还没有在网上花过钱，感觉心在滴血好吧…<br>这样的话不得不好好维护一下这个新博客了。</p><p>之后又花了35块钱买了个貌似是比较便宜的域名，还要实名认证啥的，反正挺麻烦的。算了，我这钱都出了总不能白出吧，大不了每个月少吃一顿麦当劳好了。</p><p>后面是真难搞，做了一系列心理准备，干脆把系统重装了得了（指服务器系统）</p><p>经过了一系列的莫名其妙瞎折腾，我居然已经把wordpress给安装完成了，但是很可怕的一点是，我宝塔的用户名和密码忘了，但愿之后不要伏笔回收（</p><h3 id="day3-23-12-2">day3: 23.12.2</h3><p>出人意料的是，在整个网页的制作当中，考验代码能力的阶段几乎是没有的，大概也只是因为我根本不会前端罢。下了个<em>Hestia</em>主题，就差不多可以进行一系列页面的编辑啊啥的了，总的来说还挺顺利。（说实话，在搞wordpress之前， 我真的一直以为别人的博客是完全自己做了个网页上去）</p><p>那现在也差不多这个空间也算是完成了 可能这个文章也算完结了罢（</p><h3 id="dayn-23-12-24">dayn: 23.12.24</h3><p>就是说突然发现博客不能用了（笑）。原因是我没有进行备案。</p><p>但是有一说一，那个备案的过程也真是有够哈人的，啥信息都要上交过去，万一有啥问题，我可遭不住。</p><p>想来想去，还是决定放弃掉原来的那个地方，而在github上面重新搞。</p><p>看到别人说什么，在github上部署wordpress要下载mamp之类的，我也没想着是怎么一回事反正就下了，最后还是竹篮打水一场空，可见不动脑子的下场。</p><h3 id="day-n-x-23-12-28">day n+x 23.12.28</h3><p>在搞了不知道有几天，终于是把hexo的框架重新搞定了。现在写文章应该是不会遇到什么问题，而且心中更加安全了（没想到最开始买的那个服务器没起到应尽的责任，算了，就让它跑跑服务好了。。。</p><h3 id="搭建博客的过程总算是结束了。其中的过程真的是有够艰难的了，可能是我脑子不够的原因吧，能让本来还比较简单的事情搞得那么复杂…">搭建博客的过程总算是结束了。其中的过程真的是有够艰难的了，可能是我脑子不够的原因吧，能让本来还比较简单的事情搞得那么复杂…</h3>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>服务器</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【洛谷日报】浅谈后缀数组算法</title>
    <link href="/2020/02/24/%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/"/>
    <url>/2020/02/24/%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>浅谈后缀数组算法</h1><blockquote><p>后缀数组(suffix array)是一个通过对字符串的所有后缀经过排序后得到的数组。<br>后缀数组同时也是后缀树的一个替代品，它比后缀树更好写，所以OIers通常会使用后缀数组，而非后缀树。</p></blockquote><p>参考资料（转侵删）：</p><blockquote><p><a href="https://xminh.github.io/2018/02/27/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%9C%80%E8%AF%A6%E7%BB%86(maybe)%E8%AE%B2%E8%A7%A3.html">xminh的blog</a><br><a href="https://zh.wikipedia.org/zh-hans/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84">后缀数组-Wikipedia</a><br><a href="https://wenku.baidu.com/view/5b886b1ea76e58fafab00374.html">国家集训队2009论文</a><br><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F">基数排序-百度百科</a><br>《算法竞赛入门经典》刘汝佳</p></blockquote><h2 id="前言">前言</h2><p>最近看到了一些将后缀数组的文章，看上去写的不错，便对后缀数组这个算法心生兴趣，学了之后发现，他写起代码来还是对萌新有一些难度的（比如说我），所以我想把自己在学习的过程中遇到的一些困难记录下来，以免大家也在此环节纠缠不清。嫌我啰嗦的就挑代码看吧。</p><h2 id="一些约定-介绍">一些约定&amp;介绍</h2><p>所谓后缀数组，数组大家都知道，那啥是后缀嘞？</p><p>一个字符串S，它里面有很多个<strong>子串</strong>，所谓子串，也就是字符串以任意字符为开头，再在它后面的任意一个字符结尾的字符串。之后以<code>str[i,j](i&lt;=j)</code>来表示从S[i]~S[j]的字符串。</p><p>而<strong>后缀</strong>，则是子串里面特殊的一种，如果它的长度为<code>n</code>，下标以0位开头,那么<code>j=n-1</code>。z之后以<code>suf(i)</code>表示以<code>i</code>为开头的后缀</p><p><strong>后缀数组</strong>(<code>sa[]</code>)，就是处理这些后缀的排名。也就是说，如果把一个字符串里的所有后缀全都取出来(共n个)，再让他们以<strong>字典序排列</strong>，我们可以通过后缀数组来清楚地看到排第一、第二、第三……的后缀是从几开头的。</p><p>后缀数组，通常还会带有一个“附加产品”——<strong>名次数组</strong>(<code>rk[]</code>)，这个数组，可以让人知道从i开头的后缀，在所有后缀中能排第几。</p><p>如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/838huxxs.png" alt=""></p><p><em>简单来说，<code>sa[]</code>记录的是 <strong>“排第几的是谁”</strong>，而<code>rk[]</code>记录的是 <strong>“它排第几”</strong>。</em></p><p>同时，我们还能发现一个性质：<code>sa[rk[i]] = rk[sa[i]] = i</code>。</p><p>理解了后缀数组到底是什么之后，我们就可以学习后缀数组的求法。</p><h2 id="实现一个后缀数组">实现一个后缀数组</h2><p>怎么求后缀数组，可以说是本文最主要，最重要的部分。我们有很多种求法。</p><h3 id="O-n-2-log-n-做法"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 做法</h3><p>非常简单，就是最暴力的做法：把每个后缀当一个字符串，再将其扔进<code>sort()</code>里完事。<code>sort()</code>的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，再加上字符串大小比较的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>总共就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。这么暴力的东西谁都会写，当然也比正解要慢了许多。</p><h3 id="O-n-log-n-做法"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 做法</h3><p>一共有两种著名的求后缀数组的算法，我们先讲简单易学好理解的<strong>倍增</strong>算法。</p><h4 id="倍增算法">倍增算法</h4><p><s>好学归好学，关键难理解</s></p><p>刚才字符串暴力排序的复杂度之所以高，那是因为他直接<em>横向</em>地比较了每个字符串的大小，这样根本没有优化的空间和方法。但如果我们换个思路，纵向比较呢？</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/myq8g4q8.png" alt=""></p><p>有人要说：这样做不是跟刚才一样吗？</p><p>但是其实不是，首先，我们抛弃了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的排序比较，有更大的优化空间。第二，人是活的，我们可以将其稍加调整，不对其字符进行比较，而使用其字符所在的排名进行比较。如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qnya82mq.png" alt=""></p><p>每个字符串的第一个字符已经比较完毕，根据字典序比较的原则，接下来就应该比较第二个字符。当然，比较第二个字符的前提是第一个字符也要按照字典序排列。也就是说，我们形成了一个<strong>双关键字</strong>的排序。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1arqmdxz.png" alt=""></p><p>那接下来呢？比较第三个字符吗？并不是。倍增算法就体现在这里。我们会发现，其实应该将它们两两合并，变成4个关键字仍然不影响排序。但是，我们上一步已经两两合并了，也就是说，4个关键字，实质上只要管2个关键字，这就是<em>倍增</em>。接下来倍增为8，依然如此。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5vjgnace.png" alt=""></p><p><strong>那么我们什么时候可以停止倍增呢？</strong></p><p>要知道，如果像奥尔加团长一样不停下来的话，就会<strong>TLE</strong>，所以，当倍增数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的时候，就可以停了。（因为所有第二关键字都是0）并且，如图所示，如果<code>sa[]</code>数组没有任何数字是相同的话，也可以提前停止。（因为第一关键字不出现相等的情况）。</p><p>不过，排序是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的，倍增一共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 次，咋就<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>呐？</p><p>要知道，字符的排序，有一个特性：最大值较小。因为字符数量有限，考虑所有数字和字母，最大的’z’也不过一百多。再加上特殊的双关键字排序，我们完全可以不用快排，而改用<strong>基数排序</strong>。</p><h4 id="基数排序">基数排序</h4><p>基数排序就是把数据统统扔进桶里面的排序（<br>在执行基数排序的时候，我们要建一个数组，这个数组的没一个元素，就是所谓的“桶”。</p><p><em>例 ： 排序<code>(1,2)</code>,<code>(3,2)</code>,<code>(1,3)</code>，第一个数为第一关键字，第二个数为第一关键字。</em></p><ol><li><p>我们先按照<strong>第二关键字</strong>，一个一个把数据扔进桶里。</p><table><thead><tr><th></th><th>桶1</th><th>桶2</th><th>桶3</th></tr></thead><tbody><tr><td>无</td><td><code>(1,2)</code>,<code>(3,2)</code></td><td><code>(1,3)</code></td><td></td></tr></tbody></table></li><li><p>将桶里面的东西全抽出来，不改变在桶内的数据，然后再按<strong>第一关键字</strong>扔进桶里。<br>|        |  桶1   |       桶2       |    桶3 |<br>|  ----  | --------------- | ------ | ------ |<br>| <code>(1,2)</code>,<code>(1,3)</code>     | 无 | <code>(3,2)</code>|</p></li></ol><p>再将其抽出来后，就是一个排完序的数组啦~</p><p>这样排序的正确性在于：我们第一次排完序之后，实际上就已经保证了<strong>同一第一关键字，第二关键字的相对顺序正确</strong>。这样，我们只要保持原来相对顺序不变，只管第一关键字排序就行了。这也是第一次排序是按照第二关键字的原因。</p><p>那么，我们先看一下基数排序的代码（单关键字，双关键字本质上就是做它两遍）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//b数组：桶</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[s[i]]++;<br><span class="hljs-comment">//++表示将一个数据放入桶</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-comment">//通过求前缀和的方法，将每一个桶内的东西排上名次</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[s[i]]]=i;<br><span class="hljs-comment">//由于我们求得是sa[],所以b[s[i]]表示排名（刚才已经前缀和过了）而--的原因是为了消除并列的情况，i表示此后缀的标号。</span><br></code></pre></td></tr></table></figure><p>不难发现，使用基数排序后，排序的复杂度达到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。再加上倍增所用的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，总复杂度就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>思路都讲完了，接下来就上代码了。理解了思路不一定写的出代码，因为代码有很多细节需要考虑。</p><p>首先，是初始化的代码。初始化先使用基数排序，直接求出倍增之前的<code>sa[]</code>数组,顺便还能初始化一下<code>x[]</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*初始化阶段：基数排序*/</span><br><span class="hljs-comment">//m是桶的上限，也就是ascii码中最大的编号</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[i]=s[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[i]]]=i;<br></code></pre></td></tr></table></figure><p>接下来就到了倍增的环节。大家可能认为，每一次倍增就要进行基数排序两次（双关键字），其实不然。我们对第二关键字的排序结果是可以直接通过在初始化时的<code>sa[]</code>数组直接算出的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;=n;k*=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//倍增的开头，k就是长度</span><br>    num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//y[i]:记录第二关键字排序之后排第i位的对应x[]数组的下标是谁（有点拗口）</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n-k;i&lt;n;i++)y[num++] = i;<br>    <span class="hljs-comment">//通过前几幅图的观察得知，数组中后k个数的y值都是0，肯定最小，所以排名肯定最高</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)y[num++] = sa[i]-k;<br>    <span class="hljs-comment">//sa[i]&lt;k的，不可能成为一个第二关键词。在之后-k，是因为对应x[]数组</span><br></code></pre></td></tr></table></figure><p>接下来，对第一关键字的基数排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=m;i++)b[i] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[y[i]]]++;<br><span class="hljs-comment">//因为y[]指向的是x[]下标，它就顺理成章地成为了这次基数排序时x的下标,整个基数排序的过程相当于把i换成了y[i]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[y[i]]]]=y[i],y[i]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//y[i]=0可以顺便对y[]进行初始化</span><br></code></pre></td></tr></table></figure><p>那么是不是排完一遍序，倍增的一个循环就结束了呢？当然不是。因为我们并没有更新<code>x[]</code>的值（<code>y[]</code>的值已经提前求出），所以，接下来就可以利用更新完的<code>sa[]</code>来更新<code>x[]</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">swap</span>(x,y);<span class="hljs-comment">//这里看似是交换，其实是利用已经初始化的y[]来建一个原有x[]的副本</span><br>num = <span class="hljs-number">0</span>;<span class="hljs-comment">//归零</span><br>x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<span class="hljs-comment">//排第一的人的排名是第一（废话）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;n;i++)x[sa[i]] = (y[sa[i]]==y[sa[i<span class="hljs-number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="hljs-number">-1</span>]+k])?num:++num;<br><span class="hljs-comment">//上面的for:如果他们的第一关键字和第二关键字都和上一名相同，他们本质上是同一排名。如果不相同，那么排名++</span><br><span class="hljs-keyword">if</span>(num==n)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//num=n代表整个x数组内没有一个相同的排名，说明倍增可以停止了</span><br>m=num;<span class="hljs-comment">//同时，整个数组的最大值就是num，不可能有更大的桶存在</span><br></code></pre></td></tr></table></figure><p>好的！这就是求后缀数组的全部代码！接着，带上你的完整代码，去AC <a href="https://www.luogu.com.cn/problem/P3809">P3809</a>吧！（注意数组范围，注意卡常）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> s[<span class="hljs-number">10001000</span>];<br><span class="hljs-comment">//在定义数组的时候，有一个小细节，这里的y[]必须开两倍大小</span><br><span class="hljs-type">int</span> b[<span class="hljs-number">7501000</span>],x[<span class="hljs-number">7501000</span>],y[<span class="hljs-number">7501000</span>],sa[<span class="hljs-number">7501000</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[i]=s[i]]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[i]]]=i;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;n;k*=<span class="hljs-number">2</span>)&#123;<br>        num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n-k;i&lt;n;i++)y[num++] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)y[num++] = sa[i]-k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=m;i++)b[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[y[i]]]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[y[i]]]]=y[i],y[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">swap</span>(x,y);<br>        num = <span class="hljs-number">0</span>;<br>        x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;n;i++)x[sa[i]] = (y[sa[i]]==y[sa[i<span class="hljs-number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="hljs-number">-1</span>]+k])?num:++num;<br>        <span class="hljs-keyword">if</span>(num==n)<span class="hljs-keyword">break</span>;<br>        m=num;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">gets</span>(s);<br>    n = <span class="hljs-built_in">strlen</span>(s);<br>m = <span class="hljs-number">128</span>;<br><span class="hljs-built_in">SA</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,sa[i]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sa[n<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了倍增算法，还有一种奇特的DC3算法，写起来很复杂，也快不了多少，个人认为OIer只要学倍增算法就够了。</p><h2 id="后缀数组的应用">后缀数组的应用</h2><p>既然我们已经生成了后缀数组，那么它到底可以用来干什么呢？它可以用来做哪些题目呢？</p><h3 id="LCP">LCP</h3><p><strong>所谓LCP，就是Longest Common Prefix,最长公共前缀。</strong>~~话说叫LC的怎么那么多：LCT,LCA,LCM,LCP…~~比如说：字符串<code>abbaa</code>与<code>abaab</code>的lcp就是2.因为他们的前两个字符相同。之后的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>函数中的i与j，表示的是它们在后缀数组<code>sa[]</code>中的的下标，这也是为什么我们刚才要求后缀数组的原因。</p><p>通过求<code>sa[]</code>,我们可以求出它们两两之间的LCP，从而解决各种问题。那么这个LCP该如何求呢？</p><p>对此，我们可以证明几个小定理。（不需要可以跳过）：</p><h4 id="显然的">显然的</h4><p>LCP交换律：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,j)=LCP(j,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span><br>自己跟自己的lcp：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>−</mo><mi>s</mi><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">LCP(i,i)=len(i)=n-sa_i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>通过上述两条，我们继续推出：</p><p>（篇幅有限，对两条定理感兴趣的可以去<a href="https://xminh.github.io/2018/02/27/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%9C%80%E8%AF%A6%E7%BB%86">xminh的blog</a>阅读）</p><h4 id="LCP-Lemma">LCP Lemma</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,k) = min (LCP(i,j),LCP(j,k)) (i \le j \le k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span><br>这个可以很容易的用图示感性理解：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/em1bfhwc.png" alt=""></p><h4 id="LCP-Theorem">LCP Theorem</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,k)=min (LCP(j,j-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span></span> ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 &lt; i \leq j \leq k \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> )</p><h4 id="求出LCP的方法">求出LCP的方法</h4><p>知道了LCP Lemma和LCP Theorem了之后，其实是远远不够的。因为我们还是不知道求LCP的方法。如果使用暴力的话，那么求出所有lcp也需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，这比求SA数组还要慢得多。所以不能这样，对此可以进行一些优化。</p><p>我们求LCP，其实并不需要求一个二位数组，而是使用一个数组<code>height[]</code>，来表示在<code>sa[]</code>中，相邻两个后缀的LCP。同时再建一个数组<code>h[]</code>作为辅助，<code>h[i] = height[rk[i]]</code> （写代码时并不需要建立<code>h[]</code>）。通过建这个数组，我们可以推一个最为重要的定理： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。这个就有必要证明一下了。</p><p>我们在<code>sa[]</code>数组里面找一个后缀，设它在原字符串的下标为<code>i-1</code>。在<code>sa[]</code>中的前面一个后缀，它在原字符串的下标为<code>k</code>。现在，把它们两个后缀的首字母都砍掉，它们就变成了<code>i</code>和<code>k+1</code>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g4aqb00f.png" alt=""></p><p>这张图我们也可以看出，当两者的首字母相同时，删除首字母后排名先后肯定也是不变的。而且，它们的LCP长度为<code>h[i-1]-1</code>。而根据LCP Theorem，我们可以知道，这个LCP长度是这个区间中最小的，因此 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>那么当两者首字母不同呢？那就更简单了，首字母不同，它们的LCP一定是0，不可能有比他更小的了。综上所述，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p><p>应用这个定理，可以排除很多情况，直接将复杂度降到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>接下来就是代码的实现问题了，直接上代码吧！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">height</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-comment">//k可以看做当前的h[i-1]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i) rk[sa[i]]=i;<span class="hljs-comment">//这个在文章的开头就提到过</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)  <br>    &#123;<br>        <span class="hljs-keyword">if</span> (rk[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//height[0]肯定为0</span><br>        <span class="hljs-keyword">if</span> (k) k--;<span class="hljs-comment">//h[i] &gt;= h[i-1]-1,所以直接从h[i-1]-1开始枚举</span><br>        <span class="hljs-type">int</span> j=sa[rk[i]<span class="hljs-number">-1</span>];<span class="hljs-comment">//j是i相邻的一个后缀，求height</span><br>        <span class="hljs-keyword">while</span> (j+k&lt;=n &amp;&amp; i+k&lt;=n &amp;&amp; s[i+k]==s[j+k]) k++;<span class="hljs-comment">//枚举它们的LCP</span><br>        ht[rk[i]]=k;<span class="hljs-comment">//k就是LCP的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们求出了height数组！那么如何利用height，来求LCP呢？</p><p>根据LCP Theorem，我们知道，这可以转化为一个<strong>RMQ</strong>问题，使用<strong>st表</strong>(Sparse-Table，稀疏表)来解决这个问题。感兴趣的可以移步关于st表的博客。</p><h3 id="例题">例题</h3><p>学会了如何写一个后缀数组以及LCP之后，我们就可以利用它们做几道题了。</p><h4 id="P2408-不同子串个数">P2408 <a href="https://www.luogu.com.cn/problem/P2408">不同子串个数</a></h4><blockquote><p>给你一个长为N的字符串，求不同的子串的个数。</p></blockquote><p>这道可以说是一道SA最简单的裸题了。<s>算法标签里面没标sa</s>一般我们找不同子串，都是按照长度枚举之后暴力去重。但是我们运用后缀数组，就可以实现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>去重。</p><p>具体是这样的：我们知道，对于每一个后缀，它都能产生自身长度个前缀。而<strong>所有后缀的所有前缀</strong>，其实就是这个字符串的所有子串。然后怎么去重呢？这就要使用<code>height[]</code>数组了。我们知道，相邻两个后缀的LCP大小，其实就是这两个后缀的子串中，有几个是重复的。因此我们只要把所有子串的个数，减去<code>height[]</code>数组的每一项，就可以了。</p><p>而且，所有子串的个数，我们还可以使用公式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">T_i = \frac{n(n+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>来<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>求得，那就更方便了！</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*抄是过不了的，要看清本题数据范围*/</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        ans-=ht[i];<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br></code></pre></td></tr></table></figure><h4 id="UVA11107Life-Forms">UVA11107<a href="https://www.luogu.com.cn/problem/UVA11107">Life Forms</a></h4><blockquote><p>给n个字符串，求长度最大字符串，要求在超过一半的字符串中出现。</p></blockquote><p>这道题有很多的解法，先介绍一下在蓝书里面的后缀数组解法。</p><p>首先把所有字符串拼起来。将这个大字符串求后缀数组和<code>height[]</code>。然后，我们可以进行二分答案来判定这个“长度最大字符串”的长度<code>l</code>。每当碰到一个<code>height[]</code>中的元素小于这个所判定的长度，就给它分段。如图所示。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7ajzp9nc.png" alt=""></p><p>（绿色横线表示分段）</p><p>如果说都一段中，有超过n/2个原串，那么说明这个长度<code>l</code>是合法的。</p><p>但是万一有两个不同原串拼在一起变成了一个新串导致lcp错误怎么办？没有关系。我们可以在每两个原串中，放一个从来没有出现过的字符，这样子就能使两个不同原串强制分段，lcp=0.比如说有3个串：<code>abcd</code>,<code>acbd</code>,<code>cdba</code>，我们这样子拼起来：<code>abcd-acbd_cdbaJ</code>（最后一个字符也要加）。</p><h2 id="结语">结语</h2><p>好了，这就是关于后缀数组的全部内容了，可以在评论区留言。后缀数组的功能远不止这些，我也只是挑了2道较易理解的题。希望对大家有所帮助~祝大家在OI之路上顺利，各个吊打我！/cy</p><blockquote><p>本文写于2020年。然而现在的我已经完全不会后缀数组了，令人感叹。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>后缀数组</tag>
      
      <tag>教程</tag>
      
      <tag>OI</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
