<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【转载】Boost.Asio C++网络编程</title>
    <link href="/2025/09/25/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Boost.Asio%20C++%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/09/25/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Boost.Asio%20C++%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>因为原版的boost.asio网络编程中文版译本<a href="https://github.com/mmoaay/boost-asio-cpp-network-programming-in-chinese">https://github.com/mmoaay/boost-asio-cpp-network-programming-in-chinese</a><br>在gitbooks发生了一些错误，并且在github上的markdown也有些许的格式错误<br>故对其作部分修改并转到此页面，便于浏览。<br>在此感谢本书的原作者与翻译者做出的贡献，如有版权问题请联系，会及时删除。</p></blockquote><h1>实战出精华</h1><p><em>在具体的C++网络编程中提升你的逼格</em></p><p><em>John Torjo</em></p><hr><h4 id="Boost-Asio-C-网络编程">Boost.Asio C++ 网络编程</h4><p>Copyright © 2013 Packt Publishing</p><hr><h2 id="关于作者">关于作者</h2><p>做为权威的C++专家，除了偶尔用C#和Java写程序，<strong>John Torjo</strong>把他超过15年编程生涯中的大部分时间都贡献给了C++。</p><p>他也很喜欢在C++ Users Journal和其他杂志上写一些编程相关的文章。</p><p>闲暇的时候，他喜欢玩扑克、开快车。他有很多个自由职业，其中一个就把他的两个爱好结合在一起，一个是玩扑克，另外一个是编程。如果你想联系他，可以发邮件到<a href="john.code@torjo.com">john.code@torjo.com</a>。</p><hr><p>我要感谢我的朋友Alexandru Chis, Aurelian Hale, Bela Tibor Bartha, Cristian Fatu, Horia Uifaleanu, Nicolae Ghimbovschi以及Ovidiu Deac。感谢他们对本书提出的反馈和意见。同时我也要感谢Packt公司各位对我频繁错过截稿日期行为的包容。然后最需要感谢的是Chris Kohlhoff，Boost.Asio的作者，是他写出了如此伟大的库。</p><p>把这本书献给我最好的朋友Darius。</p><hr><h2 id="关于评审员">关于评审员</h2><p>Béla Tibor Bartha</p><p>一个使用过多种技术和语言进行开发的专业软件工程师。尽管在过去的4年里，他做的是iOS和OSX应用开发，但是C++陪伴他度过了早期个人游戏项目开发的激情岁月。</p><hr><p>我要感谢John，因为他我才能做这本书的评审</p><hr><p>Nicolae Ghimbovschi</p><p>一个参加各类C++项目超过5年的天才个人开发者。他主要参与一些企业通信工程的项目。作为一个狂热的Linux爱好者，他喜欢利用不同的操作系统、脚本工具和编程语言进行测试和实验。除了编程，他还喜欢骑自行车、瑜伽和冥想。</p><hr><p>我要感谢John让我来评审这本书</p><hr><h2 id="关于译者">关于译者</h2><p>非主流程序猿mmoaay，技术很烂，喜欢平面设计、鼠绘、交友、运动和翻译，但是确作为一只程序猿混迹在IT行业。热爱开源，技术烂就只好做做设计和翻译的工作。</p><p>微博：<a href="http://weibo.com/smmoaay">http://weibo.com/smmoaay</a></p><hr><h2 id="关于avplayer">关于avplayer</h2><p><a href="http://avplayer.org">http://avplayer.org</a> 中国第一技术社区。</p><hr><h2 id="目录">目录</h2><hr><p>前言</p><hr><p>第一章：Boost.Asio入门</p><pre><code class="hljs">什么是Boost.Asio？    历史    依赖    编译 Boost.Asio    重要的宏同步VS异步异常VS错误代码Boost.Asio中的多线程不仅仅是网络计时器io_service类总结</code></pre><hr><p>第二章：Boost.Asio基本原理</p><pre><code class="hljs">网络APIBoost.Asio命名空间IP地址端点Sockets    同步错误代码    Socket成员函数    其他注意事项read/write/connect自由函数    connect函数    read/write函数异步编程    为什么要异步？    异步run(),run_one(),poll(),poll_one()        持续运行        run_one(),poll(),poll_one()函数    异步工作    异步post() VS dispatch() VS wrap()保持运行总结</code></pre><hr><p>第三章：回显服务端/客户端</p><pre><code class="hljs">TCP回显服务端/客户端    TCP同步客户端    TCP同步服务端    TCP异步客户端    TCP同步服务端    代码UDP回显服务端/客户端    UDP同步回显客户端    UDP同步回显服务端总结</code></pre><hr><p>第四章：客户端和服务端</p><pre><code class="hljs">同步客户端/服务端    同步客户端    同步服务端异步客户端/服务端    异步客户端    异步服务端总结</code></pre><hr><p>第五章：同步VS异步</p><pre><code class="hljs">同步异步混合编程客户端和服务端之间消息的互相传递客户端软件中的同步I/O服务端软件中的同步I/O    同步服务端中的线程客户端软件中的异步I/O服务端软件中的异步I/O    异步服务端中的线程异步操作代理实现总结</code></pre><hr><p>第六章：Boost.Asio-其他特性</p><pre><code class="hljs">std streams和std buffer I/OBoost.Asio和STL流streambuf类处理streambuf对象的自由函数协程总结</code></pre><hr><p>第七章：Boost.Asio-进阶</p><pre><code class="hljs">Asio VS Boost.Asio调试    处理程序跟踪信息    例子    处理程序跟踪文件SSLBoost.Asio的Windows特性    流处理    随机存储处理    对象处理Boost.Asio的POSIX特性    本地sockects    连接本地sockets    POSIX文件描述符    Fork    总结</code></pre><hr><p>索引</p><hr><h2 id="前言">前言</h2><p>网络编程由来已久，并且是一个极富挑战性的任务。Boost.Asio对网络编程做了一个极好的抽象，从而保证只需要少量的编程就可以实现一个优雅的客户端/服务端软件。在实现的过程中，它能让你体会到极大的乐趣。而且更为有益的是：Boost.Asio包含了一些非网络的特性，用Boost.Asio写出来的代码紧凑、易读，而且如果你按照我在书中所讲的来做，你的代码会无懈可击。</p><p>这本书涵盖了什么？</p><p><em>第一章：Boost.Asio入门</em>将告诉你Boost.Asio是什么？怎么编译它？顺带着会有一些例子。你会发现Boost.Asio不仅仅是一个网络库。同时你也会接触到Boost.Asio中最核心的类io_service。</p><p><em>第二章：Boost.Asio基本原理</em>包含了你必须了解的内容：什么时候用Boost.Asio？我们将深入了解异步编程——一种比同步更需要技巧，且更有乐趣的编程方式。这一章也是在开发你自己的网络应用时可以作为参考的一章。</p><p><em>第三章：回显服务端/客户端</em>将会告诉你如何实现一个小的客户端/服务端应用；也许这会是你写过的最简单的客户端/服务端应用。回显应用就是把客户端发过来的消息发送回去然后关闭客户端连接的服务。我们会先实现一个同步的版本，然后再实现一个异步的版本，这样就可以非常容易地看到它们之间的不同。</p><p><em>第四章：客户端和服务端</em>会深入讨论如何用Boost.Asio创建一个简单的客户端/服务端应用。我们将讨论如何避免诸如内存泄漏和死锁的缺陷。所有的程序都只是实现一个简单的框架，从而使你能更方便地对它们进行扩展以满足你的需求。</p><p><em>第五章：同步VS异步</em>会带你了解在同步和异步方式之间做选择时需要考虑的事情。首要的事情就是不要混淆它们。在这一章，我们会发现实现、测试和调试每个类型应用是非常容易的。</p><p><em>第六章：Boost.Asio的其他特性</em>将带你了解Boost.Asio一些不为人知的特性。你会发现，虽然std streams和streambufs有一点点难用，但是却表现出了它们得天独厚的优势。最后，是姗姗来迟的Boost.Asio协程，它可以让你用一种更易读的方式来写异步代码。（就好像写同步代码一样）</p><p><em>第七章：Boost.Asio进阶</em>包含了一些Boost.Asio进阶问题的处理。虽然在日常编程中不需要深入研究它们，但是了解它们对你有益无害（Boost.Asio高级调试，SSL，Windows特性，POSIX特性等）。</p><h3 id="读这本书你需要准备什么？">读这本书你需要准备什么？</h3><p>如果要编译Boost.Asio以及运行本书中的例子，你需要一个现代编译器。例如，Visual Studio 2008及其以上版本或者g++ 4.4及其以上版本</p><h3 id="这本书是为谁准备的？">这本书是为谁准备的？</h3><p>这本书对于那些需要进行网络编程却不想深入研究复杂的原始网络API的开发者来说是一个福音。所有你需要的只是Boost.Asio提供的一套API。作为著名Boost C++库的一部分，你只需要额外添加几个#include文件即可转换到Boost.Asio。</p><p>在读这本书之前，你需要熟悉Boost核心库的一些知识，例如Boost智能指针、boost::noncopyable、Boost Functors、Boost Bind、shared_ from_this/enabled_shared_from_this和Boost线程（线程和互斥量）。同时还需要了解Boost的Date/Time。读者还需要知道阻塞的概念以及“非阻塞”操作。</p><h3 id="约定">约定</h3><p>本书使用不同样式的文字来区分不同种类的信息。这里给出这些样式的例子以及它们的解释。</p><p>文本中的代码会这样显示：“通常一个<em>io_service</em>的例子就足够了”。</p><p>一段代码是下面这个样子的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cppcpp">read(stream, buffer [, extra options])<br><br>async_read(stream, buffer [, extra options], handler)<br><br>write(stream, buffer [, extra options])<br><br>async_write(stream, buffer [, extra options], handler)<br></code></pre></td></tr></table></figure><p><strong>专业词汇和重要的单词</strong>用黑体显示</p><p>[<em>！警告或者重要的注释在这样的一个框里面</em>]</p><p>[<em>？技巧在这样的一个框里面</em>]</p><h3 id="读者反馈">读者反馈</h3><p>我们欢迎来自读者的反馈。告诉我们你对这本书的看法——你喜欢哪部分，不喜欢哪部分。读者的反馈对我们非常重要，它能让我们写出对读者帮助更大的书。</p><p>你只需要发送一封邮件到<a href="feedback@packtpub.com">feedback@packtpub.com</a>即可进行反馈，注意在邮件的主题中注明书名。</p><p>如果你有一个擅长的专题，想撰写一本书或者为某本书做贡献。请阅读我们在<a href="www.packtpub.com/authors">www.packtpub.com/authors</a>上的作者指引。</p><h3 id="用户支持">用户支持</h3><p>现在你已经是Packt书籍的拥有者，我们将告诉你一些事项，让你购买本书得到的收益最大化。</p><h3 id="下载示例代码">下载示例代码</h3><p>你可以在<a href="http://www.packtpub.com">http://www.packtpub.com</a>登录你的帐号，然后下载你所购买的书籍的全部示例代码。同时，你也可以通过访问<a href="http://www.packtpub.com/support">http://www.packtpub.com/support</a>进行注册，然后这些示例代码文件将直接发送到你的邮箱。</p><h3 id="纠错">纠错</h3><p>尽管我们已经尽最大的努力去保证书中内容的准确性，但是错误还是不可避免的。如果你在我们的书籍中发现了错误——也许是文字，也许是代码——如果你能将它们报告给我们，我们将不胜感激。这样的话，你不仅能帮助其他读者，同时也能帮助我们改进这本书的下一个版本。如果你发现任何需要纠正的地方，访问<a href="http://www.packtpub.com/submit-errata">http://www.packtpub.com/submit-errata</a>，选择你的书籍，点击<strong>errata submission form</strong>链接，然后输入详细的纠错信息来将错误报告给我们。一经确定，你的提交就会通过，然后这个纠错就会被上传到我们的网站，或者添加到那本书的纠错信息区域的纠错列表中。所有已发现的纠错都可以访问<a href="http://www.packtpub.com/support">http://www.packtpub.com/support</a>，然后通过选择书名的方式来查看。</p><h3 id="答疑">答疑</h3><p>如果你有关于本书任何方面的问题，你可以通过<a href="questions@packtpub.com">questions@packtpub.com</a>联系我们。我们将尽我们最大的努力进行解答</p><h2 id="Boost-Asio入门">Boost.Asio入门</h2><p>首先，让我们先来了解一下什么是Boost.Asio？怎么编译它？了解的过程中我们会给出一些例子。然后在发现Boost.Asio不仅仅是一个网络库的同时你也会接触到Boost.Asio中最核心的类——<em>io_service</em>。</p><h3 id="什么是Boost-Asio">什么是Boost.Asio</h3><p>简单来说，Boost.Asio是一个跨平台的、主要用于网络和其他一些底层输入/输出编程的C++库。</p><p>计算机网络的设计方式有很多种，但是Boost.Asio的的方式远远优于其它的设计方式。它在2005年就被包含进Boost，然后被大量Boost的用户测试并在很多项目中使用，比如Remobo(<a href="http://www.remobo.com">http://www.remobo.com</a>)，可以让你创建你自己的**即时私有网络(IPN)**的应用，libtorrent(<a href="%5Bhttp://www.rasterbar.com/products/libtorrent%5D(http://www.rasterbar.com/products/libtorrent)">http://www.rasterbar.com/products/libtorrent</a>)一个实现了比特流客户端的库，PokerTH (<a href="http://www.pokerth.net">http://www.pokerth.net</a>)一个支持LAN和互联网对战的纸牌游戏。</p><p>Boost.Asio在网络通信、COM串行端口和文件上成功地抽象了输入输出的概念。你可以基于这些进行同步或者异步的输入输出编程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read</span>(stream, buffer [, extra options])<br><span class="hljs-built_in">async_read</span>(stream, buffer [, extra options], handler)<br><span class="hljs-built_in">write</span>(stream, buffer [, extra options])<br><span class="hljs-built_in">async_write</span>(stream, buffer [, extra options], handler)<br></code></pre></td></tr></table></figure><p>从前面的代码片段可以看出，这些函数支持传入包含任意内容（不仅仅是一个socket，我们可以对它进行读写）的流实例。</p><p>作为一个跨平台的库，Boost.Asio可以在大多数操作系统上使用。能同时支持数千个并发的连接。其网络部分的灵感来源于<strong>伯克利软件分发(BSD)socket</strong>，它提供了一套可以支持**传输控制协议(TCP)**socket、**用户数据报协议(UDP)<strong>socket和</strong>Internet控制消息协议(IMCP)**socket的API，而且如果有需要，你可以对其进行扩展以支持你自己的协议。</p><h3 id="历史">历史</h3><p>Boost.Asio在2003被开发出来，然后于2005年的12月引入到Boost 1.35版本中。原作者是Christopher M. Kohlhoff，你可以通过<a href="chris@kohlhoff.com">chris@kohlhoff.com</a>联系他。</p><p>这个库在以下的平台和编译器上测试通过：</p><ul><li>32-bit和64-bit Windows，使用Visual C++ 7.1及以上</li><li>Windows下使用MinGW</li><li>Windows下使用Cygwin(确保已经定义 __USE_232_SOCKETS)</li><li>基于2.4和2.6内核的Linux，使用g++ 3.3及以上</li><li>Solaris下使用g++ 3.3及以上</li><li>MAC OS X 10.4以上下使用g++ 3.3及以上</li></ul><p>它也可能能在诸如AIX 5.3，HP-UX 11i v3，QNX Neutrino 6.3，Solaris下使用Sun Studio 11以上，True64 v5.1，Windows下使用Borland C++ 5.9.2以上等平台上使用。（更多细节请咨询<a href="www.boost.org">www.boost.org</a>）</p><h3 id="依赖">依赖</h3><p>Boost.Asio依赖于如下的库：</p><ul><li><strong>Boost.System</strong>：这个库为Boost库提供操作系统支持(<a href="http://www.boost.org/doc/libs/1_51_0/doc/html/boost_system/index.html">http://www.boost.org/doc/libs/1_51_0/doc/html/boost_system/index.html</a>)</li><li><strong>Boost.Regex</strong>：使用这个库（可选的）以便你重载<em>read_until()<em>或者</em>async_read_until()<em>时使用</em>boost::regex</em>参数。</li><li><strong>Boost.DateTime</strong>：使用这个库（可选的）以便你使用Boost.Asio中的计时器</li><li><strong>OpenSSL</strong>：使用这个库（可选的）以便你使用Boost.Asio提供的SSL支持。</li></ul><h3 id="编译Boost-Asio">编译Boost.Asio</h3><p>Boost.Asio是一个只需要引入头文件就可以使用的库。然而，考虑到你的编译器和程序的大小，你可以选择用源文件的方式来编译Boost.Asio。如果你想要这么做以减少编译时间，有如下几种方式：</p><p>在某个源文件中，添加*#include “boost/asio/impl/src.hpp”<em>（如果你在使用SSL，添加</em>#include “boost/asio/ssl/impl/src.hpp”<em>）<br>在所有的源文件中，添加</em>#define BOOST_ASIO_SEPARATE_COMPILATION*</p><p>注意Boost.Asio依赖于Boost.System，必要的时候还依赖于Boost.Regex，所以你需要用如下的指令先编译Boost：</p><p><em>bjam –with-system –with-regex stage</em></p><p>如果你还想同时编译tests，你需要使用如下的指令：</p><p><em>bjam –with-system –with-thread –with-date_time –with-regex –with-serialization stage</em></p><p>这个库有大量的例子，你可以连同本书中的例子一块看看。</p><h3 id="重要的宏">重要的宏</h3><p>如果设置了<em>BOOST_ASIO_DISABLE_THREADS</em>；不管你是否在编译Boost的过程中使用了线程支持，Boost.Asio中的线程支持都会失效。</p><h3 id="同步VS异步">同步VS异步</h3><p>首先，异步编程和同步编程是非常不同的。在同步编程中，所有的操作都是顺序执行的，比如从socket中读取（请求），然后写入（回应）到socket中。每一个操作都是阻塞的。因为操作是阻塞的，所以为了不影响主程序，当在socket上读写时，通常会创建一个或多个线程来处理socket的输入/输出。因此，同步的服务端/客户端通常是多线程的。</p><p>相反的，异步编程是事件驱动的。虽然启动了一个操作，但是你不知道它何时会结束；它只是提供一个回调给你，当操作结束时，它会调用这个API，并返回操作结果。对于有着丰富经验的QT（诺基亚用来创建跨平台图形用户界面应用程序的库）程序员来说，这就是他们的第二天性。因此，在异步编程中，你只需要一个线程。</p><p>因为中途做改变会非常困难而且容易出错，所以你在项目初期（最好是一开始）就得决定用同步还是异步的方式实现网络通信。不仅API有极大的不同，你程序的语意也会完全改变（异步网络通信通常比同步网络通信更加难以测试和调试）。你需要考虑是采用阻塞调用和多线程的方式（同步，通常比较简单），或者是更少的线程和事件驱动（异步，通常更复杂）。</p><p>下面是一个基础的同步客户端例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> boost::asio;<br>io_service service;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">2001</span>)</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">connect</span>(ep);<br></code></pre></td></tr></table></figure><p>首先，你的程序至少需要一个<em>io_service</em>实例。Boost.Asio使用<em>io_service</em>同操作系统的输入/输出服务进行交互。通常一个<em>io_service</em>的实例就足够了。然后，创建你想要连接的地址和端口，再建立socket。把socket连接到你创建的地址和端口。</p><p>下面是一个简单的使用Boost.Asio的服务端：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;ip::tcp::socket&gt; socket_ptr;<br>io_service service;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::tcp::v4(), <span class="hljs-number">2001</span>)</span>)</span>; <span class="hljs-comment">// listen on 2001</span><br>ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acc</span><span class="hljs-params">(service, ep)</span></span>;<br><span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-function">socket_ptr <span class="hljs-title">sock</span><span class="hljs-params">(<span class="hljs-keyword">new</span> ip::tcp::socket(service))</span></span>;<br>    acc.<span class="hljs-built_in">accept</span>(*sock);<br>    boost::<span class="hljs-built_in">thread</span>( boost::<span class="hljs-built_in">bind</span>(client_session, sock));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">client_session</span><span class="hljs-params">(socket_ptr sock)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> data[<span class="hljs-number">512</span>];<br>        <span class="hljs-type">size_t</span> len = sock-&gt;<span class="hljs-built_in">read_some</span>(<span class="hljs-built_in">buffer</span>(data));<br>        <span class="hljs-keyword">if</span> ( len &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">write</span>(*sock, <span class="hljs-built_in">buffer</span>(<span class="hljs-string">&quot;ok&quot;</span>, <span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，同样是至少需要一个<em>io_service</em>实例。然后你指定你想要监听的端口，再创建一个接收器——一个用来接收客户端连接的对象。 在接下来的循环中，你创建一个虚拟的socket来等待客户端的连接。然后当一个连接被建立时，你创建一个线程来处理这个连接。</p><p><em>在client_session</em>线程中来读取一个客户端的请求，进行解析，然后返回结果。</p><p>而创建一个异步的客户端，你需要做如下的事情：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> boost::asio;<br>io_service service;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">2001</span>)</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">async_connect</span>(ep, connect_handler);<br>service.<span class="hljs-built_in">run</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">connect_handler</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; ec)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果ec返回成功我们就可以知道连接成功了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在程序中你需要创建至少一个<em>io_service</em>实例。你需要指定连接的地址以及创建socket。</p><p>当连接完成时（其完成处理程序）你就异步地连接到了指定的地址和端口，也就是说，<em>connect_handler</em>被调用了。</p><p>当<em>connect_handler</em>被调用时，检查错误代码（<em>ec</em>），如果成功，你就可以向服务端进行异步的写入。</p><p>注意：只要还有待处理的异步操作，<em>servece.run()<em>循环就会一直运行。在上述例子中，只执行了一个这样的操作，就是socket的</em>async_connect</em>。在这之后，*service.run()*就退出了。</p><p>每一个异步操作都有一个完成处理程序——一个操作完成之后被调用的函数。 下面的代码是一个基本的异步服务端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> boost::asio;<br><span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;ip::tcp::socket&gt; socket_ptr;<br>io_service service;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::tcp::v4(), <span class="hljs-number">2001</span>)</span>)</span>; <span class="hljs-comment">// 监听端口2001</span><br>ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acc</span><span class="hljs-params">(service, ep)</span></span>;<br><span class="hljs-function">socket_ptr <span class="hljs-title">sock</span><span class="hljs-params">(<span class="hljs-keyword">new</span> ip::tcp::socket(service))</span></span>;<br><span class="hljs-built_in">start_accept</span>(sock);<br>service.<span class="hljs-built_in">run</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start_accept</span><span class="hljs-params">(socket_ptr sock)</span> </span>&#123;<br>    acc.<span class="hljs-built_in">async_accept</span>(*sock, boost::<span class="hljs-built_in">bind</span>( handle_accept, sock, _1) );<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_accept</span><span class="hljs-params">(socket_ptr sock, <span class="hljs-type">const</span> boost::system::error_code &amp;</span></span><br><span class="hljs-params"><span class="hljs-function">err)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 从这里开始, 你可以从socket读取或者写入</span><br>    <span class="hljs-function">socket_ptr <span class="hljs-title">sock</span><span class="hljs-params">(<span class="hljs-keyword">new</span> ip::tcp::socket(service))</span></span>;<br>    <span class="hljs-built_in">start_accept</span>(sock);<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码片段中，首先，你创建一个<em>io_service</em>实例，指定监听的端口。然后，你创建接收器acc——一个接受客户端连接，创建虚拟的socket，异步等待客户端连接的对象。</p><p>最后，运行异步<em>service.run()<em>循环。当接收到客户端连接时，<em>handle_accept</em>被调用（调用</em>async_accept</em>的完成处理程序）。如果没有错误，这个socket就可以用来做读写操作。</p><p>在使用这个socket之后，你创建了一个新的socket，然后再次调用<em>start_accept()</em>，用来创建另外一个“等待客户端连接”的异步操作，从而使*service.run()*循环一直保持忙碌状态。</p><h3 id="异常处理VS错误代码">异常处理VS错误代码</h3><p>Boost.Asio允许同时使用异常处理或者错误代码，所有的异步函数都有抛出错误和返回错误码两种方式的重载。当函数抛出错误时，它通常抛出<em>boost::system::system_error</em>的错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> boost::asio;<br>ip::tcp::endpoint ep;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">connect</span>(ep); <span class="hljs-comment">// 第一行</span><br>boost::system::error_code err;<br>sock.<span class="hljs-built_in">connect</span>(ep, err); <span class="hljs-comment">// 第二行</span><br></code></pre></td></tr></table></figure><p>在前面的代码中，*sock.connect(ep)*会抛出错误，*sock.connect(ep, err)*则会返回一个错误码。</p><p>看一下下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123;<br>    sock.<span class="hljs-built_in">connect</span>(ep);<br>&#125; <span class="hljs-built_in">catch</span>(boost::system::system_error e) &#123;<br>    std::cout &lt;&lt; e.<span class="hljs-built_in">code</span>() &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面的代码片段和前面的是一样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">boost::system::error_code err;<br>sock.<span class="hljs-built_in">connect</span>(ep, err);<br><span class="hljs-keyword">if</span> ( err)<br>    std::cout &lt;&lt; err &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>当使用异步函数时，你可以在你的回调函数里面检查其返回的错误码。异步函数从来不抛出异常，因为这样做毫无意义。那谁会捕获到它呢？</p><p>在你的异步函数中，你可以使用异常处理或者错误码（随心所欲），但要保持一致性。同时使用这两种方式会导致问题，大部分时候是崩溃（当你不小心出错，忘记去处理一个抛出来的异常时）。如果你的代码很复杂（调用很多socket读写函数），你最好选择异常处理的方式，把你的读写包含在一个函数<em>try {} catch</em>块里面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">client_session</span><span class="hljs-params">(socket_ptr sock)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>    &#125; <span class="hljs-built_in">catch</span> ( boost::system::system_error e) &#123;<br>        <span class="hljs-comment">// 处理错误</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用错误码，你可以使用下面的代码片段很好地检测连接是何时关闭的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> data[<span class="hljs-number">512</span>];<br>boost::system::error_code error;<br><span class="hljs-type">size_t</span> length = sock.<span class="hljs-built_in">read_some</span>(<span class="hljs-built_in">buffer</span>(data), error);<br><span class="hljs-keyword">if</span> (error == error::eof)<br>    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 连接关闭</span><br></code></pre></td></tr></table></figure><p>Boost.Asio的所有错误码都包含在ˆ的命名空间中（以便你创造一个大型的switch来检查错误的原因）。如果想要了解更多的细节，请参照<em>boost/asio/error.hpp</em>头文件</p><h3 id="Boost-Asio中的线程">Boost.Asio中的线程</h3><p>当说到Boost.Asio的线程时，我们经常在讨论：</p><ul><li><em>io_service</em>:<em>io_service</em>是线程安全的。几个线程可以同时调用<em>io_service::run()</em>。大多数情况下你可能在一个单线程函数中调用<em>io_service::run()</em>，这个函数必须等待所有异步操作完成之后才能继续执行。然而，事实上你可以在多个线程中调用<em>io_service::run()</em>。这会阻塞所有调用<em>io_service::run()<em>的线程。只要当中任何一个线程调用了</em>io_service::run()</em>，所有的回调都会同时被调用；这也就意味着，当你在一个线程中调用*io_service::run()*时，所有的回调都被调用了。</li><li><em>socket</em>:<em>socket</em>类不是线程安全的。所以，你要避免在某个线程里读一个socket时，同时在另外一个线程里面对其进行写入操作。（通常来说这种操作都是不推荐的，更别说Boost.Asio）。</li><li><em>utility</em>:就<em>utility</em>来说，因为它不是线程安全的，所以通常也不提倡在多个线程里面同时使用。里面的方法经常只是在很短的时间里面使用一下，然后就释放了。</li></ul><p>除了你自己创建的线程，Boost.Asio本身也包含几个线程。但是可以保证的是那些线程不会调用你的代码。这也意味着，只有调用了*io_service::run()*方法的线程才会调用回调函数。</p><h3 id="不仅仅是网络通信">不仅仅是网络通信</h3><p>除了网络通信，Boost.Asio还包含了其他的I/O功能。</p><p>Boost.Asio支持信号量，比如<em>SIGTERM</em>（软件终止）、<em>SIGINT</em>（中断信号）、<em>SIGSEGV</em>（段错误）等等。 你可以创建一个<em>signal_set</em>实例，指定异步等待的信号量，然后当这些信号量产生时，就会调用你的异步处理程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">signal_handler</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, <span class="hljs-type">int</span> signal)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 纪录日志，然后退出应用</span><br>&#125;<br>boost::<span class="hljs-function">asio::signal_set <span class="hljs-title">sig</span><span class="hljs-params">(service, SIGINT, SIGTERM)</span></span>;<br>sig.<span class="hljs-built_in">async_wait</span>(signal_handler);<br></code></pre></td></tr></table></figure><p>如果<em>SIGINT</em>产生，你就能在你的<em>signal_handler</em>回调中捕获到它。</p><p>你可以使用Boost.Asio轻松地连接到一个串行端口。在Windows上端口名称是<em>COM7</em>，在POSIX平台上是*/dev/ttyS0*。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br><span class="hljs-function">serial_port <span class="hljs-title">sp</span><span class="hljs-params">(service, <span class="hljs-string">&quot;COM7&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>打开端口后，你就可以使用下面的代码设置一些端口选项，比如端口的波特率、奇偶校验和停止位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">serial_port::baud_rate <span class="hljs-title">rate</span><span class="hljs-params">(<span class="hljs-number">9600</span>)</span></span>;<br>sp.<span class="hljs-built_in">set_option</span>(rate);<br></code></pre></td></tr></table></figure><p>打开端口后，你可以把这个串行端口看做一个流，然后基于它使用自由函数对串行端口进行读/写操作。比如<em>async_read(), write, async_write(),</em> 就像下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> data[<span class="hljs-number">512</span>];<br><span class="hljs-built_in">read</span>(sp, <span class="hljs-built_in">buffer</span>(data, <span class="hljs-number">512</span>));<br></code></pre></td></tr></table></figure><p>Boost.Asio也可以连接到Windows的文件，然后同样使用自由函数，比如*read(), asyn_read()*等等，就像下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HANDLE h = ::<span class="hljs-built_in">OpenFile</span>(...);<br><span class="hljs-function">windows::stream_handle <span class="hljs-title">sh</span><span class="hljs-params">(service, h)</span></span>;<br><span class="hljs-type">char</span> data[<span class="hljs-number">512</span>];<br><span class="hljs-built_in">read</span>(h, <span class="hljs-built_in">buffer</span>(data, <span class="hljs-number">512</span>));<br></code></pre></td></tr></table></figure><p>对于POXIS文件描述符，比如管道，标准I/O和各种设备（但不包括普通文件）你也可以这样做，就像下面的代码所做的一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">posix::stream_descriptor <span class="hljs-title">sd_in</span><span class="hljs-params">(service, ::dup(STDIN_FILENO))</span></span>;<br><span class="hljs-type">char</span> data[<span class="hljs-number">512</span>];<br><span class="hljs-built_in">read</span>(sd_in, <span class="hljs-built_in">buffer</span>(data, <span class="hljs-number">512</span>));<br></code></pre></td></tr></table></figure><h3 id="计时器">计时器</h3><p>一些I/O操作需要一个超时时间。这只能应用在异步操作上（同步意味着阻塞，因此没有超时时间）。例如，下一条信息必须在100毫秒内从你的同伴那传递给你。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> read = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deadline_handler</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;)</span> </span>&#123;<br>    std::cout &lt;&lt; (read ? <span class="hljs-string">&quot;read successfully&quot;</span> : <span class="hljs-string">&quot;read failed&quot;</span>) &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read_handler</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;)</span> </span>&#123;<br>    read = <span class="hljs-literal">true</span>;<br>&#125;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>…<br>read = <span class="hljs-literal">false</span>;<br><span class="hljs-type">char</span> data[<span class="hljs-number">512</span>];<br>sock.<span class="hljs-built_in">async_read_some</span>(<span class="hljs-built_in">buffer</span>(data, <span class="hljs-number">512</span>));<br><span class="hljs-function">deadline_timer <span class="hljs-title">t</span><span class="hljs-params">(service, boost::posix_time::milliseconds(<span class="hljs-number">100</span>))</span></span>;<br>t.<span class="hljs-built_in">async_wait</span>(&amp;deadline_handler);<br>service.<span class="hljs-built_in">run</span>();<br></code></pre></td></tr></table></figure><p>在上述代码片段中，如果你在超时之前读完了数据，<em>read</em>则被设置成true，这样我们的伙伴就及时地通知了我们。否则，当<em>deadline_handler</em>被调用时，<em>read</em>还是false，也就意味着我们的操作超时了。</p><p>Boost.Asio也支持同步计时器，但是它们通常和一个简单的sleep操作是一样的。*boost::this_thread::sleep(500);*这段代码和下面的代码片段完成了同一件事情：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">deadline_timer <span class="hljs-title">t</span><span class="hljs-params">(service, boost::posix_time::milliseconds(<span class="hljs-number">500</span>))</span></span>;<br>t.<span class="hljs-built_in">wait</span>();<br></code></pre></td></tr></table></figure><h3 id="io-service类">io_service类</h3><p>你应该已经发现大部分使用Boost.Asio编写的代码都会使用几个<em>io_service</em>的实例。<em>io_service</em>是这个库里面最重要的类；它负责和操作系统打交道，等待所有异步操作的结束，然后为每一个异步操作调用其完成处理程序。</p><p>如果你选择用同步的方式来创建你的应用，你则不需要考虑我将在这一节向你展示的东西。<br>你有多种不同的方式来使用<em>io_service</em>。在下面的例子中，我们有3个异步操作，2个socket连接操作和一个计时器等待操作：</p><ul><li>有一个<em>io_service</em>实例和一个处理线程的单线程例子：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service; <span class="hljs-comment">// 所有socket操作都由service来处理 </span><br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock1</span><span class="hljs-params">(service)</span></span>; <span class="hljs-comment">// all the socket operations are handled by service </span><br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock2</span><span class="hljs-params">(service)</span></span>; sock1.<span class="hljs-built_in">asyncconnect</span>( ep, connect_handler); <br>sock2.<span class="hljs-built_in">async_connect</span>( ep, connect_handler); <br><span class="hljs-function">deadline_timer <span class="hljs-title">t</span><span class="hljs-params">(service, boost::posixtime::seconds(<span class="hljs-number">5</span>))</span></span>;<br>t.<span class="hljs-built_in">async_wait</span>(timeout_handler); <br>service.<span class="hljs-built_in">run</span>();<br></code></pre></td></tr></table></figure><ul><li>有一个io_service实例和多个处理线程的多线程例子：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock1</span><span class="hljs-params">(service)</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock2</span><span class="hljs-params">(service)</span></span>;<br>sock1.<span class="hljs-built_in">asyncconnect</span>( ep, connect_handler);<br>sock2.<span class="hljs-built_in">async_connect</span>( ep, connect_handler);<br><span class="hljs-function">deadline_timer <span class="hljs-title">t</span><span class="hljs-params">(service, boost::posixtime::seconds(<span class="hljs-number">5</span>))</span></span>;<br>t.<span class="hljs-built_in">async_wait</span>(timeout_handler);<br><span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>    boost::<span class="hljs-built_in">thread</span>( run_service);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run_service</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>有多个<em>io_service</em>实例和多个处理线程的多线程例子：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service[<span class="hljs-number">2</span>];<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock1</span><span class="hljs-params">(service[<span class="hljs-number">0</span>])</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock2</span><span class="hljs-params">(service[<span class="hljs-number">1</span>])</span></span>;<br>sock1.<span class="hljs-built_in">asyncconnect</span>( ep, connect_handler);<br>sock2.<span class="hljs-built_in">async_connect</span>( ep, connect_handler);<br><span class="hljs-function">deadline_timer <span class="hljs-title">t</span><span class="hljs-params">(service[<span class="hljs-number">0</span>], boost::posixtime::seconds(<span class="hljs-number">5</span>))</span></span>;<br>t.<span class="hljs-built_in">async_wait</span>(timeout_handler);<br><span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i)<br>    boost::<span class="hljs-built_in">thread</span>( boost::<span class="hljs-built_in">bind</span>(run_service, i));<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run_service</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span></span><br><span class="hljs-function"></span>&#123;<br>    service[idx].<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>首先，要注意你不能拥有多个<em>io_service</em>实例却只有一个线程。下面的代码片段没有任何意义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i)<br>    service[i].<span class="hljs-built_in">run</span>();<br></code></pre></td></tr></table></figure><p>上面的代码片段没有意义是因为*service[1].run()<em>需要</em>service[0].run()<em>先结束。因此，所有由</em>service[1]*处理的异步操作都需要等待，这显然不是一个好主意。</p><p>在前面的3个方案中，我们在等待3个异步操作结束。为了解释它们之间的不同点，我们假设：过一会操作1完成，然后接着操作2完成。同时我们假设每一个完成处理程序需要1秒钟来完成执行。</p><p>在第一个例子中，我们在一个线程中等待三个操作全部完成，第1个操作一完成，我们就调用它的完成处理程序。尽管操作2紧接着完成了，但是操作2的完成处理程序需要在1秒钟后，也就是操作1的完成处理程序完成时才会被调用。</p><p>第二个例子，我们在两个线程中等待3个异步操作结束。当操作1完成时，我们在第1个线程中调用它的完成处理程序。当操作2完成时，紧接着，我们就在第2个线程中调用它的完成处理程序（当线程1在忙着响应操作1的处理程序时，线程2空闲着并且可以回应任何新进来的操作）。</p><p>在第三个例子中，因为操作1是<em>sock1</em>的<em>connect</em>，操作2是<em>sock2</em>的<em>connect</em>，所以应用程序会表现得像第二个例子一样。线程1会处理<em>sock1</em> <em>connect</em>操作的完成处理程序，线程2会处理<em>sock2</em>的<em>connect</em>操作的完成处理程序。然而，如果<em>sock1</em>的<em>connect</em>操作是操作1，<em>deadline_timer t</em>的超时操作是操作2，线程1会结束正在处理的<em>sock1</em> <em>connect</em>操作的完成处理程序。因而，<em>deadline_timer t</em>的超时操作必须等<em>sock1</em> <em>connect</em>操作的完成处理程序结束（等待1秒钟），因为线程1要处理<em>sock1</em>的连接处理程序和<em>t</em>的超时处理程序。</p><p>下面是你需要从前面的例子中学到的：</p><ul><li>第一种情况是非常基础的应用程序。因为是串行的方式，所以当几个处理程序需要被同时调用时，你通常会遇到瓶颈。如果一个处理程序需要花费很长的时间来执行，所有随后的处理程序都不得不等待。</li><li>第二种情况是比较适用的应用程序。他是非常强壮的——如果几个处理程序被同时调用了（这是有可能的），它们会在各自的线程里面被调用。唯一的瓶颈就是所有的处理线程都很忙的同时又有新的处理程序被调用。然而，这是有快速的解决方式的，增加处理线程的数目即可。</li><li>第三种情况是最复杂和最难理解的。你只有在第二种情况不能满足需求时才使用它。这种情况一般就是当你有成千上万实时（socket）连接时。你可以认为每一个处理线程（运行<em>io_service::run()<em>的线程）有它自己的</em>select/epoll</em>循环；它等待任意一个socket连接，然后等待一个读写操作，当它发现这种操作时，就执行。大部分情况下，你不需要担心什么，唯一你需要担心的就是当你监控的socket数目以指数级的方式增长时（超过1000个的socket）。在那种情况下，有多个select/epoll循环会增加应用的响应时间。</li></ul><p>如果你觉得你的应用程序可能需要转换到第三种模式，请确保监听操作的这段代码（调用*io_service::run()*的代码）和应用程序其他部分是隔离的，这样你就可以很轻松地对其进行更改。</p><p>最后，需要一直记住的是如果没有其他需要监控的操作，*.run()*就会结束，就像下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service; <br><span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>; <br>sock.<span class="hljs-built_in">async_connect</span>( ep, connect_handler); <br>service.<span class="hljs-built_in">run</span>();<br></code></pre></td></tr></table></figure><p>在上面的例子中，只要sock建立了一个连接，<em>connect_handler</em>就会被调用，然后接着*service.run()*就会完成执行。</p><p>如果你想要<em>service.run()<em>接着执行，你需要分配更多的工作给它。这里有两个方式来完成这个目标。一种方式是在</em>connect_handler</em>中启动另外一个异步操作来分配更多的工作。 另一种方式会模拟一些工作给它，用下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> boost::shared_ptr work_ptr;<br><span class="hljs-function">work_ptr <span class="hljs-title">dummy_work</span><span class="hljs-params">(<span class="hljs-keyword">new</span> io_service::work(service))</span></span>;<br></code></pre></td></tr></table></figure><p>上面的代码可以保证*service.run()<em>一直运行直到你调用</em>useservice.stop()*或者 <em>dummy_work.reset(0);</em>// 销毁 dummy_work.</p><h3 id="总结">总结</h3><p>做为一个复杂的库，Boost.Asio让网络编程变得异常简单。构建起来也简单。而且在避免使用宏这一点上也做得很好；它虽然定义了少部分的宏来做选项开关，但是你需要关心的很少。</p><p>Boost.Asio支持同步和异步编程。他们有很大不同；你需要在项目早期就选择其中的一种来实现，因为它们之间的转换是非常复杂而且易错的。</p><p>如果你选择同步，你可以选择异常处理或者错误码，从异常处理转到错误码；只需要在call函数中增加一个参数即可（错误码）。</p><p>Boost.Asio不仅仅可以用来做网络编程。它还有其他更多的特性，这让它显得更有价值，比如信号量，计时器等等。</p><p>下一章我们将深入研究大量Boost.Asio中用来做网络编程的函数和类。同时我们也会学一些异步编程的诀窍。</p><h2 id="Boost-Asio基本原理">Boost.Asio基本原理</h2><p>这一章涵盖了使用Boost.Asio时必须知道的一些事情。我们也将深入研究比同步编程更复杂、更有乐趣的异步编程。</p><h3 id="网络API">网络API</h3><p>这一部分包含了当使用Boost.Asio编写网络应用程序时必须知道的事情。</p><h3 id="Boost-Asio命名空间">Boost.Asio命名空间</h3><p>Boost.Asio的所有内容都包含在boost::asio命名空间或者其子命名空间内。</p><ul><li><em>boost::asio</em>：这是核心类和函数所在的地方。重要的类有io_service和streambuf。类似<em>read, read_at, read_until</em>方法，它们的异步方法，它们的写方法和异步写方法等自由函数也在这里。</li><li><em>boost::asio::ip</em>：这是网络通信部分所在的地方。重要的类有<em>address, endpoint, tcp,<br>udp和icmp</em>，重要的自由函数有<em>connect</em>和<em>async_connect</em>。要注意的是在<em>boost::asio::ip::tcp::socket</em>中间，<em>socket</em>只是<em>boost::asio::ip::tcp</em>类中间的一个<em>typedef</em>关键字。</li><li><em>boost::asio::error</em>：这个命名空间包含了调用I/O例程时返回的错误码</li><li><em>boost::asio::ssl</em>：包含了SSL处理类的命名空间</li><li><em>boost::asio::local</em>：这个命名空间包含了POSIX特性的类</li><li><em>boost::asio::windows</em>：这个命名空间包含了Windows特性的类</li></ul><h3 id="IP地址">IP地址</h3><p>对于IP地址的处理，Boost.Asio提供了<em>ip::address , ip::address_v4</em>和<em>ip::address_v6</em>类。<br>它们提供了相当多的函数。下面列出了最重要的几个：</p><ul><li><em>ip::address(v4_or_v6_address)</em>:这个函数把一个v4或者v6的地址转换成<em>ip::address</em></li><li><em>ip::address:from_string(str)</em>：这个函数根据一个IPv4地址（用.隔开的）或者一个IPv6地址（十六进制表示）创建一个地址。</li><li><em>ip::address::to_string()</em> ：这个函数返回这个地址的字符串。</li><li><em>ip::address_v4::broadcast([addr, mask])</em>:这个函数创建了一个广播地址<br><em>ip::address_v4::any()</em>：这个函数返回一个能表示任意地址的地址。</li><li><em>ip::address_v4::loopback(), ip_address_v6::loopback()</em>：这个函数返回环路地址（为v4/v6协议）</li><li><em>ip::host_name()</em>：这个函数用string数据类型返回当前的主机名。</li></ul><p>大多数情况你会选择用<em>ip::address::from_string</em>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::address addr = ip::address::<span class="hljs-built_in">from_string</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br></code></pre></td></tr></table></figure><p>如果你想通过一个主机名进行连接，下面的代码片段是无用的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 抛出异常</span><br>ip::address addr = ip::address::<span class="hljs-built_in">from_string</span>(<span class="hljs-string">&quot;www.yahoo.com&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="端点">端点</h3><p>端点是使用某个端口连接到的一个地址。不同类型的socket有它自己的<em>endpoint</em>类，比如<em>ip::tcp::endpoint、ip::udp::endpoint</em>和<em>ip::icmp::endpoint</em></p><p>如果想连接到本机的80端口，你可以这样做：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">80</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>有三种方式来让你建立一个端点：</p><ul><li><em>endpoint()</em>：这是默认构造函数，某些时候可以用来创建UDP/ICMP socket。</li><li><em>endpoint(protocol, port)</em>：这个方法通常用来创建可以接受新连接的服务器端socket。</li><li><em>endpoint(addr, port)</em>:这个方法创建了一个连接到某个地址和端口的端点。</li></ul><p>例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::tcp::endpoint ep1;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep2</span><span class="hljs-params">(ip::tcp::v4(), <span class="hljs-number">80</span>)</span></span>;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep3</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1), 80);</span></span></span><br></code></pre></td></tr></table></figure><p>如果你想连接到一个主机（不是IP地址），你需要这样做：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 输出 &quot;87.248.122.122&quot;</span><br>io_service service;<br>ip::<span class="hljs-function">tcp::resolver <span class="hljs-title">resolver</span><span class="hljs-params">(service)</span></span>;<br>ip::tcp::<span class="hljs-function">resolver::query <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-string">&quot;www.yahoo.com&quot;</span>, <span class="hljs-string">&quot;80&quot;</span>)</span></span>;<br>ip::tcp::resolver::iterator iter = resolver.<span class="hljs-built_in">resolve</span>( query);<br>ip::tcp::endpoint ep = *iter;<br>std::cout &lt;&lt; ep.<span class="hljs-built_in">address</span>().<span class="hljs-built_in">to_string</span>() &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>你可以用你需要的socket类型来替换tcp。首先，为你想要查询的名字创建一个查询器，然后用resolve()函数解析它。如果成功，它至少会返回一个入口。你可以利用返回的迭代器，使用第一个入口或者遍历整个列表来拿到全部的入口。</p><p>给定一个端点，可以获得他的地址，端口和IP协议（v4或者v6）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; ep.<span class="hljs-built_in">address</span>().<span class="hljs-built_in">to_string</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; ep.<span class="hljs-built_in">port</span>()<br>&lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; ep.<span class="hljs-built_in">protocol</span>() &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h3 id="套接字">套接字</h3><p>Boost.Asio有三种类型的套接字类：<em>ip::tcp, ip::udp</em>和<em>ip::icmp</em>。当然它也是可扩展的，你可以创建自己的socket类，尽管这相当复杂。如果你选择这样做，参照一下<em>boost/asio/ip/tcp.hpp, boost/asio/ip/udp.hpp</em>和<em>boost/asio/ip/icmp.hpp</em>。它们都是含有内部typedef关键字的超小类。</p><p>你可以把<em>ip::tcp, ip::udp, ip::icmp</em>类当作占位符；它们可以让你便捷地访问其他类/函数，如下所示：</p><ul><li><em>ip::tcp::socket, ip::tcp::acceptor, ip::tcp::endpoint,ip::tcp::resolver, ip::tcp::iostream</em></li><li><em>ip::udp::socket, ip::udp::endpoint, ip::udp::resolver</em></li><li><em>ip::icmp::socket, ip::icmp::endpoint, ip::icmp::resolver</em></li></ul><p><em>socket</em>类创建一个相应的<em>socket</em>。而且总是在构造的时候传入io_service实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>ip::<span class="hljs-function">udp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span><br><span class="hljs-function">sock.<span class="hljs-title">set_option</span><span class="hljs-params">(ip::udp::socket::reuse_address(<span class="hljs-literal">true</span>))</span></span>;<br></code></pre></td></tr></table></figure><p>每一个socket的名字都是一个typedef关键字</p><ul><li><em>ip::tcp::socket = basic_stream_socket<tcp></em></li><li><em>ip::udp::socket = basic_datagram_socket<udp></em></li><li><em>ip::icmp::socket = basic_raw_socket<icmp></em></li></ul><h3 id="同步错误码">同步错误码</h3><p>所有的同步函数都有抛出异常或者返回错误码的重载，比如下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sync_func</span>( arg1, arg2 ... argN); <span class="hljs-comment">// 抛出异常</span><br>boost::system::error_code ec;<br><span class="hljs-built_in">sync_func</span>( arg1 arg2, ..., argN, ec); <span class="hljs-comment">// 返回错误码</span><br></code></pre></td></tr></table></figure><p>在这一章剩下的部分，你会见到大量的同步函数。简单起见，我省略了有返回错误码的重载，但是不可否认它们确实是存在的。</p><h3 id="socket成员方法">socket成员方法</h3><p>这些方法被分成了几组。并不是所有的方法都可以在各个类型的套接字里使用。这个部分的结尾将有一个列表来展示各个方法分别属于哪个socket类。</p><p>注意所有的异步方法都立刻返回，而它们相对的同步实现需要操作完成之后才能返回。</p><h3 id="连接相关的函数">连接相关的函数</h3><p>这些方法是用来连接或绑定socket、断开socket字连接以及查询连接是活动还是非活动的：</p><ul><li><em>assign(protocol,socket)</em>：这个函数分配了一个原生的socket给这个socket实例。当处理老（旧）程序时会使用它（也就是说，原生socket已经被建立了）</li><li><em>open(protocol)</em>：这个函数用给定的IP协议（v4或者v6）打开一个socket。你主要在UDP/ICMP socket，或者服务端socket上使用。</li><li><em>bind(endpoint)</em>：这个函数绑定到一个地址</li><li><em>connect(endpoint)</em>：这个函数用同步的方式连接到一个地址</li><li><em>async_connect(endpoint)</em>：这个函数用异步的方式连接到一个地址</li><li><em>is_open()</em>：如果套接字已经打开，这个函数返回true</li><li><em>close()</em>：这个函数用来关闭套接字。调用时这个套接字上任何的异步操作都会被立即关闭，同时返回<em>error::operation_aborted</em>错误码。</li><li><em>shutdown(type_of_shutdown)</em>：这个函数立即使send或者receive操作失效，或者两者都失效。</li><li><em>cancel()</em>：这个函数取消套接字上所有的异步操作。这个套接字上任何的异步操作都会立即结束，然后返回<em>error::operation_aborted</em>错误码。</li></ul><p>例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">80</span>)</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">open</span>(ip::tcp::<span class="hljs-built_in">v4</span>()); n<br>sock.<span class="hljs-built_in">connect</span>(ep);<br>sock.<span class="hljs-built_in">write_some</span>(<span class="hljs-built_in">buffer</span>(<span class="hljs-string">&quot;GET /index.html\r\n&quot;</span>));<br><span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>]; sock.<span class="hljs-built_in">read_some</span>(<span class="hljs-built_in">buffer</span>(buff,<span class="hljs-number">1024</span>));<br>sock.<span class="hljs-built_in">shutdown</span>(ip::tcp::socket::shutdown_receive);<br>sock.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><h3 id="读写函数">读写函数</h3><p>这些是在套接字上执行I/O操作的函数。</p><p>对于异步函数来说，处理程序的格式*void handler(const boost::system::error_code&amp; e, size_t bytes)*都是一样的</p><ul><li><em>async_receive(buffer, [flags,] handler)</em>：这个函数启动从套接字异步接收数据的操作。</li><li><em>async_read_some(buffer,handler)</em>：这个函数和*async_receive(buffer, handler)*功能一样。</li><li><em>async_receive_from(buffer, endpoint[, flags], handler)</em>：这个函数启动从一个指定端点异步接收数据的操作。</li><li><em>async_send(buffer [, flags], handler)</em>：这个函数启动了一个异步发送缓冲区数据的操作。</li><li><em>async_write_some(buffer, handler)</em>：这个函数和a*sync_send(buffer, handler)*功能一致。</li><li><em>async_send_to(buffer, endpoint, handler)</em>：这个函数启动了一个异步send缓冲区数据到指定端点的操作。</li><li><em>receive(buffer [, flags])</em>：这个函数异步地从所给的缓冲区读取数据。在读完所有数据或者错误出现之前，这个函数都是阻塞的。</li><li><em>read_some(buffer)</em>：这个函数的功能和*receive(buffer)*是一致的。</li><li><ul><li>receive_from(buffer, endpoint [, flags])*：这个函数异步地从一个指定的端点获取数据并写入到给定的缓冲区。在读完所有数据或者错误出现之前，这个函数都是阻塞的。</li></ul></li><li><em>send(buffer [, flags])</em>：这个函数同步地发送缓冲区的数据。在所有数据发送成功或者出现错误之前，这个函数都是阻塞的。</li><li><em>write_some(buffer)</em>：这个函数和*send(buffer)*的功能一致。</li><li><em>send_to(buffer, endpoint [, flags])</em>：这个函数同步地把缓冲区数据发送到一个指定的端点。在所有数据发送成功或者出现错误之前，这个函数都是阻塞的。</li><li><em>available()</em>：这个函数返回有多少字节的数据可以无阻塞地进行同步读取。</li></ul><p>稍后我们将讨论缓冲区。让我们先来了解一下标记。标记的默认值是0，但是也可以是以下几种：</p><ul><li><em>ip::socket_type::socket::message_peek</em>：这个标记只监测并返回某个消息，但是下一次读消息的调用会重新读取这个消息。</li><li><em>ip::socket_type::socket::message_out_of_band</em>：这个标记处理带外（OOB）数据，OOB数据是被标记为比正常数据更重要的数据。关于OOB的讨论在这本书的内容之外。</li><li><em>ip::socket_type::socket::message_do_not_route</em>：这个标记指定数据不使用路由表来发送。</li><li><em>ip::socket_type::socket::message_end_of_record</em>：这个标记指定的数据标识了记录的结束。在Windows下不支持。</li></ul><p>你最常用的可能是<em>message_peek</em>，使用方法请参照下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br>sock.<span class="hljs-built_in">receive</span>(<span class="hljs-built_in">buffer</span>(buff), ip::tcp::socket::message_peek );<br><span class="hljs-built_in">memset</span>(buff,<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 重新读取之前已经读取过的内容</span><br>sock.<span class="hljs-built_in">receive</span>(<span class="hljs-built_in">buffer</span>(buff) );<br></code></pre></td></tr></table></figure><p>下面的是一些教你如何同步或异步地从不同类型的套接字上读取数据的例子：</p><ul><li>例1是在一个TCP套接字上进行同步读写：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">80</span>)</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">connect</span>(ep);<br>sock.<span class="hljs-built_in">write_some</span>(<span class="hljs-built_in">buffer</span>(<span class="hljs-string">&quot;GET /index.html\r\n&quot;</span>));<br>std::cout &lt;&lt; <span class="hljs-string">&quot;bytes available &quot;</span> &lt;&lt; sock.<span class="hljs-built_in">available</span>() &lt;&lt; std::endl;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br><span class="hljs-type">size_t</span> read = sock.<span class="hljs-built_in">read_some</span>(<span class="hljs-built_in">buffer</span>(buff));<br></code></pre></td></tr></table></figure><ul><li>例2是在一个UDP套接字上进行同步读写：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">udp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">open</span>(ip::udp::<span class="hljs-built_in">v4</span>());<br>ip::<span class="hljs-function">udp::endpoint <span class="hljs-title">receiver_ep</span><span class="hljs-params">(<span class="hljs-string">&quot;87.248.112.181&quot;</span>, <span class="hljs-number">80</span>)</span></span>;<br>sock.<span class="hljs-built_in">send_to</span>(<span class="hljs-built_in">buffer</span>(<span class="hljs-string">&quot;testing\n&quot;</span>), receiver_ep);<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br>ip::udp::endpoint sender_ep;<br>sock.<span class="hljs-built_in">receive_from</span>(<span class="hljs-built_in">buffer</span>(buff), sender_ep);<br></code></pre></td></tr></table></figure><p><em>[？注意：就像上述代码片段所展示的那样，使用receive_from从一个UDP套接字读取数据时，你需要构造一个默认的端点]</em></p><ul><li>例3是从一个UDP服务套接字中异步读取数据：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br>ip::<span class="hljs-function">udp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>boost::asio::ip::udp::endpoint sender_ep;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, std::<span class="hljs-type">size_t</span> read_bytes)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;read &quot;</span> &lt;&lt; read_bytes &lt;&lt; std::endl;<br>    sock.<span class="hljs-built_in">async_receive_from</span>(<span class="hljs-built_in">buffer</span>(buff), sender_ep, on_read);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    ip::<span class="hljs-function">udp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">(ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-number">8001</span>)</span></span>;<br>    sock.<span class="hljs-built_in">open</span>(ep.<span class="hljs-built_in">protocol</span>());<br>    sock.<span class="hljs-built_in">set_option</span>(boost::asio::ip::udp::socket::<span class="hljs-built_in">reuse_address</span>(<span class="hljs-literal">true</span>));<br>    sock.<span class="hljs-built_in">bind</span>(ep);<br>    sock.<span class="hljs-built_in">async_receive_from</span>(<span class="hljs-built_in">buffer</span>(buff,<span class="hljs-number">512</span>), sender_ep, on_read);<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="套接字控制：">套接字控制：</h3><p>这些函数用来处理套接字的高级选项：</p><ul><li><em>get_io_service()</em>：这个函数返回构造函数中传入的io_service实例</li><li><em>get_option(option)</em>：这个函数返回一个套接字的属性</li><li><em>set_option(option)</em>：这个函数设置一个套接字的属性</li><li><em>io_control(cmd)</em>：这个函数在套接字上执行一个I/O指令</li></ul><p>这些是你可以获取/设置的套接字选项：</p><table><thead><tr><th>名字</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>broadcast</td><td>如果为true，允许广播消息</td><td>bool</td></tr><tr><td>debug</td><td>如果为true，启用套接字级别的调试</td><td>bool</td></tr><tr><td>do_not_route</td><td>如果为true，则阻止路由选择只使用本地接口</td><td>bool</td></tr><tr><td>enable_connection_aborted</td><td>如果为true，记录在accept()时中断的连接</td><td>bool</td></tr><tr><td>keep_alive</td><td>如果为true，会发送心跳</td><td>bool</td></tr><tr><td>linger</td><td>如果为true，套接字会在有未发送数据的情况下挂起close()</td><td>bool</td></tr><tr><td>receive_buffer_size</td><td>套接字接收缓冲区大小</td><td>int</td></tr><tr><td>receive_low_watemark</td><td>规定套接字输入处理的最小字节数</td><td>int</td></tr><tr><td>reuse_address</td><td>如果为true，套接字能绑定到一个已用的地址</td><td>bool</td></tr><tr><td>send_buffer_size</td><td>套接字发送缓冲区大小</td><td>int</td></tr><tr><td>send_low_watermark</td><td>规定套接字数据发送的最小字节数</td><td>int</td></tr><tr><td>ip::v6_only</td><td>如果为true，则只允许IPv6的连接</td><td>bool</td></tr></tbody></table><p>每个名字代表了一个内部套接字typedef或者类。下面是对它们的使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">80</span>)</span></span>;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">connect</span>(ep);<br><span class="hljs-comment">// TCP套接字可以重用地址</span><br>ip::tcp::<span class="hljs-function">socket::reuse_address <span class="hljs-title">ra</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span></span>;<br>sock.<span class="hljs-built_in">set_option</span>(ra);<br><span class="hljs-comment">// 获取套接字读取的数据</span><br>ip::tcp::socket::receive_buffer_size rbs;<br>sock.<span class="hljs-built_in">get_option</span>(rbs);<br>std::cout &lt;&lt; rbs.<span class="hljs-built_in">value</span>() &lt;&lt; std::endl;<br><span class="hljs-comment">// 把套接字的缓冲区大小设置为8192</span><br>ip::tcp::<span class="hljs-function">socket::send_buffer_size <span class="hljs-title">sbs</span><span class="hljs-params">(<span class="hljs-number">8192</span>)</span></span>;<br>sock.<span class="hljs-built_in">set_option</span>(sbs);<br></code></pre></td></tr></table></figure><p><em>[?在上述特性工作之前，套接字要被打开。否则，会抛出异常]</em></p><h3 id="TCP-VS-UDP-VS-ICMP">TCP VS UDP VS ICMP</h3><p>就像我之前所说，不是所有的成员方法在所有的套接字类中都可用。我做了一个包含成员函数不同点的列表。如果一个成员函数没有出现在这，说明它在所有的套接字类都是可用的。</p><table><thead><tr><th>名字</th><th>TCP</th><th>UDP</th><th>ICMP</th></tr></thead><tbody><tr><td>async_read_some</td><td>是</td><td>-</td><td>-</td></tr><tr><td>async_receive_from</td><td>-</td><td>是</td><td>是</td></tr><tr><td>async_write_some</td><td>是</td><td>-</td><td>-</td></tr><tr><td>async_send_to</td><td>-</td><td>是</td><td>是</td></tr><tr><td>read_some</td><td>是</td><td>-</td><td>-</td></tr><tr><td>receive_from</td><td>-</td><td>是</td><td>是</td></tr><tr><td>write_some</td><td>是</td><td>-</td><td>-</td></tr><tr><td>send_to</td><td>-</td><td>是</td><td>是</td></tr></tbody></table><h3 id="其他方法">其他方法</h3><p>其他与连接和I/O无关的函数如下：</p><ul><li><em>local_endpoint()</em>：这个方法返回套接字本地连接的地址。</li><li><em>remote_endpoint()</em>：这个方法返回套接字连接到的远程地址。</li><li><em>native_handle()</em>：这个方法返回原始套接字的处理程序。你只有在调用一个Boost.Asio不支持的原始方法时才需要用到它。</li><li><em>non_blocking()</em>：如果套接字是非阻塞的，这个方法返回true，否则false。</li><li><em>native_non_blocking()</em>：如果套接字是非阻塞的，这个方法返回true，否则返回false。但是，它是基于原生的套接字来调用本地的api。所以通常来说，你不需要调用这个方法（non_blocking()已经缓存了这个结果）；你只有在直接调用native_handle()这个方法的时候才需要用到这个方法。</li><li><em>at_mark()</em>：如果套接字要读的是一段OOB数据，这个方法返回true。这个方法你很少会用到。</li></ul><h3 id="其他需要考虑的事情">其他需要考虑的事情</h3><p>最后要注意的一点，套接字实例不能被拷贝，因为拷贝构造方法和＝操作符是不可访问的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::socket <span class="hljs-title">s1</span><span class="hljs-params">(service)</span>, <span class="hljs-title">s2</span><span class="hljs-params">(service)</span></span>;<br>s1 = s2; <span class="hljs-comment">// 编译时报错</span><br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">s3</span><span class="hljs-params">(s1)</span></span>; <span class="hljs-comment">// 编译时报错</span><br></code></pre></td></tr></table></figure><p>这是非常有意义的，因为每一个实例都拥有并管理着一个资源（原生套接字本身）。如果我们允许拷贝构造，结果是我们会有两个实例拥有同样的原生套接字；这样我们就需要去处理所有者的问题（让一个实例拥有所有权？或者使用引用计数？还是其他的方法）Boost.Asio选择不允许拷贝（如果你想要创建一个备份，请使用共享指针）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;ip::tcp::socket&gt; socket_ptr;<br><span class="hljs-function">socket_ptr <span class="hljs-title">sock1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> ip::tcp::socket(service))</span></span>;<br><span class="hljs-function">socket_ptr <span class="hljs-title">sock2</span><span class="hljs-params">(sock1)</span></span>; <span class="hljs-comment">// ok</span><br>socket_ptr sock3;<br>sock3 = sock1; <span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><h3 id="套接字缓冲区">套接字缓冲区</h3><p>当从一个套接字读写内容时，你需要一个缓冲区，用来保存读取和写入的数据。缓冲区内存的有效时间必须比I/O操作的时间要长；你需要保证它们在I/O操作结束之前不被释放。<br>对于同步操作来说，这很容易；当然，这个缓冲区在receive和send时都存在。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br>...<br>sock.<span class="hljs-built_in">receive</span>(<span class="hljs-built_in">buffer</span>(buff));<br><span class="hljs-built_in">strcpy</span>(buff, <span class="hljs-string">&quot;ok\n&quot;</span>);<br>sock.<span class="hljs-built_in">send</span>(<span class="hljs-built_in">buffer</span>(buff));<br></code></pre></td></tr></table></figure><p>但是在异步操作时就没这么简单了，看下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 非常差劲的代码 ...</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, std::<span class="hljs-type">size_t</span> read_bytes)</span></span><br><span class="hljs-function"></span>&#123; ... &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br>    sock.<span class="hljs-built_in">async_receive</span>(<span class="hljs-built_in">buffer</span>(buff), on_read);<br>&#125;<br></code></pre></td></tr></table></figure><p>在我们调用*async_receive()*之后，buff就已经超出有效范围，它的内存当然会被释放。当我们开始从套接字接收一些数据时，我们会把它们拷贝到一片已经不属于我们的内存中；它可能会被释放，或者被其他代码重新开辟来存入其他的数据，结果就是：内存冲突。</p><p>对于上面的问题有几个解决方案：</p><ul><li>使用全局缓冲区</li><li>创建一个缓冲区，然后在操作结束时释放它</li><li>使用一个集合对象管理这些套接字和其他的数据，比如缓冲区数组</li></ul><p>第一个方法显然不是很好，因为我们都知道全局变量非常不好。此外，如果两个实例使用同一个缓冲区怎么办？</p><p>下面是第二种方式的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">char</span> * ptr, <span class="hljs-type">const</span> boost::system::error_code &amp; err, std::<span class="hljs-type">size_t</span> read_bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">delete</span>[] ptr;<br>&#125;<br>....<br><span class="hljs-type">char</span> * buff = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">512</span>];<br>sock.<span class="hljs-built_in">async_receive</span>(<span class="hljs-built_in">buffer</span>(buff, <span class="hljs-number">512</span>), boost::<span class="hljs-built_in">bind</span>(on_read,buff,_1,_2))<br></code></pre></td></tr></table></figure><p>或者，如果你想要缓冲区在操作结束后自动超出范围，使用共享指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">shared_buffer</span> &#123;<br>    boost::shared_array&lt;<span class="hljs-type">char</span>&gt; buff;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-built_in">shared_buffer</span>(<span class="hljs-type">size_t</span> size) : <span class="hljs-built_in">buff</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[size]), <span class="hljs-built_in">size</span>(size) &#123;<br>    &#125;<br>    <span class="hljs-function">mutable_buffers_1 <span class="hljs-title">asio_buff</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">buffer</span>(buff.<span class="hljs-built_in">get</span>(), size);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-comment">// 当on_read超出范围时, boost::bind对象被释放了,</span><br><span class="hljs-comment">// 同时也会释放共享指针</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(shared_buffer, <span class="hljs-type">const</span> boost::system::error_code &amp; err, std::<span class="hljs-type">size_t</span> read_bytes)</span> </span>&#123;&#125;<br>sock.<span class="hljs-built_in">async_receive</span>(buff.<span class="hljs-built_in">asio_buff</span>(), boost::<span class="hljs-built_in">bind</span>(on_read,buff,_1,_2));<br></code></pre></td></tr></table></figure><p>shared_buffer类拥有实质的<em>shared_array&lt;&gt;</em>，<em>shared_array&lt;&gt;<em>存在的目的是用来保存</em>shared_buffer</em>实例的拷贝－当最后一个 <em>share_array&lt;&gt;</em> 元素超出范围时，*shared_array&lt;&gt;*就被自动销毁了，而这就是我们想要的结果。</p><p>因为Boost.Asio会给完成处理句柄保留一个拷贝，当操作完成时就会调用这个完成处理句柄，所以你的目的达到了。那个拷贝是一个boost::bind的仿函数，它拥有着实际的<em>shared_buffer</em>实例。这是非常优雅的！</p><p>第三个选择是使用一个连接对象来管理套接字和其他数据，比如缓冲区，通常来说这是正确的解决方案但是非常复杂。在这一章的末尾我们会对这种方法进行讨论。</p><h3 id="缓冲区封装函数">缓冲区封装函数</h3><p>纵观所有代码，你会发现：无论什么时候，当我们需要对一个buffer进行读写操作时，代码会把实际的缓冲区对象封装在一个buffer()方法中，然后再把它传递给方法调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br>sock.<span class="hljs-built_in">async_receive</span>(<span class="hljs-built_in">buffer</span>(buff), on_read);<br></code></pre></td></tr></table></figure><p>基本上我们都会把缓冲区包含在一个类中以便Boost.Asio的方法能遍历这个缓冲区，比方说，使用下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">sock.<span class="hljs-built_in">async_receive</span>(some_buffer, on_read);<br></code></pre></td></tr></table></figure><p>实例<em>some_buffer</em>需要满足一些需求，叫做<em>ConstBufferSequence</em>或者<em>MutableBufferSequence</em>（你可以在Boost.Asio的文档中查看它们）。创建你自己的类去处理这些需求的细节是非常复杂的，但是Boost.Asio已经提供了一些类用来处理这些需求。所以你不用直接访问这些缓冲区，而可以使用*buffer()*方法。</p><p>自信地讲，你可以把下面列出来的类型都包装到一个buffer()方法中：</p><ul><li>一个char[] const 数组</li><li>一个字节大小的void *指针</li><li>一个std::string类型的字符串</li><li>一个POD const数组（POD代表纯数据，这意味着构造器和释放器不做任何操作）</li><li>一个pod数据的std::vector</li><li>一个包含pod数据的boost::array</li><li>一个包含pod数据的std::array</li></ul><p>下面的代码都是有效的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pod_sample</span> &#123; <span class="hljs-type">int</span> i; <span class="hljs-type">long</span> l; <span class="hljs-type">char</span> c; &#125;;<br>...<br><span class="hljs-type">char</span> b1[<span class="hljs-number">512</span>];<br><span class="hljs-type">void</span> * b2 = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">512</span>];<br>std::string b3; b3.<span class="hljs-built_in">resize</span>(<span class="hljs-number">128</span>);<br>pod_sample b4[<span class="hljs-number">16</span>];<br>std::vector&lt;pod_sample&gt; b5; b5.<span class="hljs-built_in">resize</span>(<span class="hljs-number">16</span>);<br>boost::array&lt;pod_sample,16&gt; b6;<br>std::array&lt;pod_sample,16&gt; b7;<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b1), on_read);<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b2,<span class="hljs-number">512</span>), on_read);<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b3), on_read);<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b4), on_read);<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b5), on_read);<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b6), on_read);<br>sock.<span class="hljs-built_in">async_send</span>(<span class="hljs-built_in">buffer</span>(b7), on_read);<br></code></pre></td></tr></table></figure><p>总的来说就是：与其创建你自己的类来处理<em>ConstBufferSequence</em>或者<em>MutableBufferSequence</em>的需求，不如创建一个能在你需要的时候保留缓冲区，然后返回一个mutable_buffers_1实例的类，而我们早在shared_buffer类中就这样做了。</p><h3 id="read-write-connect自由函数">read/write/connect自由函数</h3><p>Boost.Asio提供了处理I/O的自由函数，我们分四组来分析它们。</p><h4 id="connect方法">connect方法</h4><p>这些方法把套接字连接到一个端点。</p><ul><li><em>connect(socket, begin [, end] [, condition])</em>：这个方法遍历队列中从start到end的端点来尝试同步连接。begin迭代器是调用<em>socket_type::resolver::query</em>的返回结果（你可能需要回顾一下端点这个章节）。特别提示end迭代器是可选的；你可以忽略它。你还可以提供一个condition的方法给每次连接尝试之后调用。用法是<em>Iterator connect_condition(const boost::system::error_code &amp; err,Iterator next);</em>。你可以选择返回一个不是<em>next</em>的迭代器，这样你就可以跳过一些端点。</li><li><em>async_connect(socket, begin [, end] [, condition], handler)</em>：这个方法异步地调用连接方法，在结束时，它会调用完成处理方法。用法是<em>void handler(constboost::system::error_code &amp; err, Iterator iterator);</em>。传递给处理方法的第二个参数是连接成功端点的迭代器（或者end迭代器）。</li></ul><p>它的例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio::ip;<br><span class="hljs-function">tcp::resolver <span class="hljs-title">resolver</span><span class="hljs-params">(service)</span></span>;<br>tcp::resolver::iterator iter = resolver.<span class="hljs-built_in">resolve</span>(tcp::resolver::<span class="hljs-built_in">query</span>(<span class="hljs-string">&quot;www.yahoo.com&quot;</span>,<span class="hljs-string">&quot;80&quot;</span>));<br><span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br><span class="hljs-built_in">connect</span>(sock, iter);<br></code></pre></td></tr></table></figure><p>一个主机名可以被解析成多个地址，而<em>connect</em>和<em>async_connect</em>能很好地把你从尝试每个地址然后找到一个可用地址的繁重工作中解放出来，因为它们已经帮你做了这些。</p><h4 id="read-write方法">read/write方法</h4><p>这些方法对一个流进行读写操作（可以是套接字，或者其他表现得像流的类）：</p><ul><li><em>async_read(stream, buffer [, completion] ,handler)</em>：这个方法异步地从一个流读取。结束时其处理方法被调用。处理方法的格式是：<em>void handler(const boost::system::error_ code &amp; err, size_t bytes)</em>;。你可以选择指定一个完成处理方法。完成处理方法会在每个<em>read</em>操作调用成功之后调用，然后告诉Boost.Asio <em>async_read</em>操作是否完成（如果没有完成，它会继续读取）。它的格式是：<em>size_t completion(const boost::system::error_code&amp; err, size_t bytes_transfered) <em>。当这个完成处理方法返回0时，我们认</em>为read</em>操作完成；如果它返回一个非0值，它表示了下一个<em>async_read_some</em>操作需要从流中读取的字节数。接下来会有一个例子来详细展示这些。</li><li><em>async_write(stream, buffer [, completion], handler)</em>：这个方法异步地向一个流写入数据。参数的意义和<em>async_read</em>是一样的。</li><li><em>read(stream, buffer [, completion])</em>：这个方法同步地从一个流中读取数据。参数的意义和<em>async_read</em>是一样的。</li><li><em>write(stream, buffer [, completion])</em>:  这个方法同步地向一个流写入数据。参数的意义和<em>async_read</em>是一样的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">async_read</span>(stream, stream_buffer [, completion], handler)<br><span class="hljs-built_in">async_write</span>(strean, stream_buffer [, completion], handler)<br><span class="hljs-built_in">write</span>(stream, stream_buffer [, completion])<br><span class="hljs-built_in">read</span>(stream, stream_buffer [, completion]) <br></code></pre></td></tr></table></figure><p>首先，要注意第一个参数变成了流，而不单是socket。这个参数包含了socket但不仅仅是socket。比如，你可以用一个Windows的文件句柄来替代socket。<br>当下面情况出现时，所有read和write操作都会结束：</p><ul><li>可用的缓冲区满了（当读取时）或者所有的缓冲区已经被写入（当写入时）</li><li>完成处理方法返回0（如果你提供了这么一个方法）</li><li>错误发生时</li></ul><p>下面的代码会异步地从一个socket中间读取数据直到读取到’\n’：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br><span class="hljs-type">int</span> offset = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">up_to_enter</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; bytes; ++i)<br>        <span class="hljs-keyword">if</span> ( buff[i + offset] == <span class="hljs-string">&#x27;\n&#x27;</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br> &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;, <span class="hljs-type">size_t</span>)</span> </span>&#123;&#125;<br>...<br><span class="hljs-built_in">async_read</span>(sock, <span class="hljs-built_in">buffer</span>(buff), up_to_enter, on_read); <br></code></pre></td></tr></table></figure><p>Boost.Asio也提供了一些简单的完成处理仿函数：</p><ul><li>transfer_at_least(n)</li><li>transfer_exactly(n)</li><li>transfer_all()</li></ul><p>例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>]; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;, <span class="hljs-type">size_t</span>)</span> </span>&#123;&#125; <br><span class="hljs-comment">// 读取32个字节 </span><br><span class="hljs-built_in">async_read</span>(sock, <span class="hljs-built_in">buffer</span>(buff), <span class="hljs-built_in">transfer_exactly</span>(<span class="hljs-number">32</span>), on_read);<br></code></pre></td></tr></table></figure><p>上述的4个方法，不使用普通的缓冲区，而使用由Boost.Asio的<em>std::streambuf</em>类继承来的<em>stream_buffer</em>方法。stl流和流缓冲区非常复杂；下面是例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(streambuf&amp; buf, <span class="hljs-type">const</span> boost::system::error_code &amp;, <span class="hljs-type">size_t</span>)</span> </span>&#123; <br>    <span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;buf)</span></span>;<br>    std::string line;<br>    std::<span class="hljs-built_in">getline</span>(in, line);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;first line: &quot;</span> &lt;&lt; line &lt;&lt; std::endl; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123; <br>    HANDLE file = ::<span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;readme.txt&quot;</span>, GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, <span class="hljs-number">0</span>);<br>    <span class="hljs-function">windows::stream_handle <span class="hljs-title">h</span><span class="hljs-params">(service, file)</span></span>;<br>    streambuf buf;<br>    <span class="hljs-built_in">async_read</span>(h, buf, <span class="hljs-built_in">transfer_exactly</span>(<span class="hljs-number">256</span>), boost::<span class="hljs-built_in">bind</span>(on_read,boost::<span class="hljs-built_in">ref</span>(buf),_1,_2));<br>    service.<span class="hljs-built_in">run</span>(); <br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我向你们展示了如何在一个Windows文件句柄上调用<em>async_read</em>。读取前256个字符，然后把它们保存到缓冲区中，当操作结束时。<em>on_read</em>被调用，再创建<em>std::istream</em>用来传递缓冲区，读取第一行（<em>std::getline</em>），最后把它输出到命令行中。</p><h4 id="read-until-async-read-until方法">read_until/async_read_until方法</h4><p>这些方法在条件满足之前会一直读取：</p><ul><li><em>async_read_until(stream, stream_buffer, delim, handler)</em>:这个方法启动一个异步<em>read</em>操作。<em>read</em>操作会在读取到某个分隔符时结束。分隔符可以是字符,<em>std::string</em>或者<em>boost::regex</em>。处理方法的格式为：<em>void handler(const boost::system::error_code &amp; err, size_t bytes);</em>。</li><li><em>async_read_until(strem, stream_buffer, completion, handler)</em>：这个方法和之前的方法是一样的，但是没有分隔符，而是一个完成处理方法。完成处理方法的格式为：<em>pair&lt; iterator,bool &gt; completion(iterator begin, iterator end);</em>，其中迭代器的类型为<em>buffers_iterator&lt; streambuf::const_buffers_type &gt;</em>。你需要记住的是这个迭代器是支持随机访问的。你扫描整个区间（begin，end），然后决定read操作是否应该结束。返回的结果是一个结果对，第一个成员是一个迭代器，它指向最后被这个方法访问的字符；第二个成员指定read操作是否需要结束，需要时返回true，否则返回false。</li><li><em>read_until(stream, stream_buffer, delim)</em>：这个方法执行一个同步的<em>read</em>操作，参数的意义和<em>async_read_until</em>一样。</li><li><em>read_until(stream, stream_buffer, completion)</em>：这个方法执行一个同步的read操作，参数的意义和<em>async_read_until</em>一样。</li></ul><p>下面这个例子在读到一个指定的标点符号之前会一直读取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> buffers_iterator&lt;streambuf::const_buffers_type&gt; iterator;<br><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">match_punct</span><span class="hljs-params">(iterator begin, iterator end)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( begin != end)<br>        <span class="hljs-keyword">if</span> ( std::<span class="hljs-built_in">ispunct</span>(*begin))<br>            <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_pair</span>(begin,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_pair</span>(end,<span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;, <span class="hljs-type">size_t</span>)</span> </span>&#123;&#125;<br>...<br>streambuf buf;<br><span class="hljs-built_in">async_read_until</span>(sock, buf, match_punct, on_read);<br></code></pre></td></tr></table></figure><p>如果我们想读到一个空格时就结束，我们需要把最后一行修改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">async_read_until</span>(sock, buff, <span class="hljs-string">&#x27; &#x27;</span>, on_read);<br></code></pre></td></tr></table></figure><h4 id="at方法">*_at方法</h4><p>这些方法用来在一个流上面做随机存取操作。由你来指定<em>read</em>和<em>write</em>操作从什么地方开始（<em>offset</em>）：</p><ul><li><em>async_read_at(stream, offset, buffer [, completion], handler)</em>：这个方法在指定的流的offset处开始执行一个异步的read操作，当操作结束时，它会调用handler。handler的格式为：<em>void handler(const boost::system::error_code&amp;  err, size_t bytes);</em>。<em>buffer</em>可以是普通的<em>wrapper()<em>封装或者</em>streambuf</em>方法。如果你指定一个completion方法，它会在每次read操作成功之后调用，然后告诉Boost.Asio <em>async_read_at</em>操作已经完成（如果没有，则继续读取）。它的格式为：<em>size_t  completion(const boost::system::error_code&amp; err, size_t bytes);</em>。当completion方法返回0时，我们认为<em>read</em>操作完成了；如果返回一个非零值，它代表了下一次调用流的<em>async_read_some_at</em>方法的最大读取字节数。</li><li><em>async_write_at(stream, offset, buffer [, completion], handler)</em>：这个方法执行一个异步的write操作。参数的意义和<em>async_read_at</em>是一样的</li><li><em>read_at(stream, offset, buffer [, completion])</em>：这个方法在一个执行的流上，指定的<em>offset</em>处开始read。参数的意义和<em>async_read_at</em>是一样的</li><li><em>write_at(stream, offset, buffer [, completion])</em>：这个方法在一个执行的流上，指定的<em>offset</em>处开始write。参数的意义和<em>async_read_at</em>是一样的</li></ul><p>这些方法不支持套接字。它们用来处理流的随机访问；也就是说，流是可以随机访问的。套接字显然不是这样（套接字是不可回溯的）。</p><p>下面这个例子告诉你怎么从一个文件偏移为256的位置读取128个字节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    HANDLE file = ::<span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;readme.txt&quot;</span>, GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, <span class="hljs-number">0</span>);<br>    <span class="hljs-function">windows::random_access_handle <span class="hljs-title">h</span><span class="hljs-params">(service, file)</span></span>;<br>    streambuf buf;<br>    <span class="hljs-built_in">read_at</span>(h, <span class="hljs-number">256</span>, buf, <span class="hljs-built_in">transfer_exactly</span>(<span class="hljs-number">128</span>));<br>    <span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;buf)</span></span>;<br>    std::string line;<br>    std::<span class="hljs-built_in">getline</span>(in, line);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;first line: &quot;</span> &lt;&lt; line &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异步编程">异步编程</h3><p>这部分对异步编程时可能碰到的一些问题进行了深入的探究。我建议你先读一遍，然后在接下来读这本书的过程中，再经常回过头来看看，从而增强你对这部分的理解。</p><h4 id="异步的需求">异步的需求</h4><p>就像我之前所说的，同步编程比异步编程简单很多。这是因为，线性的思考是很简单的（调用A，调用A结束，调用B，调用B结束，然后继续，这是以事件处理的方式来思考）。后面你会碰到这种情况，比如：五件事情，你不知道它们执行的顺序，也不知道他们是否会执行！</p><p>尽管异步编程更难，但是你会更倾向于选择使用它，比如：写一个需要处理很多并发访问的服务端。并发访问越多，异步编程就比同步编程越简单。</p><p>假设：你有一个需要处理1000个并发访问的应用，从客户端发给服务端的每个信息都会再返回给客户端，以‘\n’结尾。</p><p>同步方式的代码，1个线程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">client</span> &#123;<br>    ip::tcp::socket sock;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 每个信息最多这么大</span><br>    <span class="hljs-type">int</span> already_read; <span class="hljs-comment">// 你已经读了多少</span><br>&#125;;<br>std::vector&lt;client&gt; clients;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>)<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; clients.<span class="hljs-built_in">size</span>(); ++i)<br>            <span class="hljs-keyword">if</span> ( clients[i].sock.<span class="hljs-built_in">available</span>() ) <span class="hljs-built_in">on_read</span>(clients[i]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(client &amp; c)</span> </span>&#123;<br>    <span class="hljs-type">int</span> to_read = std::<span class="hljs-built_in">min</span>( <span class="hljs-number">1024</span> - c.already_read, c.sock.<span class="hljs-built_in">available</span>());<br>    c.sock.<span class="hljs-built_in">read_some</span>( <span class="hljs-built_in">buffer</span>(c.buff + c.already_read, to_read));<br>    c.already_read += to_read;<br>    <span class="hljs-keyword">if</span> ( std::<span class="hljs-built_in">find</span>(c.buff, c.buff + c.already_read, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; c.buff + c.already_read) &#123;<br>        <span class="hljs-type">int</span> pos = std::<span class="hljs-built_in">find</span>(c.buff, c.buff + c.already_read, <span class="hljs-string">&#x27;\n&#x27;</span>) - c.buff;<br>        <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(c.buff, c.buff + pos)</span></span>;<br>        std::<span class="hljs-built_in">copy</span>(c.buff + pos, c.buff + <span class="hljs-number">1024</span>, c.buff);<br>        c.already_read -= pos;<br>        <span class="hljs-built_in">on_read_msg</span>(c, msg);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read_msg</span><span class="hljs-params">(client &amp; c, <span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-comment">// 分析消息，然后返回</span><br>    <span class="hljs-keyword">if</span> ( msg == <span class="hljs-string">&quot;request_login&quot;</span>)<br>        c.sock.<span class="hljs-built_in">write</span>( <span class="hljs-string">&quot;request_ok\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>有一种情况是在任何服务端（和任何基于网络的应用）都需要避免的，就是代码无响应的情况。在我们的例子里，我们需要*handle_clients()*方法尽可能少的阻塞。如果方法在某个点上阻塞，任何进来的信息都需要等待方法解除阻塞才能被处理。</p><p>为了保持响应，只在一个套接字有数据的时候我们才读，也就是说，<em>if ( clients[i].sock.available() ) on_read(clients[i])</em>。在<em>on_read</em>时，我们只读当前可用的；调用*read_until(c.sock, buffer(…),  ‘\n’)*会是一个非常糟糕的选择，因为直到我们从一个指定的客户端读取了完整的消息之前，它都是阻塞的（我们永远不知道它什么时候会读取到完整的消息）</p><p>这里的瓶颈就是*on_read_msg()<em>方法；当它执行时，所有进来的消息都在等待。一个良好的</em>on_read_msg()*方法实现会保证这种情况基本不会发生，但是它还是会发生（有时候向一个套接字写入数据，缓冲区满了时，它会被阻塞）<br>同步方式的代码，10个线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">client</span> &#123;<br>　  <span class="hljs-comment">// ... 和之前一样</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">set_reading</span><span class="hljs-params">()</span> </span>&#123;<br>        boost::<span class="hljs-function">mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>        <span class="hljs-keyword">if</span> ( is_reading_) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 已经在读取</span><br>        <span class="hljs-keyword">else</span> &#123; is_reading_ = <span class="hljs-literal">true</span>; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unset_reading</span><span class="hljs-params">()</span> </span>&#123;<br>        boost::<span class="hljs-function">mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>        is_reading_ = <span class="hljs-literal">false</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    boost::mutex cs_;<br>    <span class="hljs-type">bool</span> is_reading_;<br>&#125;;<br>std::vector&lt;client&gt; clients;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>        boost::<span class="hljs-built_in">thread</span>( handle_clients_thread);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_clients_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>)<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; clients.<span class="hljs-built_in">size</span>(); ++i)<br>            <span class="hljs-keyword">if</span> ( clients[i].sock.<span class="hljs-built_in">available</span>() )<br>                <span class="hljs-keyword">if</span> ( clients[i].<span class="hljs-built_in">set_reading</span>()) &#123;<br>                    <span class="hljs-built_in">on_read</span>(clients[i]);<br>                    clients[i].<span class="hljs-built_in">unset_reading</span>();<br>                &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(client &amp; c)</span> </span>&#123;<br>    <span class="hljs-comment">// 和之前一样</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read_msg</span><span class="hljs-params">(client &amp; c, <span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-comment">// 和之前一样</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为了使用多线程，我们需要对线程进行同步，这就是*set_reading()<em>和</em>set_unreading()*所做的。<em>set_reading()<em>方法非常重要，比如你想要一步实现“判断是否在读取然后标记为读取中”。但这是有两步的（“判断是否在读取”和“标记为读取中”），你可能会有两个线程同时为一个客户端判断是否在读取，然后你会有两个线程同时为一个客户端调用</em>on_read</em>，结果就是数据冲突甚至导致应用崩溃。</p><p>你会发现代码变得极其复杂。</p><p>同步编程有第三个选择，就是为每个连接开辟一个线程。但是当并发的线程增加时，这就成了一种灾难性的情况。</p><p>然后，让我们来看异步编程。我们不断地异步读取。当一个客户端请求某些东西时，<em>on_read</em>被调用，然后回应，然后等待下一个请求（然后开始另外一个异步的read操作）。</p><p>异步方式的代码，10个线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">client</span> &#123;<br>    ip::tcp::socket sock;<br>    streambuf buff; <span class="hljs-comment">// 从客户端取回结果</span><br>&#125;<br>std::vector&lt;client&gt; clients;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; clients.<span class="hljs-built_in">size</span>(); ++i)<br>        <span class="hljs-built_in">async_read_until</span>(clients[i].sock, clients[i].buff, <span class="hljs-string">&#x27;\n&#x27;</span>, boost::<span class="hljs-built_in">bind</span>(on_read, clients[i], _1, _2));<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>        boost::<span class="hljs-built_in">thread</span>(handle_clients_thread);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_clients_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(client &amp; c, <span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> read_bytes)</span> </span>&#123;<br>    <span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;c.buff)</span></span>;<br>    std::string msg;<br>    std::<span class="hljs-built_in">getline</span>(in, msg);<br>    <span class="hljs-keyword">if</span> ( msg == <span class="hljs-string">&quot;request_login&quot;</span>)<br>        c.sock.<span class="hljs-built_in">async_write</span>( <span class="hljs-string">&quot;request_ok\n&quot;</span>, on_write);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ...<br>    ...<br>    <span class="hljs-comment">// 等待同一个客户端下一个读取操作</span><br>    <span class="hljs-built_in">async_read_until</span>(c.sock, c.buff, <span class="hljs-string">&#x27;\n&#x27;</span>, boost::<span class="hljs-built_in">bind</span>(on_read, c, _1, _2));<br>&#125;<br></code></pre></td></tr></table></figure><p>发现代码变得有多简单了吧？client结构里面只有两个成员，<em>handle_clients()<em>仅仅调用了</em>async_read_until</em>，然后它创建了10个线程，每个线程都调用<em>service.run()</em>。这些线程会处理所有来自客户端的异步read操作，然后分发所有向客户端的异步write操作。另外需要注意的一件事情是：*on_read()*一直在为下一次异步read操作做准备（看最后一行代码）。</p><h4 id="异步run-run-one-poll-poll-one">异步run(), run_one(), poll(), poll_ one()</h4><p>为了实现监听循环，<em>io_service</em>类提供了4个方法，比如：<em>run(), run_one(), poll()<em>和</em>poll_one()</em>。虽然大多数时候使用*service.run()*就可以，但是你还是需要在这里学习其他方法实现的功能。</p><h5 id="持续运行">持续运行</h5><p>再一次说明，如果有等待执行的操作，<em>run()<em>会一直执行，直到你手动调用</em>io_service::stop()</em>。为了保证<em>io_service</em>一直执行，通常你添加一个或者多个异步操作，然后在它们被执行时，你继续一直不停地添加异步操作，比如下面代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br><span class="hljs-type">char</span> buff_read[<span class="hljs-number">1024</span>], buff_write[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;ok&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;err, std::<span class="hljs-type">size_t</span> bytes)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;err, std::<span class="hljs-type">size_t</span> bytes)</span></span><br><span class="hljs-function"></span>&#123;<br>    sock.<span class="hljs-built_in">async_read_some</span>(<span class="hljs-built_in">buffer</span>(buff_read), on_read);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;err, std::<span class="hljs-type">size_t</span> bytes)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ... 处理读取操作 ...</span><br>    sock.<span class="hljs-built_in">async_write_some</span>(<span class="hljs-built_in">buffer</span>(buff_write,<span class="hljs-number">3</span>), on_write);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_connect</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;err)</span> </span>&#123;<br>    sock.<span class="hljs-built_in">async_read_some</span>(<span class="hljs-built_in">buffer</span>(buff_read), on_read);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">2001</span>)</span></span>;<br>    sock.<span class="hljs-built_in">async_connect</span>(ep, on_connect);<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>当*service.run()*被调用时，有一个异步操作在等待。</li><li>当socket连接到服务端时，<em>on_connect</em>被调用了，它会添加一个异步操作。</li><li>当<em>on_connect</em>结束时，我们会留下一个等待的操作（<em>read</em>）。</li><li>当<em>on_read</em>被调用时，我们写入一个回应，这又添加了另外一个等待的操作。</li><li>当<em>on_read</em>结束时，我们会留下一个等待的操作*（write*）。</li><li>当<em>on_write</em>操作被调用时，我们从服务端读取另外一个消息，这也添加了另外一个等待的操作。</li><li>当<em>on_write</em>结束时，我们有一个等待的操作（read）。</li><li>然后一直继续循环下去，直到我们关闭这个应用。</li></ol><h5 id="run-one-poll-poll-one-方法">run_one(), poll(), poll_one() 方法</h5><p>我在之前说过异步方法的handler是在调用了<em>io_service::run</em>的线程里被调用的。因为在至少90%～95%的时候，这是你唯一要用到的方法，所以我就把它说得简单了。对于调用了*run_one(), poll()<em>或者</em>poll_one()*的线程这一点也是适用的。</p><p>*run_one()*方法最多执行和分发一个异步操作：</p><ul><li>如果没有等待的操作，方法立即返回0</li><li>如果有等待操作，方法在第一个操作执行之前处于阻塞状态，然后返回1</li></ul><p>你可以认为下面两段代码是等效的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>service.<span class="hljs-built_in">run</span>(); <span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">while</span> ( !service.<span class="hljs-built_in">stopped</span>()) service.<span class="hljs-built_in">run_once</span>();<br></code></pre></td></tr></table></figure><p>你可以使用*run_once()*启动一个异步操作，然后等待它执行完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br><span class="hljs-type">bool</span> write_complete = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span></span><br><span class="hljs-function"></span>&#123; write_complete = <span class="hljs-literal">true</span>; &#125;<br> …<br>std::string data = <span class="hljs-string">&quot;login ok&quot;</span>;<br>write_complete = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">async_write</span>(sock, <span class="hljs-built_in">buffer</span>(data), on_write);<br><span class="hljs-keyword">do</span> service.<span class="hljs-built_in">run_once</span>() <span class="hljs-keyword">while</span> (!write_complete);<br></code></pre></td></tr></table></figure><p>还有一些使用<em>run_one()<em>方法的例子，包含在Boost.Asio诸如</em>blocking_tcp_client.cpp</em>和<em>blocking_udp_client.cpp</em>的文件中。</p><p><em>poll_one</em>方法以非阻塞的方式最多运行一个准备好的等待操作：</p><ul><li>如果至少有一个等待的操作，而且准备好以非阻塞的方式运行，poll_one方法会运行它并且返回1</li><li>否则，方法立即返回0</li></ul><p>操作正在等待并准备以非阻塞方式运行，通常意味着如下的情况：</p><ul><li>一个计时器过期了，然后它的<em>async_wait</em>处理方法需要被调用</li><li>一个I/O操作完成了（比如<em>async_read</em>），然后它的hanlder需要被调用</li><li>之前被加入<em>io_services</em>实例队列中的自定义handler（这会在之后的章节中详解）</li></ul><p>你可以使用<em>poll_one</em>去保证所有I/O操作的handler完成运行，同时做一些其他的工作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br><span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">// 运行所有完成了IO操作的handler</span><br>    <span class="hljs-keyword">while</span> ( service.<span class="hljs-built_in">poll_one</span>()) ;<br>    <span class="hljs-comment">// ... 在这里做其他的事情 …</span><br>&#125; <br></code></pre></td></tr></table></figure><p>*poll()*方法会以非阻塞的方式运行所有等待的操作。下面两段代码是等效的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>service.<span class="hljs-built_in">poll</span>(); <span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">while</span> ( service.<span class="hljs-built_in">poll_one</span>()) ;<br></code></pre></td></tr></table></figure><p>所有上述方法都会在失败的时候抛出<em>boost::system::system_error</em>异常。这是我们所不希望发生的事情；这里抛出的异常通常都是致命的，也许是资源耗尽，或者是你handler的其中一个抛出了异常。另外，每个方法都有一个不抛出异常，而是返回一个<em>boost::system::error_code</em>的重载：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>boost::system::error_code err = <span class="hljs-number">0</span>;<br>service.<span class="hljs-built_in">run</span>(err);<br><span class="hljs-keyword">if</span> ( err) std::cout &lt;&lt; <span class="hljs-string">&quot;Error &quot;</span> &lt;&lt; err &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h4 id="异步工作">异步工作</h4><p>异步工作不仅仅指用异步地方式接受客户端到服务端的连接、异步地从一个socket读取或者写入到socket。它包含了所有可以异步执行的操作。</p><p>默认情况下，你是不知道每个异步handler的调用顺序的。除了通常的异步调用（来自异步socket的读取/写入/接收）。你可以使用*service.post()*来使你的自定义方法被异步地调用。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/thread.hpp&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/bind.hpp&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/asio.hpp&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;func called, i= &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">worker_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>        service.<span class="hljs-built_in">post</span>(boost::<span class="hljs-built_in">bind</span>(func, i));<br>    boost::thread_group threads;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)<br>        threads.<span class="hljs-built_in">create_thread</span>(worker_thread);<br>    <span class="hljs-comment">// 等待所有线程被创建完</span><br>    boost::this_thread::<span class="hljs-built_in">sleep</span>( boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">500</span>));<br>    threads.<span class="hljs-built_in">join_all</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，*service.post(some_function)*添加了一个异步方法调用。</p><p>这个方法在某一个调用了<em>service.run()<em>的线程中请求</em>io_service</em>实例，然后调用给定的<em>some_funtion</em>之后立即返回。在我们的例子中，这个线程是我们之前创建的三个线程中的一个。你不能确定异步方法调用的顺序。你不要期待它们会以我们调用*post()*方法的顺序来调用。下面是运行之前代码可能得到的结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">func called, i= <span class="hljs-number">0</span><br>func called, i= <span class="hljs-number">2</span><br>func called, i= <span class="hljs-number">1</span><br>func called, i= <span class="hljs-number">4</span><br>func called, i= <span class="hljs-number">3</span><br>func called, i= <span class="hljs-number">6</span><br>func called, i= <span class="hljs-number">7</span><br>func called, i= <span class="hljs-number">8</span><br>func called, i= <span class="hljs-number">5</span><br>func called, i= <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>有时候你会想让一些异步处理方法顺序执行。比如，你去一个餐馆（<em>go_to_restaurant</em>），下单（<em>order</em>），然后吃（<em>eat</em>）。你需要先去餐馆，然后下单，最后吃。这样的话，你需要用到<em>io_service::strand</em>，这个方法会让你的异步方法被顺序调用。看下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;func called, i= &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; boost::this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">worker_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">io_service::strand <span class="hljs-title">strand_one</span><span class="hljs-params">(service)</span>, <span class="hljs-title">strand_two</span><span class="hljs-params">(service)</span></span>;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>        service.<span class="hljs-built_in">post</span>( strand_one.<span class="hljs-built_in">wrap</span>( boost::<span class="hljs-built_in">bind</span>(func, i)));<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>        service.<span class="hljs-built_in">post</span>( strand_two.<span class="hljs-built_in">wrap</span>( boost::<span class="hljs-built_in">bind</span>(func, i)));<br>    boost::thread_group threads;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)<br>        threads.<span class="hljs-built_in">create_thread</span>(worker_thread);<br>    <span class="hljs-comment">// 等待所有线程被创建完</span><br>    boost::this_thread::<span class="hljs-built_in">sleep</span>( boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">500</span>));<br>    threads.<span class="hljs-built_in">join_all</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，我们保证前面的5个线程和后面的5个线程是顺序执行的。<em>func called, i = 0</em>在<em>func called, i = 1</em>之前被调用，然后调用<em>func called, i = 2</em>……同样<em>func  called, i = 5</em>在<em>func called, i = 6</em>之前，<em>func called, i = 6</em>在<em>func called, i = 7</em>被调用……你需要注意的是尽管方法是顺序调用的，但是不意味着它们都在同一个线程执行。运行这个程序可能得到的一个结果如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">func called, i= <span class="hljs-number">0</span>/<span class="hljs-number">002</span>A60C8<br>func called, i= <span class="hljs-number">5</span>/<span class="hljs-number">002</span>A6138<br>func called, i= <span class="hljs-number">6</span>/<span class="hljs-number">002</span>A6530<br>func called, i= <span class="hljs-number">1</span>/<span class="hljs-number">002</span>A6138<br>func called, i= <span class="hljs-number">7</span>/<span class="hljs-number">002</span>A6530<br>func called, i= <span class="hljs-number">2</span>/<span class="hljs-number">002</span>A6138<br>func called, i= <span class="hljs-number">8</span>/<span class="hljs-number">002</span>A6530<br>func called, i= <span class="hljs-number">3</span>/<span class="hljs-number">002</span>A6138<br>func called, i= <span class="hljs-number">9</span>/<span class="hljs-number">002</span>A6530<br>func called, i= <span class="hljs-number">4</span>/<span class="hljs-number">002</span>A6138<br></code></pre></td></tr></table></figure><h4 id="异步post-VS-dispatch-VS-wrap">异步post() VS dispatch() VS wrap()</h4><p>Boost.Asio提供了三种让你把处理方法添加为异步调用的方式：</p><ul><li><em>service.post(handler)</em>：这个方法能确保其在请求<em>io_service</em>实例，然后调用指定的处理方法之后立即返回。handler稍后会在某个调用了*service.run()*的线程中被调用。</li><li><em>service.dispatch(handler)</em>：这个方法请求<em>io_service</em>实例去调用给定的处理方法，但是另外一点，如果当前的线程调用了<em>service.run()</em>，它可以在方法中直接调用handler。</li><li><em>service.wrap(handler)</em>：这个方法创建了一个封装方法，当被调用时它会调用<em>service.dispatch(handler)</em>，这个会让人有点困惑，接下来我会简单地解释它是什么意思。</li></ul><p>在之前的章节中你会看到关于*service.post()<em>的一个例子，以及运行这个例子可能得到的一种结果。我们对它做一些修改，然后看看</em>service.dispatch()*是怎么影响输出的结果的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;func called, i= &quot;</span> &lt;&lt; i &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run_dispatch_and_post</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i += <span class="hljs-number">2</span>) &#123;<br>    service.<span class="hljs-built_in">dispatch</span>(boost::<span class="hljs-built_in">bind</span>(func, i));<br>    service.<span class="hljs-built_in">post</span>(boost::<span class="hljs-built_in">bind</span>(func, i + <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    service.<span class="hljs-built_in">post</span>(run_dispatch_and_post);<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在解释发生了什么之前，我们先运行程序，观察结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">func called, i= <span class="hljs-number">0</span><br>func called, i= <span class="hljs-number">2</span><br>func called, i= <span class="hljs-number">4</span><br>func called, i= <span class="hljs-number">6</span><br>func called, i= <span class="hljs-number">8</span><br>func called, i= <span class="hljs-number">1</span><br>func called, i= <span class="hljs-number">3</span><br>func called, i= <span class="hljs-number">5</span><br>func called, i= <span class="hljs-number">7</span><br>func called, i= <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>偶数先输出，然后是奇数。这是因为我用<em>dispatch()<em>输出偶数，然后用</em>post()<em>输出奇数。<em>dispatch()<em>会在返回之前调用hanlder，因为当前的线程调用了</em>service.run()</em>，而</em>post()<em>每次都立即返回了。<br>现在，让我们讲讲</em>service.wrap(handler)</em>。*wrap()*返回了一个仿函数，它可以用来做另外一个方法的参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dispatched_func_1</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;dispatched 1&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dispatched_func_2</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;dispatched 2&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(boost::function&lt;<span class="hljs-type">void</span>()&gt; func)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;test&quot;</span> &lt;&lt; std::endl;<br>    service.<span class="hljs-built_in">dispatch</span>(dispatched_func_1);<br>    <span class="hljs-built_in">func</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">service_run</span><span class="hljs-params">()</span> </span>&#123;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-built_in">test</span>( service.<span class="hljs-built_in">wrap</span>(dispatched_func_2));<br>    <span class="hljs-function">boost::thread <span class="hljs-title">th</span><span class="hljs-params">(service_run)</span></span>;<br>    boost::this_thread::<span class="hljs-built_in">sleep</span>( boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">500</span>));<br>    th.<span class="hljs-built_in">join</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><em>test(service.wrap(dispatched_func_2));<em>会把</em>dispatched_ func_2</em>包装起来创建一个仿函数，然后传递给<em>test</em>当作一个参数。当<em>test()<em>被调用时，它会分发调用方法1，然后调用</em>func()</em>。这时，你会发现调用*func()<em>和</em>service.dispatch(dispatched_func_2)*是等价的，因为它们是连续调用的。程序的输出证明了这一点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">test<br>dispatched <span class="hljs-number">1</span><br>dispatched <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>*io_service::strand <em>类（用来序列化异步调用）也包含了</em>poll(), dispatch()<em>和 <em>wrap()<em>等成员函数。它们的作用和</em>io_service</em>的</em>poll(), dispatch()<em>和</em>wrap()<em>是一样的。然而，大多数情况下你只需要把</em>io_service::strand::wrap()<em>方法做为</em>io_service::poll()<em>或者</em>io_service::dispatch()*方法的参数即可。</p><h3 id="保持活动">保持活动</h3><p>假设你需要做下面的操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br>...<br><span class="hljs-built_in">read</span>(sock, <span class="hljs-built_in">buffer</span>(buff));<br></code></pre></td></tr></table></figure><p>在这个例子中，<em>sock</em>和<em>buff</em>的存在时间都必须比*read()<em>调用的时间要长。也就是说，在调用</em>read()*返回之前，它们都必须有效。这就是你所期望的；你传给一个方法的所有参数在方法内部都必须有效。当我们采用异步方式时，事情会变得比较复杂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;, <span class="hljs-type">size_t</span>)</span> </span>&#123;&#125;<br>...<br><span class="hljs-built_in">async_read</span>(sock, <span class="hljs-built_in">buffer</span>(buff), on_read);<br></code></pre></td></tr></table></figure><p>在这个例子中，<em>sock</em>和<em>buff</em>的存在时间都必须比*read()*操作本身时间要长，但是read操作持续的时间我们是不知道的，因为它是异步的。</p><p>当使用socket缓冲区的时候，你会有一个<em>buffer</em>实例在异步调用时一直存在（使用<em>boost::shared_array&lt;&gt;</em>）。在这里，我们可以使用同样的方式，通过创建一个类并在其内部管理socket和它的读写缓冲区。然后，对于所有的异步操作，传递一个包含智能指针的<em>boost::bind</em>仿函数给它：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">connection</span> : boost::enable_shared_from_this&lt;connection&gt; &#123;<br>    <span class="hljs-keyword">typedef</span> boost::system::error_code error_code;<br>    <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;connection&gt; ptr;<br>    <span class="hljs-built_in">connection</span>() : <span class="hljs-built_in">sock_</span>(service), <span class="hljs-built_in">started_</span>(<span class="hljs-literal">true</span>) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep)</span> </span>&#123;<br>        sock_.<span class="hljs-built_in">async_connect</span>(ep, boost::<span class="hljs-built_in">bind</span>(&amp;connection::on_connect, <span class="hljs-built_in">shared_from_this</span>(), _1));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-keyword">return</span>;<br>        started_ = <span class="hljs-literal">false</span>;<br>        sock_.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">started</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> started_; &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_connect</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err)</span> </span>&#123;<br>        <span class="hljs-comment">// 这里你决定用这个连接做什么: 读取或者写入</span><br>        <span class="hljs-keyword">if</span> ( !err) <span class="hljs-built_in">do_read</span>();<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">stop</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(read_buffer_, bytes)</span></span>;<br>        <span class="hljs-keyword">if</span> ( msg == <span class="hljs-string">&quot;can_login&quot;</span>) <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;access_data&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;data &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">process_data</span>(msg);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg == <span class="hljs-string">&quot;login_fail&quot;</span>) <span class="hljs-built_in">stop</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>        <span class="hljs-built_in">do_read</span>(); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">()</span> </span>&#123;<br>        sock_.<span class="hljs-built_in">async_read_some</span>(<span class="hljs-built_in">buffer</span>(read_buffer_), boost::<span class="hljs-built_in">bind</span>(&amp;connection::on_read, <span class="hljs-built_in">shared_from_this</span>(),   _1, _2)); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 注意: 因为在做另外一个async_read操作之前你想要发送多个消息, </span><br>        <span class="hljs-comment">// 所以你需要多个写入buffer</span><br>        std::<span class="hljs-built_in">copy</span>(msg.<span class="hljs-built_in">begin</span>(), msg.<span class="hljs-built_in">end</span>(), write_buffer_);<br>        sock_.<span class="hljs-built_in">async_write_some</span>(<span class="hljs-built_in">buffer</span>(write_buffer_, msg.<span class="hljs-built_in">size</span>()), boost::<span class="hljs-built_in">bind</span>(&amp;connection::on_write, <span class="hljs-built_in">shared_from_this</span>(), _1, _2)); <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_data</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>        <span class="hljs-comment">// 处理服务端来的内容，然后启动另外一个写入操作</span><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">char</span> read_buffer_[max_msg];<br>    <span class="hljs-type">char</span> write_buffer_[max_msg];<br>    <span class="hljs-type">bool</span> started_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8001</span>)</span></span>;<br>    connection::<span class="hljs-built_in">ptr</span>(<span class="hljs-keyword">new</span> connection)-&gt;<span class="hljs-built_in">start</span>(ep);<br>&#125; <br></code></pre></td></tr></table></figure><p>在所有异步调用中，我们传递一个<em>boost::bind</em>仿函数当作参数。这个仿函数内部包含了一个智能指针，指向<em>connection</em>实例。只要有一个异步操作等待时，Boost.Asio就会保存<em>boost::bind</em>仿函数的拷贝，这个拷贝保存了指向连接实例的一个智能指针，从而保证<em>connection</em>实例保持活动。问题解决！</p><p>当然，<em>connection</em>类仅仅是一个框架类；你需要根据你的需求对它进行调整（它看起来会和当前服务端例子的情况相当不同）。</p><p>你需要注意的是创建一个新的连接是相当简单的：<em>connection::ptr(new connection)- &gt;start(ep)</em>。这个方法启动了到服务端的（异步）连接。当你需要关闭这个连接时，调用<em>stop()</em>。</p><p>当实例被启动时（<em>start()</em>），它会等待客户端的连接。当连接发生时。*on_connect()<em>被调用。如果没有错误发生，它启动一个read操作（<em>do_read()</em>）。当read操作结束时，你就可以解析这个消息；当然你应用的</em>on_read()<em>看起来会各种各样。而当你写回一个消息时，你需要把它拷贝到缓冲区，然后像我在</em>do_write()*方法中所做的一样将其发送出去，因为这个缓冲区同样需要在这个异步写操作中一直存活。最后需要注意的一点——当写回时，你需要指定写入的数量，否则，整个缓冲区都会被发送出去。</p><h3 id="总结-2">总结</h3><p>网络api实际上要繁杂得多，这个章节只是做为一个参考，当你在实现自己的网络应用时可以回过头来看看。</p><p>Boost.Asio实现了端点的概念，你可以认为是IP和端口。如果你不知道准确的IP，你可以使用<em>resolver</em>对象将主机名，例如<em><a href="http://www.yahoo.com">www.yahoo.com</a></em>转换为一个或多个IP地址。</p><p>我们也可以看到API的核心——socket类。Boost.Asio提供了<em>TCP、UDP</em>和 <em>ICMP</em>的实现。而且你还可以用你自己的协议来对它进行扩展；当然，这个工作不适合缺乏勇气的人。</p><p>异步编程是刚需。你应该已经明白为什么有时候需要用到它，尤其在写服务端的时候。调用<em>service.run()<em>来实现异步循环就已经可以让你很满足，但是有时候你需要更进一步，尝试使用</em>run_one()、poll()<em>或者</em>poll_one()</em>。</p><p>当实现异步时，你可以异步执行你自己的方法；使用<em>service.post()<em>或者</em>service.dispatch()</em>。</p><p>最后，为了使socket和缓冲区（read或者write）在整个异步操作的生命周期中一直活动，我们需要采取特殊的防护措施。你的连接类需要继承自<em>enabled_shared_from_this</em>，然后在内部保存它需要的缓冲区，而且每次异步调用都要传递一个智能指针给<em>this</em>操作。</p><p>下一章会进行实战操作；在实现回显客户端/服务端应用时会有大量的编程实践。</p><h2 id="回显服务端-客户端">回显服务端/客户端</h2><p>在这一章，我们将会实现一个小的客户端/服务端应用，这可能会是你写过的最简单的客户端/服务端应用。回显应用就是一个把客户端发过来的任何内容回显给其本身，然后关闭连接的的服务端。这个服务端可以处理任何数量的客户端。每个客户端连接之后发送一个消息，服务端接收到完成消息后把它发送回去。在那之后，服务端关闭连接。</p><p>因此，每个回显客户端连接到服务端，发送一个消息，然后读取服务端返回的结果，确保这是它发送给服务端的消息就结束和服务端的会话。</p><p>我们首先实现一个同步应用，然后实现一个异步应用，以便你可以很容易对比他们：</p><p><img src="http://d.pcs.baidu.com/thumbnail/3ed527792035c0abc0d8e70405180310?fid=3238002958-250528-552015406596888&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-jmDoVsCZ6Qw1kecSlrmm13%2BuoY0%3D&amp;rt=sh&amp;expires=2h&amp;r=776548562&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>为了节省空间，下面的代码有一些被裁剪掉了。你可以在附加在这本书的代码中看到全部的代码。</p><h3 id="TCP回显服务端-客户端">TCP回显服务端/客户端</h3><p>对于TCP而言，我们需要一个额外的保证；每一个消息以换行符结束(‘\n’)。编写一个同步回显服务端/客户端非常简单。</p><p>我们会展示编码内容，比如同步客户端，同步服务端，异步客户端和异步服务端。</p><h4 id="TCP同步客户端">TCP同步客户端</h4><p>在大多数有价值的例子中，客户端通常比服务端编码要简单（因为服务端需要处理多个客户端请求）。<br>下面的代码展示了不符合这条规则的一个例外：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">char</span> * buf, <span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> found = std::<span class="hljs-built_in">find</span>(buf, buf + bytes, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; buf + bytes;<br>    <span class="hljs-comment">// 我们一个一个读取直到读到回车，不缓存</span><br>    <span class="hljs-keyword">return</span> found ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sync_echo</span><span class="hljs-params">(std::string msg)</span> </span>&#123;<br>    msg += <span class="hljs-string">&quot;\n&quot;</span>;<br>    ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>    sock.<span class="hljs-built_in">connect</span>(ep);<br>    sock.<span class="hljs-built_in">write_some</span>(<span class="hljs-built_in">buffer</span>(msg));<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> bytes = <span class="hljs-built_in">read</span>(sock, <span class="hljs-built_in">buffer</span>(buf), boost::<span class="hljs-built_in">bind</span>(read_complete,buf,_1,_2));<br>    <span class="hljs-function">std::string <span class="hljs-title">copy</span><span class="hljs-params">(buf, bytes - <span class="hljs-number">1</span>)</span></span>;<br>    msg = msg.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, msg.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;server echoed our &quot;</span> &lt;&lt; msg &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>&lt;&lt; (copy == msg ? <span class="hljs-string">&quot;OK&quot;</span> : <span class="hljs-string">&quot;FAIL&quot;</span>) &lt;&lt; std::endl;<br>    sock.<span class="hljs-built_in">close</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-type">char</span>* messages[] = &#123; <span class="hljs-string">&quot;John says hi&quot;</span>, <span class="hljs-string">&quot;so does James&quot;</span>, <span class="hljs-string">&quot;Lucy just got home&quot;</span>, <span class="hljs-string">&quot;Boost.Asio is Fun!&quot;</span>, <span class="hljs-number">0</span> &#125;;<br>    boost::thread_group threads;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">char</span> ** message = messages; *message; ++message) &#123;<br>        threads.<span class="hljs-built_in">create_thread</span>( boost::<span class="hljs-built_in">bind</span>(sync_echo, *message));<br>        boost::this_thread::<span class="hljs-built_in">sleep</span>( boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">100</span>));<br>    &#125;<br>    threads.<span class="hljs-built_in">join_all</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>核心功能<em>sync_echo</em>。它包含了连接到服务端，发送信息然后等待回显的所有逻辑。</p><p>你会发现，在读取时，我使用了自由函数<em>read()</em>，因为我想要读’\n’之前的所有内容。*sock.read_some()*方法满足不了这个要求，因为它只会读可用的，而不是全部的消息。</p><p>*read()*方法的第三个参数是完成处理句柄。当读取到完整消息时，它返回0。否则，它会返回我下一步（直到读取结束）能都到的最大的缓冲区大小。在我们的例子中，返回结果始终是1，因为我永远不想读的消息比我们需要的更多。</p><p>在*main()*中，我们创建了几个线程；每个线程负责把消息发送到客户端，然后等待操作结束。如果你运行这个程序，你会看到下面的输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">server echoed our John says hi: OK<br>server echoed our so does James: OK<br>server echoed our Lucy just got home: OK<br>server echoed our Boost.Asio is Fun!: OK<br></code></pre></td></tr></table></figure><p>注意：因为我们是同步的，所以不需要调用<em>service.run()</em>。</p><h4 id="TCP同步服务端">TCP同步服务端</h4><p>回显同步服务端的编写非常容易，参考如下的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">char</span> * buff, <span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> found = std::<span class="hljs-built_in">find</span>(buff, buff + bytes, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; buff + bytes;<br>    <span class="hljs-comment">// 我们一个一个读取直到读到回车，不缓存</span><br>    <span class="hljs-keyword">return</span> found ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_connections</span><span class="hljs-params">()</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(service, ip::tcp::endpoint(ip::tcp::v4(),<span class="hljs-number">8001</span>))</span></span>;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>        ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>        acceptor.<span class="hljs-built_in">accept</span>(sock);<br>        <span class="hljs-type">int</span> bytes = <span class="hljs-built_in">read</span>(sock, <span class="hljs-built_in">buffer</span>(buff), boost::<span class="hljs-built_in">bind</span>(read_complete,buff,_1,_2));<br>        <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(buff, bytes)</span></span>;<br>        sock.<span class="hljs-built_in">write_some</span>(<span class="hljs-built_in">buffer</span>(msg));<br>        sock.<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-built_in">handle_connections</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端的逻辑主要在<em>handle_connections()</em>。因为是单线程，我们接受一个客户端请求，读取它发送给我们的消息，然后回显，然后等待下一个连接。可以确定，当两个客户端同时连接时，第二个客户端需要等待服务端处理完第一个客户端的请求。</p><p>还是要注意因为我们是同步的，所以不需要调用<em>service.run()</em>。</p><h4 id="TCP异步客户端">TCP异步客户端</h4><p>当我们开始异步时，编码会变得稍微有点复杂。我们会构建在<strong>第二章 保持活动</strong>中展示的<em>connection</em>类。</p><p>观察这个章节中接下来的代码，你会发现每个异步操作启动了新的异步操作，以保持*service.run()*一直工作。<br>首先，核心功能如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">define</span> MEM_FN(x)       boost::bind(&amp;self_type::x, shared_from_this())</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MEM_FN1(x,y)    boost::bind(&amp;self_type::x, shared_from_this(),y)</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MEM_FN2(x,y,z)  boost::bind(&amp;self_type::x, shared_from_this(),y,z)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_svr</span> : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;talk_to_svr&gt; , boost::noncopyable &#123;<br>    <span class="hljs-keyword">typedef</span> talk_to_svr self_type;<br>    <span class="hljs-built_in">talk_to_svr</span>(<span class="hljs-type">const</span> std::string &amp; message) : <span class="hljs-built_in">sock_</span>(service), <span class="hljs-built_in">started_</span>(<span class="hljs-literal">true</span>), <span class="hljs-built_in">message_</span>(message) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep)</span> </span>&#123;<br>        sock_.<span class="hljs-built_in">async_connect</span>(ep, <span class="hljs-built_in">MEM_FN1</span>(on_connect,_1));<br>    &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> boost::system::error_code error_code;<br>    <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;talk_to_svr&gt; ptr;<br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep, <span class="hljs-type">const</span> std::string &amp;message)</span> </span>&#123;<br>        <span class="hljs-function">ptr <span class="hljs-title">new_</span><span class="hljs-params">(<span class="hljs-keyword">new</span> talk_to_svr(message))</span></span>;<br>        new_-&gt;<span class="hljs-built_in">start</span>(ep);<br>        <span class="hljs-keyword">return</span> new_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-keyword">return</span>;<br>        started_ = <span class="hljs-literal">false</span>;<br>        sock_.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">started</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> started_; &#125;<br>    ...<br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">char</span> read_buffer_[max_msg];<br>    <span class="hljs-type">char</span> write_buffer_[max_msg];<br>    <span class="hljs-type">bool</span> started_;<br>    std::string message_; <br>&#125;; <br></code></pre></td></tr></table></figure><p>我们需要一直使用指向<em>talk_to_svr</em>的智能指针，这样的话当在<em>tack_to_svr</em>的实例上有异步操作时，那个实例是一直活动的。为了避免错误，比如在栈上构建一个<em>talk_to_svr</em>对象的实例时，我把构造方法设置成了私有而且不允许拷贝构造（继承自<em>boost::noncopyable</em>）。</p><p>我们有了核心方法，比如<em>start(),stop()<em>和</em>started()</em>，它们所做的事情也正如它们名字表达的一样。如果需要建立连接，调用*talk_to_svr::start(endpoint, message)*即可。我们同时还有一个read缓冲区和一个write缓冲区。（<em>read_buufer_<em>和</em>write_buffer_</em>）。</p><p><em>MEM_FN</em> <em>是一个方便使用的宏，它们通过</em>shared_ptr_from_this()<em>方法强制使用一个指向</em> *this *的智能指针。</p><p>下面的几行代码和之前的解释非常不同：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//等同于 &quot;sock_.async_connect(ep, MEM_FN1(on_connect,_1));&quot;</span><br>sock_.<span class="hljs-built_in">async_connect</span>(ep,boost::<span class="hljs-built_in">bind</span>(&amp;talk_to_svr::on_connect,<span class="hljs-built_in">shared_ptr_from_this</span>(),_1));<br>sock_.<span class="hljs-built_in">async_connect</span>(ep, boost::<span class="hljs-built_in">bind</span>(&amp;talk_to_svr::on_connect,<span class="hljs-keyword">this</span>,_1));<br></code></pre></td></tr></table></figure><p>在上述例子中，我们正确的创建了<em>async_connect</em>的完成处理句柄；在调用完成处理句柄之前它会保留一个指向<em>talk_to_server</em>实例的智能指针，从而保证当其发生时<em>talk_to_server</em>实例还是保持活动的。</p><p>在接下来的例子中，我们错误地创建了完成处理句柄，当它被调用时，<em>talk_to_server</em>实例很可能已经被释放了。<br>从socket读取或写入时，你使用如下的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">async_read</span>(sock_, <span class="hljs-built_in">buffer</span>(read_buffer_), <span class="hljs-built_in">MEM_FN2</span>(read_complete,_1,_2), <span class="hljs-built_in">MEM_FN2</span>(on_read,_1,_2));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>    std::<span class="hljs-built_in">copy</span>(msg.<span class="hljs-built_in">begin</span>(), msg.<span class="hljs-built_in">end</span>(), write_buffer_);<br>    sock_.<span class="hljs-built_in">async_write_some</span>( <span class="hljs-built_in">buffer</span>(write_buffer_, msg.<span class="hljs-built_in">size</span>()), <span class="hljs-built_in">MEM_FN2</span>(on_write,_1,_2));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-comment">// 和TCP客户端中的类似</span><br>&#125;<br></code></pre></td></tr></table></figure><p>*do_read()<em>方法会保证当</em>on_read()<em>被调用的时候，我们从服务端读取一行。<em>do_write()<em>方法会先把信息拷贝到缓冲区（考虑到当</em>async_write</em>发生时msg可能已经超出范围被释放），然后保证实际的写入操作发生时</em>on_write()*被调用。</p><p>然后是最重要的方法，这个方法包含了类的主要逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_connect</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( !err)      <span class="hljs-built_in">do_write</span>(message_ + <span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">else</span>            <span class="hljs-built_in">stop</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( !err) &#123;<br>        <span class="hljs-function">std::string <span class="hljs-title">copy</span><span class="hljs-params">(read_buffer_, bytes - <span class="hljs-number">1</span>)</span></span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;server echoed our &quot;</span> &lt;&lt; message_ &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; (copy == message_ ? <span class="hljs-string">&quot;OK&quot;</span> : <span class="hljs-string">&quot;FAIL&quot;</span>) &lt;&lt; std::endl; <br>    &#125;<br>    <span class="hljs-built_in">stop</span>(); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-built_in">do_read</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>当连接成功之后，我们发送消息到服务端,<em>do_write()</em>。当write操作结束时，*on_write()<em>被调用，它初始化了一个</em>do_read()<em>方法，当</em>do_read()*完成时。*on_read()*被调用；这里，我们简单的检查一下返回的信息是否是服务端的回显，然后退出服务。<br>我们会发送三个消息到服务端让它变得更有趣一点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8001</span>)</span></span>;<br>    <span class="hljs-type">char</span>* messages[] = &#123; <span class="hljs-string">&quot;John says hi&quot;</span>, <span class="hljs-string">&quot;so does James&quot;</span>, <span class="hljs-string">&quot;Lucy got home&quot;</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">char</span> ** message = messages; *message; ++message) &#123;<br>        talk_to_svr::<span class="hljs-built_in">start</span>( ep, *message);<br>        boost::this_thread::<span class="hljs-built_in">sleep</span>( boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">100</span>));<br>    &#125;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述的代码会生成如下的输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">server echoed our John says hi: OK<br>server echoed our so does James: OK<br>server echoed our Lucy just got home: OK<br></code></pre></td></tr></table></figure><h4 id="TCP异步服务端">TCP异步服务端</h4><p>核心功能和同步服务端的功能类似，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_client</span> : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;talk_to_<br>   client&gt;, boost::noncopyable &#123;<br>    <span class="hljs-keyword">typedef</span> talk_to_client self_type;<br>    <span class="hljs-built_in">talk_to_client</span>() : <span class="hljs-built_in">sock_</span>(service), <span class="hljs-built_in">started_</span>(<span class="hljs-literal">false</span>) &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> boost::system::error_code error_code;<br>    <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;talk_to_client&gt; ptr;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>        started_ = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">do_read</span>(); <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">new_</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">ptr <span class="hljs-title">new_</span><span class="hljs-params">(<span class="hljs-keyword">new</span> talk_to_client)</span></span>;<br>        <span class="hljs-keyword">return</span> new_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-keyword">return</span>;<br>        started_ = <span class="hljs-literal">false</span>;<br>        sock_.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    ip::<span class="hljs-function">tcp::socket &amp; <span class="hljs-title">sock</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> sock_;&#125;<br>    ...<br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">char</span> read_buffer_[max_msg];<br>    <span class="hljs-type">char</span> write_buffer_[max_msg];<br>    <span class="hljs-type">bool</span> started_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>因为我们是非常简单的回显服务，这里不需要*is_started()*方法。对每个客户端，仅仅读取它的消息，回显，然后关闭它。</p><p>*do_read()，do_write()<em>和</em>read_complete()<em>方法和TCP同步服务端的完全一致。<br>主要的逻辑同样是在</em>on_read()<em>和</em>on_write()*方法中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( !err) &#123;<br>        <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(read_buffer_, bytes)</span></span>;<br>        <span class="hljs-built_in">do_write</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">stop</span>(); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-built_in">do_read</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>对客户端的处理如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(service, ip::tcp::endpoint(ip::tcp::v4(),<span class="hljs-number">8001</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_accept</span><span class="hljs-params">(talk_to_client::ptr client, <span class="hljs-type">const</span> error_code &amp; err)</span></span><br><span class="hljs-function"></span>&#123;<br>    client-&gt;<span class="hljs-built_in">start</span>();<br>    talk_to_client::ptr new_client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acceptor.<span class="hljs-built_in">async_accept</span>(new_client-&gt;<span class="hljs-built_in">sock</span>(), boost::<span class="hljs-built_in">bind</span>(handle_accept,new_client,_1));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    talk_to_client::ptr client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acceptor.<span class="hljs-built_in">async_accept</span>(client-&gt;<span class="hljs-built_in">sock</span>(), boost::<span class="hljs-built_in">bind</span>(handle_accept,client,_1));<br>    service.<span class="hljs-built_in">run</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>每一次客户端连接到服务时，<em>handle_accept</em>被调用，它会异步地从客户端读取，然后同样异步地等待一个新的客户端。</p><h4 id="代码">代码</h4><p>你会在这本书相应的代码中得到所有4个应用（TCP回显同步客户端，TCP回显同步服务端，TCP回显异步客户端，TCP回显异步服务端）。当测试时，你可以使用任意客户端/服务端组合（比如，一个异步客户端和一个同步服务端）。</p><h3 id="UDP回显服务端-客户端">UDP回显服务端/客户端</h3><p>因为UDP不能保证所有信息都抵达接收者，我们不能保证“信息以回车结尾”。<br>没收到消息，我们只是回显，但是没有socket去关闭（在服务端），因为我们是UDP。</p><h4 id="UDP同步回显客户端">UDP同步回显客户端</h4><p>UDP回显客户端比TCP回显客户端要简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">udp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8001</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sync_echo</span><span class="hljs-params">(std::string msg)</span> </span>&#123;<br>    ip::<span class="hljs-function">udp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service, ip::udp::endpoint(ip::udp::v4(), <span class="hljs-number">0</span>))</span></span>;<br>    sock.<span class="hljs-built_in">send_to</span>(<span class="hljs-built_in">buffer</span>(msg), ep);<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br>    ip::udp::endpoint sender_ep;<br>    <span class="hljs-type">int</span> bytes = sock.<span class="hljs-built_in">receive_from</span>(<span class="hljs-built_in">buffer</span>(buff), sender_ep);<br>    <span class="hljs-function">std::string <span class="hljs-title">copy</span><span class="hljs-params">(buff, bytes)</span></span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;server echoed our &quot;</span> &lt;&lt; msg &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; (copy == msg ? <span class="hljs-string">&quot;OK&quot;</span> : <span class="hljs-string">&quot;FAIL&quot;</span>) &lt;&lt; std::endl;<br>    sock.<span class="hljs-built_in">close</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-type">char</span>* messages[] = &#123; <span class="hljs-string">&quot;John says hi&quot;</span>, <span class="hljs-string">&quot;so does James&quot;</span>, <span class="hljs-string">&quot;Lucy got home&quot;</span>, <span class="hljs-number">0</span> &#125;;<br>    boost::thread_group threads;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">char</span> ** message = messages; *message; ++message) &#123;<br>        threads.<span class="hljs-built_in">create_thread</span>( boost::<span class="hljs-built_in">bind</span>(sync_echo, *message));<br>        boost::this_thread::<span class="hljs-built_in">sleep</span>( boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">100</span>));<br>    &#125;<br>    threads.<span class="hljs-built_in">join_all</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>所有的逻辑都在*synch_echo()*中；连接到服务端，发送消息，接收服务端的回显，然后关闭连接。</p><h4 id="UDP同步回显服务端">UDP同步回显服务端</h4><p>UDP回显服务端会是你写过的最简单的服务端：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_connections</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br>    ip::<span class="hljs-function">udp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service, ip::udp::endpoint(ip::udp::v4(), <span class="hljs-number">8001</span>))</span></span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>        ip::udp::endpoint sender_ep;<br>        <span class="hljs-type">int</span> bytes = sock.<span class="hljs-built_in">receive_from</span>(<span class="hljs-built_in">buffer</span>(buff), sender_ep);<br>        <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(buff, bytes)</span></span>;<br>        sock.<span class="hljs-built_in">send_to</span>(<span class="hljs-built_in">buffer</span>(msg), sender_ep);<br>    &#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-built_in">handle_connections</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>它非常简单，而且能很好的自释。<br>我把异步UDP客户端和服务端留给读者当作一个练习。</p><h3 id="总结-3">总结</h3><p>我们已经写了完整的应用，最终让Boost.Asio得以工作。回显应用是开始学习一个库时非常好的工具。你可以经常学习和运行这个章节所展示的代码，这样你就可以非常容易地记住这个库的基础。<br>在下一章，我们会建立更复杂的客户端/服务端应用，我们要确保避免低级错误，比如内存泄漏，死锁等等。</p><h2 id="客户端和服务端">客户端和服务端</h2><p>在这一章节，我们会深入学习怎样使用Boost.Asio建立非凡的客户端和服务端应用。你可以运行并测试它们，而且在理解之后，你可以把它们做为框架来构造自己的应用。</p><p>在接下来的例子中：</p><ul><li>客户端使用一个用户名（无密码）登录到服务端</li><li>所有的连接由客户端建立，当客户端请求时服务端回应</li><li>所有的请求和回复都以换行符结尾（’\n’）</li><li>对于5秒钟没有ping操作的客户端，服务端会自动断开其连接</li></ul><p>客户端可以发送如下请求：</p><ul><li>获得所有已连接客户端的列表</li><li>客户端可以ping，当它ping时，服务端返回<em>ping ok</em>或者<em>ping client_list_chaned</em>（在接下来的例子中，客户端重新请求已连接的客户端列表）</li></ul><p>为了更有趣一点，我们增加了一些难度：</p><ul><li>每个客户端登录6个用户连接，比如Johon,James,Lucy,Tracy,Frank和Abby</li><li>每个客户端连接随机地ping服务端（随机7秒；这样的话，服务端会时不时关闭一个连接）</li></ul><h3 id="同步客户端-服务端">同步客户端/服务端</h3><p>首先，我们会实现同步应用。你会发现它的代码很直接而且易读的。而且因为所有的网络调用都是阻塞的，所以它不需要独立的线程。</p><h4 id="同步客户端">同步客户端</h4><p>同步客户端会以你所期望的串行方式运行；连接到服务端，登录服务器，然后执行连接循环，比如休眠一下，发起一个请求，读取服务端返回，然后再休眠一会，然后一直循环下去……</p><p><img src="http://d.pcs.baidu.com/thumbnail/102a243f8953a60d8531f3c68699e517?fid=3238002958-250528-439846994747753&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-bHTbbqvG4PXZKcDNFdOWL6iVPVY%3D&amp;rt=sh&amp;expires=2h&amp;r=382985944&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>因为我们是同步的，所以我们让事情变得简单一点。首先，连接到服务器，然后再循环，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8001</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run_client</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; client_name)</span> </span>&#123;<br>    <span class="hljs-function">talk_to_svr <span class="hljs-title">client</span><span class="hljs-params">(client_name)</span></span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        client.<span class="hljs-built_in">connect</span>(ep);<br>        client.<span class="hljs-built_in">loop</span>();<br>    &#125; <span class="hljs-built_in">catch</span>(boost::system::system_error &amp; err) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;client terminated &quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面的代码片段展示了talk_to_svr类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">talk_to_svr</span> &#123;<br>    <span class="hljs-built_in">talk_to_svr</span>(<span class="hljs-type">const</span> std::string &amp; username) : <span class="hljs-built_in">sock_</span>(service), <span class="hljs-built_in">started_</span>(<span class="hljs-literal">true</span>), <span class="hljs-built_in">username_</span>(username) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(ip::tcp::endpoint ep)</span> </span>&#123;<br>        sock_.<span class="hljs-built_in">connect</span>(ep);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;login &quot;</span> + username_ + <span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-built_in">read_answer</span>();<br>        <span class="hljs-keyword">while</span> ( started_) &#123;<br>            <span class="hljs-built_in">write_request</span>();<br>            <span class="hljs-built_in">read_answer</span>();<br>            boost::this_thread::<span class="hljs-built_in">sleep</span>(<span class="hljs-built_in">millisec</span>(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">7000</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">std::string <span class="hljs-title">username</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> username_; &#125;<br>    ... <br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">int</span> already_read_;<br>    <span class="hljs-type">char</span> buff_[max_msg];<br>    <span class="hljs-type">bool</span> started_;<br>    std::string username_;<br>&#125;; <br></code></pre></td></tr></table></figure><p>在这个循环中，我们仅仅填充1个比特，做一个ping操作之后就进入睡眠状态，之后再读取服务端的返回。我们的睡眠是随机的（有时候超过5秒），这样服务端就有可能在某个时间点断开我们的连接：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write_request</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;ping\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read_answer</span><span class="hljs-params">()</span> </span>&#123;<br>    already_read_ = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">read</span>(sock_, <span class="hljs-built_in">buffer</span>(buff_), boost::<span class="hljs-built_in">bind</span>(&amp;talk_to_svr::read_complete, <span class="hljs-keyword">this</span>, _1, _2));<br>    <span class="hljs-built_in">process_msg</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_msg</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(buff_, already_read_)</span></span>;<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;login &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_login</span>();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ping&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_ping</span>(msg);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;clients &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_clients</span>(msg);<br>    <span class="hljs-keyword">else</span> std::cerr &lt;&lt; <span class="hljs-string">&quot;invalid msg &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;<br>&#125; <br></code></pre></td></tr></table></figure><p>对于读取结果，我们使用在之前章节就有说到的<em>read_complete</em>来保证我们能读到换行符（’\n’）。这段逻辑在*process_msg()*中，在这里我们读取服务端的返回，然后分发到正确的方法去处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_login</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">do_ask_clients</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_ping</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-function">std::istringstream <span class="hljs-title">in</span><span class="hljs-params">(msg)</span></span>;<br>    std::string answer;<br>    in &gt;&gt; answer &gt;&gt; answer;<br>    <span class="hljs-keyword">if</span> ( answer == <span class="hljs-string">&quot;client_list_changed&quot;</span>)<br>        <span class="hljs-built_in">do_ask_clients</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_clients</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    std::string clients = msg.<span class="hljs-built_in">substr</span>(<span class="hljs-number">8</span>);<br>    std::cout &lt;&lt; username_ &lt;&lt; <span class="hljs-string">&quot;, new client list:&quot;</span> &lt;&lt; clients;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ask_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;ask_clients\n&quot;</span>);<br>    <span class="hljs-built_in">read_answer</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123; sock_.<span class="hljs-built_in">write_some</span>(<span class="hljs-built_in">buffer</span>(msg)); &#125;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-comment">// ... 和之前一样</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在读取服务端对我们ping操作的返回时，如果得到的消息是<em>client_list_changed</em>，我们就需要重新请求客户端列表。</p><h4 id="同步服务端">同步服务端</h4><p>同步服务端也是相当简单的。它只需要两个线程，一个负责接收新的客户端连接，另外一个负责处理已经存在的客户端请求。它不能使用单线程，因为等待新的客户端连接是一个阻塞操作，所以我们需要另外一个线程来处理已经存在的客户端请求。</p><p><img src="http://d.pcs.baidu.com/thumbnail/ceff46cf09767285fd5fa58be5d5beae?fid=3238002958-250528-625961824567867&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-jZ%2BsgWwaNZblSuxpNAYBN2BuXP8%3D&amp;rt=sh&amp;expires=2h&amp;r=387068104&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>正常来说服务端都比客户端要难实现。一方面，它要管理所有已经连接的客户端。因为我们是同步的，所以我们需要至少两个线程，一个负责接受新的客户端连接（因为accept()是阻塞的）而另一个负责回复已经存在的客户端。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">accept_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(service,ip::tcp::endpoint(ip::tcp::v4(), <span class="hljs-number">8001</span>))</span></span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-function">client_ptr <span class="hljs-title">new_</span><span class="hljs-params">( <span class="hljs-keyword">new</span> talk_to_client)</span></span>;<br>        acceptor.<span class="hljs-built_in">accept</span>(new_-&gt;<span class="hljs-built_in">sock</span>());<br>        boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs)</span></span>;<br>        clients.<span class="hljs-built_in">push_back</span>(new_);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_clients_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>        boost::this_thread::<span class="hljs-built_in">sleep</span>( <span class="hljs-built_in">millisec</span>(<span class="hljs-number">1</span>));<br>        boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs)</span></span>;<br>        <span class="hljs-keyword">for</span>(array::iterator b = clients.<span class="hljs-built_in">begin</span>(), e = clients.<span class="hljs-built_in">end</span>(); b!= e; ++b)<br>            (*b)-&gt;<span class="hljs-built_in">answer_to_client</span>();<br>        <span class="hljs-comment">// 删除已经超时的客户端</span><br>        clients.<span class="hljs-built_in">erase</span>(std::<span class="hljs-built_in">remove_if</span>(clients.<span class="hljs-built_in">begin</span>(), clients.<span class="hljs-built_in">end</span>(), boost::<span class="hljs-built_in">bind</span>(&amp;talk_to_client::timed_out,_1)), clients.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    boost::thread_group threads;<br>    threads.<span class="hljs-built_in">create_thread</span>(accept_thread);<br>    threads.<span class="hljs-built_in">create_thread</span>(handle_clients_thread);<br>    threads.<span class="hljs-built_in">join_all</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>为了分辨客户端发送过来的请求我们需要保存一个客户端的列表。<br>每个<em>talk_to_client</em>实例都拥有一个socket，socket类是不支持拷贝构造的，所以如果你想要把它们保存在一个<em>std::vector</em>对象中，你需要一个指向它的智能指针。这里有两种实现的方式：在<em>talk_to_client</em>内部保存一个指向socket的智能指针然后创建一个<em>talk_to_client</em>实例的数组，或者让<em>talk_to_client</em>实例用变量的方式保存socket，然后创建一个指向<em>talk_to_client</em>智能指针的数组。我选择后者，但是你也可以选前面的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;talk_to_client&gt; client_ptr;<br><span class="hljs-keyword">typedef</span> std::vector&lt;client_ptr&gt; array;<br>array clients;<br>boost::recursive_mutex cs; <span class="hljs-comment">// 用线程安全的方式访问客户端数组</span><br></code></pre></td></tr></table></figure><p><em>talk_to_client</em>的主要代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">talk_to_client</span> : boost::enable_shared_from_this&lt;talk_to_client&gt;<br>&#123;<br>    <span class="hljs-built_in">talk_to_client</span>() &#123; ... &#125;<br>    <span class="hljs-function">std::string <span class="hljs-title">username</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> username_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">answer_to_client</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">read_request</span>();<br>            <span class="hljs-built_in">process_request</span>();<br>        &#125; <span class="hljs-built_in">catch</span> ( boost::system::system_error&amp;) &#123; <span class="hljs-built_in">stop</span>(); &#125;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">timed_out</span>())<br>            <span class="hljs-built_in">stop</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_clients_changed</span><span class="hljs-params">()</span> </span>&#123; clients_changed_ = <span class="hljs-literal">true</span>; &#125;<br>    ip::<span class="hljs-function">tcp::socket &amp; <span class="hljs-title">sock</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> sock_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">timed_out</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        ptime now = microsec_clock::<span class="hljs-built_in">local_time</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ms = (now - last_ping).<span class="hljs-built_in">total_milliseconds</span>();<br>        <span class="hljs-keyword">return</span> ms &gt; <span class="hljs-number">5000</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        boost::system::error_code err; sock_.<span class="hljs-built_in">close</span>(err);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read_request</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( sock_.<span class="hljs-built_in">available</span>())<br>            already_read_ += sock_.<span class="hljs-built_in">read_some</span>(<span class="hljs-built_in">buffer</span>(buff_ + already_read_, max_msg - already_read_));<br>    &#125;<br>... <br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// ...  和同步客户端中的一样</span><br>    <span class="hljs-type">bool</span> clients_changed_;<br>    ptime last_ping;<br>&#125;; <br></code></pre></td></tr></table></figure><p>上述代码拥有非常好的自释能力。其中最重要的方法是<em>read_request()</em>。它只在存在有效数据的情况才读取，这样的话，服务端永远都不会阻塞：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_request</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">bool</span> found_enter = std::<span class="hljs-built_in">find</span>(buff_, buff_ + already_read_, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; buff_ + already_read_;<br>    <span class="hljs-keyword">if</span> ( !found_enter)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 消息不完整</span><br>        <span class="hljs-comment">// 处理消息</span><br>    last_ping = microsec_clock::<span class="hljs-built_in">local_time</span>();<br>    <span class="hljs-type">size_t</span> pos = std::<span class="hljs-built_in">find</span>(buff_, buff_ + already_read_, <span class="hljs-string">&#x27;\n&#x27;</span>) - buff_;<br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(buff_, pos)</span></span>;<br>    std::<span class="hljs-built_in">copy</span>(buff_ + already_read_, buff_ + max_msg, buff_);<br>    already_read_ -= pos + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;login &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_login</span>(msg);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ping&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_ping</span>();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ask_clients&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_clients</span>();<br>    <span class="hljs-keyword">else</span> std::cerr &lt;&lt; <span class="hljs-string">&quot;invalid msg &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_login</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-function">std::istringstream <span class="hljs-title">in</span><span class="hljs-params">(msg)</span></span>;<br>    in &gt;&gt; username_ &gt;&gt; username_;<br>    <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;login ok\n&quot;</span>);<br>    <span class="hljs-built_in">update_clients_changed</span>();<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_ping</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">write</span>(clients_changed_ ? <span class="hljs-string">&quot;ping client_list_changed\n&quot;</span> : <span class="hljs-string">&quot;ping ok\n&quot;</span>);<br>    clients_changed_ = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string msg;<br>    &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs)</span></span>;<br>        <span class="hljs-keyword">for</span>( array::const_iterator b = clients.<span class="hljs-built_in">begin</span>(), e = clients.<span class="hljs-built_in">end</span>() ; b != e; ++b)<br>            msg += (*b)-&gt;<span class="hljs-built_in">username</span>() + <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;clients &quot;</span> + msg + <span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span></span>&#123;sock_.<span class="hljs-built_in">write_some</span>(<span class="hljs-built_in">buffer</span>(msg)); &#125;<br></code></pre></td></tr></table></figure><p>观察<em>process_request()</em>。当我们读取到足够多有效的数据时，我们需要知道我们是否已经读取到整个消息(如果<em>found_enter</em>为真)。这样做的话，我们可以使我们避免一次读多个消息的可能（’\n’之后的消息也被保存到缓冲区中），然后我们解析读取到的整个消息。剩下的代码都是很容易读懂的。</p><h3 id="异步客户端-服务端">异步客户端/服务端</h3><p>现在，是比较有趣（也比较难）的异步实现！<br>当查看示意图时，你需要知道Boost.Asio代表由Boost.Asio执行的一个异步调用。例如<em>do_read()</em>，Boost.Asio和*on_read()<em>代表了从</em>do_read()<em>到</em>on_read()<em>的逻辑流程，但是你永远不知道什么时候轮到</em>on_read()*被调用，你只是知道你最终会调用它。</p><h4 id="异步客户端">异步客户端</h4><p>到这里事情会变得有点复杂，但是仍然是可控的。当然你也会拥有一个不会阻塞的应用。</p><p><img src="http://d.pcs.baidu.com/thumbnail/953e9b90f743389e6ea7a425aaeda307?fid=3238002958-250528-223058845569586&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-56mkJ9mIQ8E81BqrXlmWpBYEqJU%3D&amp;rt=sh&amp;expires=2h&amp;r=552891765&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>下面的代码你应该已经很熟悉：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">define</span> MEM_FN(x)       boost::bind(&amp;self_type::x, shared_from_this())</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MEM_FN1(x,y)    boost::bind(&amp;self_type::x, shared_from_</span><br><span class="hljs-built_in">this</span>(),y)<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MEM_FN2(x,y,z)  boost::bind(&amp;self_type::x, shared_from_</span><br><span class="hljs-built_in">this</span>(),y,z)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_svr</span> : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;talk_to_svr&gt;, boost::noncopyable &#123;<br>    <span class="hljs-keyword">typedef</span> talk_to_svr self_type;<br>    <span class="hljs-built_in">talk_to_svr</span>(<span class="hljs-type">const</span> std::string &amp; username) : <span class="hljs-built_in">sock_</span>(service), <span class="hljs-built_in">started_</span>(<span class="hljs-literal">true</span>), <span class="hljs-built_in">username_</span>(username), <span class="hljs-built_in">timer_</span><br>(service) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep)</span> </span>&#123;<br>        sock_.<span class="hljs-built_in">async_connect</span>(ep, <span class="hljs-built_in">MEM_FN1</span>(on_connect,_1));<br>&#125; <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> boost::system::error_code error_code;<br>    <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;talk_to_svr&gt; ptr;<br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep, <span class="hljs-type">const</span> std::string &amp; username)</span> </span>&#123;<br>        <span class="hljs-function">ptr <span class="hljs-title">new_</span><span class="hljs-params">(<span class="hljs-keyword">new</span> talk_to_svr(username))</span></span>;<br>        new_-&gt;<span class="hljs-built_in">start</span>(ep);<br>        <span class="hljs-keyword">return</span> new_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-keyword">return</span>;<br>        started_ = <span class="hljs-literal">false</span>;<br>        sock_.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">started</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> started_; &#125;<br>    ...<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp;err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( err) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> found = std::<span class="hljs-built_in">find</span>(read_buffer_, read_buffer_ + bytes, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; read_buffer_ + bytes;<br>        <span class="hljs-keyword">return</span> found ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">char</span> read_buffer_[max_msg];<br>    <span class="hljs-type">char</span> write_buffer_[max_msg];<br>    <span class="hljs-type">bool</span> started_;<br>    std::string username_;<br>    deadline_timer timer_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>你会看到额外还有一个叫*deadline_timer timer_*的方法用来ping服务端；而且ping操作同样是随机的。<br>下面是类的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_connect</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err)</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> ( !err)      <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;login &quot;</span> + username_ + <span class="hljs-string">&quot;\n&quot;</span>);<br>       <span class="hljs-keyword">else</span>            <span class="hljs-built_in">stop</span>();<br>   &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-built_in">stop</span>();<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 处理消息</span><br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(read_buffer_, bytes)</span></span>;<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;login &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_login</span>();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ping&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_ping</span>(msg);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;clients &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_clients</span>(msg);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_login</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">do_ask_clients</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_ping</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-function">std::istringstream <span class="hljs-title">in</span><span class="hljs-params">(msg)</span></span>;<br>    std::string answer;<br>    in &gt;&gt; answer &gt;&gt; answer;<br>    <span class="hljs-keyword">if</span> ( answer == <span class="hljs-string">&quot;client_list_changed&quot;</span>) <span class="hljs-built_in">do_ask_clients</span>();<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">postpone_ping</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_clients</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    std::string clients = msg.<span class="hljs-built_in">substr</span>(<span class="hljs-number">8</span>);<br>    std::cout &lt;&lt; username_ &lt;&lt; <span class="hljs-string">&quot;, new client list:&quot;</span> &lt;&lt; clients ;<br>    <span class="hljs-built_in">postpone_ping</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>在*on_read()*中，首先的两行代码是亮点。在第一行，如果出现错误，我们就停止。而第二行，如果我们已经停止了（之前就停止了或者刚好停止），我们就返回。反之如果所有都是OK，我们就对收到的消息进行处理。</p><p>最后是*do_**方法，实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ping</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;ping\n&quot;</span>); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postpone_ping</span><span class="hljs-params">()</span> </span>&#123;<br>    timer_.<span class="hljs-built_in">expires_from_now</span>(boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">7000</span>));<br>    timer_.<span class="hljs-built_in">async_wait</span>( <span class="hljs-built_in">MEM_FN</span>(do_ping));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ask_clients</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;ask_clients\n&quot;</span>); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123; <span class="hljs-built_in">do_read</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">async_read</span>(sock_, <span class="hljs-built_in">buffer</span>(read_buffer_), <span class="hljs-built_in">MEM_FN2</span>(read_complete,_1,_2), <span class="hljs-built_in">MEM_FN2</span>(on_read,_1,_2));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>    std::<span class="hljs-built_in">copy</span>(msg.<span class="hljs-built_in">begin</span>(), msg.<span class="hljs-built_in">end</span>(), write_buffer_);<br>    sock_.<span class="hljs-built_in">async_write_some</span>( <span class="hljs-built_in">buffer</span>(write_buffer_, msg.<span class="hljs-built_in">size</span>()), <span class="hljs-built_in">MEM_FN2</span>(on_write,_1,_2));<br></code></pre></td></tr></table></figure><p>注意每一个<em>read</em>操作都会触发一个ping操作</p><ul><li>当<em>read</em>操作结束时，*on_read()*被调用</li><li><em>on_read()<em>调用</em>on_login()，on_ping()<em>或者</em>on_clients()</em></li><li>每一个方法要么发出一个ping，要么请求客户端列表</li><li>如果我们请求客户端列表，当<em>read</em>操作接收到它们时，它会发出一个ping操作。</li></ul><h4 id="异步服务端">异步服务端</h4><p>这个示意图是相当复杂的；从Boost.Asio出来你可以看到4个箭头指向<em>on_accept，on_read，on_write</em>和<em>on_check_ping</em>。这也就意味着你永远不知道哪个异步调用是下一个完成的调用，但是你可以确定的是它是这4个操作中的一个。</p><p><img src="http://d.pcs.baidu.com/thumbnail/eb7c5e88701b3738d5f57cb774af20f9?fid=3238002958-250528-454635957192459&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-BELSnAVGnjDaCwLdOtTjcybqk%2BY%3D&amp;rt=sh&amp;expires=2h&amp;r=476530834&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>现在，我们是异步的了；我们可以继续保持单线程。接受客户端连接是最简单的部分，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(service, ip::tcp::endpoint(ip::tcp::v4(), <span class="hljs-number">8001</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_accept</span><span class="hljs-params">(talk_to_client::ptr client, <span class="hljs-type">const</span> error_code &amp; err)</span></span><br><span class="hljs-function"></span>&#123;<br>    client-&gt;<span class="hljs-built_in">start</span>();<br>    talk_to_client::ptr new_client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acceptor.<span class="hljs-built_in">async_accept</span>(new_client-&gt;<span class="hljs-built_in">sock</span>(), boost::<span class="hljs-built_in">bind</span>(handle_accept,new_client,_1));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    talk_to_client::ptr client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acceptor.<span class="hljs-built_in">async_accept</span>(client-&gt;<span class="hljs-built_in">sock</span>(),boost::<span class="hljs-built_in">bind</span>(handle_accept,client,_1));<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码会一直异步地等待一个新的客户端连接（每个新的客户端连接会触发另外一个异步等待操作）。<br>我们需要监控<em>client list changed</em>事件（一个新客户端连接或者一个客户端断开连接），然后当事件发生时通知所有的客户端。因此，我们需要保存一个客户端连接的数组，否则除非你不需要在某一时刻知道所有连接的客户端，你才不需要这样一个数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_client</span>; <br><span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;talk_to_client&gt;client_ptr;<br><span class="hljs-keyword">typedef</span> std::vector&lt;client_ptr&gt; array;<br>array clients;<br></code></pre></td></tr></table></figure><p>connection类的框架如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_client</span> : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;talk_to_client&gt; , boost::noncopyable &#123;<br>    <span class="hljs-built_in">talk_to_client</span>() &#123; ... &#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> boost::system::error_code error_code;<br>    <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;talk_to_client&gt; ptr;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>        started_ = <span class="hljs-literal">true</span>;<br>        clients.<span class="hljs-built_in">push_back</span>( <span class="hljs-built_in">shared_from_this</span>());<br>        last_ping = boost::posix_time::microsec_clock::<span class="hljs-built_in">local_time</span>();<br>        <span class="hljs-built_in">do_read</span>(); <span class="hljs-comment">//首先，我们等待客户端连接</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">new_</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-function">ptr <span class="hljs-title">new_</span><span class="hljs-params">(<span class="hljs-keyword">new</span> talk_to_client)</span></span>; <span class="hljs-keyword">return</span> new_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-keyword">return</span>;<br>        started_ = <span class="hljs-literal">false</span>;<br>        sock_.<span class="hljs-built_in">close</span>();<br>        ptr self = <span class="hljs-built_in">shared_from_this</span>();<br>        array::iterator it = std::<span class="hljs-built_in">find</span>(clients.<span class="hljs-built_in">begin</span>(), clients.<span class="hljs-built_in">end</span>(), self);<br>        clients.<span class="hljs-built_in">erase</span>(it);<br>        <span class="hljs-built_in">update_clients_changed</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">started</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> started_; &#125;<br>    ip::<span class="hljs-function">tcp::socket &amp; <span class="hljs-title">sock</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> sock_;&#125;<br>    <span class="hljs-function">std::string <span class="hljs-title">username</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> username_; &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_clients_changed</span><span class="hljs-params">()</span> </span>&#123; clients_changed_ = <span class="hljs-literal">true</span>; &#125;<br>    … <br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">char</span> read_buffer_[max_msg];<br>    <span class="hljs-type">char</span> write_buffer_[max_msg];<br>    <span class="hljs-type">bool</span> started_;<br>    std::string username_;<br>    deadline_timer timer_;<br>    boost::posix_time::ptime last_ping;<br>    <span class="hljs-type">bool</span> clients_changed_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我会用<em>talk_to_client</em>或者<em>talk_to_server</em>来调用<em>connection</em>类，从而让你更明白我所说的内容。</p><p>现在你需要用到之前的代码了；它和我们在客户端应用中所用到的是一样的。我们还有另外一个*stop()*方法，这个方法用来从客户端数组中移除一个客户端连接。</p><p>服务端持续不断地等待异步的<em>read</em>操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-built_in">stop</span>();<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(read_buffer_, bytes)</span></span>;<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;login &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_login</span>(msg);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ping&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_ping</span>();<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ask_clients&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_clients</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_login</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-function">std::istringstream <span class="hljs-title">in</span><span class="hljs-params">(msg)</span></span>;<br>    in &gt;&gt; username_ &gt;&gt; username_;<br>    <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;login ok\n&quot;</span>);<br>    <span class="hljs-built_in">update_clients_changed</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_ping</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">do_write</span>(clients_changed_ ? <span class="hljs-string">&quot;ping client_list_changed\n&quot;</span> : <span class="hljs-string">&quot;ping ok\n&quot;</span>);<br>    clients_changed_ = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string msg;<br>    <span class="hljs-keyword">for</span>(array::const_iterator b =clients.<span class="hljs-built_in">begin</span>(),e =clients.<span class="hljs-built_in">end</span>(); b != e; ++b)<br>        msg += (*b)-&gt;<span class="hljs-built_in">username</span>() + <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;clients &quot;</span> + msg + <span class="hljs-string">&quot;\n&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这段代码是简单易懂的；需要注意的一点是：当一个新客户端登录，我们调用<em>update_clients_changed()</em>，这个方法为所有客户端将<em>clients_changed_<em>标志为</em>true</em>。</p><p>服务端每收到一个请求就用相应的方式进行回复，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ping</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;ping\n&quot;</span>); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ask_clients</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;ask_clients\n&quot;</span>); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123; <span class="hljs-built_in">do_read</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">async_read</span>(sock_, <span class="hljs-built_in">buffer</span>(read_buffer_), <span class="hljs-built_in">MEM_FN2</span>(read_complete,_1,_2), <span class="hljs-built_in">MEM_FN2</span>(on_read,_1,_2));<br>    <span class="hljs-built_in">post_check_ping</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>    std::<span class="hljs-built_in">copy</span>(msg.<span class="hljs-built_in">begin</span>(), msg.<span class="hljs-built_in">end</span>(), write_buffer_);<br>    sock_.<span class="hljs-built_in">async_write_some</span>( <span class="hljs-built_in">buffer</span>(write_buffer_, msg.<span class="hljs-built_in">size</span>()), <span class="hljs-built_in">MEM_FN2</span>(on_write,_1,_2));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-comment">// ... 就像之前</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在每个<em>write</em>操作的末尾，*on_write()*方法被调用，这个方法会触发另外一个异步读操作，这样的话“等待请求－回复请求”这个循环就会一直执行，直到客户端断开连接或者超时。</p><p>在每次读操作开始之前，我们异步等待5秒钟来观察客户端是否超时。如果超时，我们关闭它的连接：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_check_ping</span><span class="hljs-params">()</span> </span>&#123;<br>    ptime now = microsec_clock::<span class="hljs-built_in">local_time</span>();<br>    <span class="hljs-keyword">if</span> ( (now - last_ping).<span class="hljs-built_in">total_milliseconds</span>() &gt; <span class="hljs-number">5000</span>)<br>        <span class="hljs-built_in">stop</span>();<br>    last_ping = boost::posix_time::microsec_clock::<span class="hljs-built_in">local_time</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">post_check_ping</span><span class="hljs-params">()</span> </span>&#123;<br>    timer_.<span class="hljs-built_in">expires_from_now</span>(boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">5000</span>));<br>    timer_.<span class="hljs-built_in">async_wait</span>( <span class="hljs-built_in">MEM_FN</span>(on_check_ping));<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是整个服务端的实现。你可以运行并让它工作起来！</p><p>在代码中，我向你们展示了这一章我们学到的东西，为了更容易理解，我把代码稍微精简了下；比如，大部分的控制台输出我都没有展示，尽管在这本书附赠的代码中它们是存在的。我建议你自己运行这些例子，因为从头到尾读一次代码能加强你对本章展示应用的理解。</p><h3 id="总结-4">总结</h3><p>我们已经学到了怎么写一些基础的客户端/服务端应用。我们已经避免了一些诸如内存泄漏和死锁的低级错误。所有的编码都是框架式的，这样你就可以根据你自己的需求对它们进行扩展。</p><p>在接下来的章节中，我们会更加深入地了解使用Boost.Asio进行同步编程和异步编程的不同点，同时你也会学会如何嵌入你自己的异步操作。</p><h2 id="同步VS异步-2">同步VS异步</h2><p>Boost.Asio的作者做了一个很惊艳的工作：它可以让你在同步和异步中自由选择，从而更好地适应你的应用。</p><p>在之前的章节中，我们已经学习了各种类型应用的框架，比如同步客户端，同步服务端，异步客户端，异步服务端。它们中的每一个都可以作为你应用的基础。如果要更加深入地学习各种类型应用的细节，请继续。</p><h3 id="混合同步异步编程">混合同步异步编程</h3><p>Boost.Asio库允许你进行同步和异步的混合编程。我个人认为这是一个坏主意，但是Boost.Asio（就像C++一样）在你需要的时候允许你深入底层。</p><p>通常来说，当你写一个异步应用时，你会很容易掉入这个陷阱。比如在响应一个异步<em>write</em>操作时，你做了一个同步<em>read</em>操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">io_service service;<br>ip::<span class="hljs-function">tcp::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">( ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8001</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(boost::system::error_code err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-type">char</span> read_buff[<span class="hljs-number">512</span>];<br>    <span class="hljs-built_in">read</span>(sock, <span class="hljs-built_in">buffer</span>(read_buff));<br>&#125;<br><span class="hljs-built_in">async_write</span>(sock, <span class="hljs-built_in">buffer</span>(<span class="hljs-string">&quot;echo&quot;</span>), on_write);<br></code></pre></td></tr></table></figure><p>毫无疑问，同步<em>read</em>操作会阻塞当前的线程，从而导致其他任何正在等待的异步操作变成挂起状态（对这个线程）。这是一段糟糕的代码，因为它会导致整个应用变得无响应或者整个被阻塞掉（所有异步运行的端点都必须避免阻塞，而执行一个同步的操作违反了这个原则）。</p><p>当你写一个同步应用时，你不大可能执行异步的<em>read</em>或者<em>write</em>操作，因为同步地思考已经意味着用一种线性的方式思考（执行A，然后执行B，再执行C，等等）。</p><p>我唯一能想到的同步和异步同时工作的场景就是同步操作和异步操作是完全隔离的，比如，同步和异步从一个数据库进行读写。</p><h3 id="从客户端传递信息到服务端VS从服务端传递信息到客户端">从客户端传递信息到服务端VS从服务端传递信息到客户端</h3><p>成功的客户端/服务端应用一个很重要的部分就是来回传递消息（服务端到客户端和客户端到服务端）。你需要指定用什么来标记一个消息。换句话说，当读取一个输入的消息时，你怎么判断它被完整读取了？</p><p>标记消息结尾的方式完全取决于你（标记消息的开始很简单，因为它就是前一个消息之后传递过来的第一个字节），但是要保证消息是简单且连续的。</p><p>你可以：</p><ul><li>消息大小固定（这不是一个很好的主意，如果我们需要发送更多的数据怎么办？）</li><li>通过一个特殊的字符标记消息的结尾，比如’\n’或者’\0’</li><li>在消息的头部指定消息的大小</li></ul><p>我在整本书中间采用的方式都是“使用’\n’标记消息的结尾”。所以，每次读取一条消息都会如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> buff_[<span class="hljs-number">512</span>];<br><span class="hljs-comment">// 同步读取</span><br><span class="hljs-built_in">read</span>(sock_, <span class="hljs-built_in">buffer</span>(buff_), boost::<span class="hljs-built_in">bind</span>(&amp;read_complete, <span class="hljs-keyword">this</span>, _1, _2));<br><span class="hljs-comment">// 异步读取</span><br><span class="hljs-built_in">async_read</span>(sock_, <span class="hljs-built_in">buffer</span>(buff_),<span class="hljs-built_in">MEM_FN2</span>(read_complete,_1,_2), <span class="hljs-built_in">MEM_FN2</span>(on_read,_1,_2));<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(<span class="hljs-type">const</span> boost::system::error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    already_read_ = bytes;<br>    <span class="hljs-type">bool</span> found = std::<span class="hljs-built_in">find</span>(buff_, buff_ + bytes, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; buff_ + bytes;<br>    <span class="hljs-comment">// 一个一个读，直到读到回车，无缓存</span><br>    <span class="hljs-keyword">return</span> found ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>我把在消息头部指定消息长度这种方式作为一个练习留给读者；这非常简单。</p><h3 id="客户端应用中的同步I-O">客户端应用中的同步I/O</h3><p>同步客户端一般都能归类到如下两种情况中的一种：</p><ul><li>它向服务端请求一些东西，读取结果，然后处理它们。然后请求一些其他的东西，然后一直持续下去。事实上，这很像之前章节里说到的同步客户端。</li><li>从服务端读取消息，处理它，然后写回结果。然后读取另外一条消息，然后一直持续下去。</li></ul><p><img src="http://d.pcs.baidu.com/thumbnail/afced0ba966461979115c3b94928be5b?fid=3238002958-250528-1088339667963019&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-Wzu10j2zfRCbiH2H9xXAZ66NkEg%3D&amp;rt=sh&amp;expires=2h&amp;r=250219040&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>两种情况都使用“发送请求－读取结果”的策略。换句话说，一个部分发送一个请求到另外一个部分然后另外一个部分返回结果。这是实现客户端/服务端应用非常简单的一种方式，同时这也是我非常推荐的一种方式。</p><p>你可以创建一个<em>Mambo Jambo</em>类型的客户端服务端应用，你可以随心所欲地写它们中间的任何一个部分，但是这会导致一场灾难。（你怎么知道当客户端或者服务端阻塞的时候会发生什么？）。</p><p>上面的情况看上去会比较相似，但是它们非常不同：</p><ul><li>前者，服务端响应请求（服务端等待来自客户端的请求然后回应）。这是一个请求式连接，客户端从服务端拉取它需要的东西。</li><li>后者，服务端发送事件到客户端然后由客户端响应。这是一个推式连接，服务端推送通知/事件到客户端。</li></ul><p>你大部分时间都在做请求式客户端/服务端应用，这也是比较简单，同时也是比较常见的。</p><p>你可以把拉取请求（客户端到服务端）和推送请求（服务端到客户端）结合起来，但是，这是非常复杂的，所以你最好避免这种情况<br>。把这两种方式结合的问题在于：如果你使用“发送请求－读取结果”策略。就会发生下面一系列事情：</p><ul><li>客户端写入（发送请求）</li><li>服务端写入（发送通知到客户端）</li><li>客户端读取服务端写入的内容，然后将其作为请求的结果进行解析</li><li>服务端阻塞以等待客户端的返回的结果，这会在客户端发送新请求的时候发生</li><li>服务端把发送过来的请求当作它等待的结果进行解析</li><li>客户端会阻塞（服务端不会返回任何结果，因为它把客户端的请求当作它通知返回的结果）</li></ul><p>在一个请求式客户端/服务端应用中，避免上面的情况是非常简单的。你可以通过实现一个ping操作的方式来模拟一个推送式请求，我们假设每5秒钟客户端ping一次服务端。如果没有事情需要通知，服务端返回一个类似<em>ping ok</em>的结果，如果有事情需要通知，服务端返回一个<em>ping [event_name]</em>。然后客户端就可以初始化一个新的请求去处理这个事件。</p><p>复习一下，第一种情况就是之前章节中的同步客户端应用，它的主循环如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 对于我们登录操作的结果</span><br>    <span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;login &quot;</span> + username_ + <span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">read_answer</span>();<br>    <span class="hljs-keyword">while</span> ( started_) &#123;<br>        <span class="hljs-built_in">write_request</span>();<br>        <span class="hljs-built_in">read_answer</span>();<br>        ...<br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>我们对其进行修改以适应第二种情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( started_) &#123;<br>        <span class="hljs-built_in">read_notification</span>();<br>        <span class="hljs-built_in">write_answer</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read_notification</span><span class="hljs-params">()</span> </span>&#123;<br>    already_read_ = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">read</span>(sock_, <span class="hljs-built_in">buffer</span>(buff_), boost::<span class="hljs-built_in">bind</span>(&amp;talk_to_svr::read_complete, <span class="hljs-keyword">this</span>, _1, _2));<br>    <span class="hljs-built_in">process_notification</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_notification</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// ... 看通知是什么，然后准备回复</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务端应用中的同步I-O">服务端应用中的同步I/O</h3><p>类似客户端，服务端也被分为两种情况用来匹配之前章节中的情况1和情况2。同样，两种情况都采用“发送请求－读取结果”的策略。</p><p><img src="http://d.pcs.baidu.com/thumbnail/4aff201a379d1b5f6cf9da5bfce07bdd?fid=3238002958-250528-307717205941237&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-6Q2ORNCx0wFDvBiqKwzta3be7Ic%3D&amp;rt=sh&amp;expires=2h&amp;r=196560765&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>第一种情况是我们在之前章节实现过的同步服务端。当你是同步时读取一个完整的请求不是很简单，因为你需要避免阻塞（通常来说是能读多少就读多少）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read_request</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( sock_.<span class="hljs-built_in">available</span>())<br>&#125;<br>already_read_ += sock_.<span class="hljs-built_in">read_some</span>(<span class="hljs-built_in">buffer</span>(buff_ + already_read_, max_msg - already_read_));<br></code></pre></td></tr></table></figure><p>只要一个消息被完整读到，就对它进行处理然后回复给客户端：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process_request</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">bool</span> found_enter = std::<span class="hljs-built_in">find</span>(buff_, buff_ + already_read_, <span class="hljs-string">&#x27;\n&#x27;</span>) &lt; buff_ + already_read_;<br>    <span class="hljs-keyword">if</span> ( !found_enter)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 消息不完整</span><br>    <span class="hljs-type">size_t</span> pos = std::<span class="hljs-built_in">find</span>(buff_, buff_ + already_read_, <span class="hljs-string">&#x27;\n&#x27;</span>) - buff_;<br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(buff_, pos)</span></span>;<br>    ...<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;login &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_login</span>(msg);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ping&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_ping</span>();<br>    <span class="hljs-keyword">else</span> ...<br>&#125; <br></code></pre></td></tr></table></figure><p>如果我们想让服务端变成一个推送服务端，我们通过如下的方式修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> std::vector&lt;client_ptr&gt; array;<br>array clients;<br>array notify;<br>std::string notify_msg;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_new_client</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 新客户端连接时，我们通知所有客户端这个事件</span><br>    notify = clients;<br>    std::ostringstream msg;<br>    msg &lt;&lt; <span class="hljs-string">&quot;client count &quot;</span> &lt;&lt; clients.<span class="hljs-built_in">size</span>();<br>    notify_msg = msg.<span class="hljs-built_in">str</span>();<br>    <span class="hljs-built_in">notify_clients</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">notify_clients</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( array::const_iterator b = notify.<span class="hljs-built_in">begin</span>(), e = notify.<span class="hljs-built_in">end</span>(); b != e; ++b) &#123;<br>        (*b)-&gt;sock_.<span class="hljs-built_in">write_some</span>(notify_msg);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>*on_new_client()*方法是事件之一，这个事件我们需要通知所有的客户端。<em>notify_clients</em>是通知所有对一个事件感兴趣客户端的方法。它发送消息但是不等待每个客户端返回的结果，因为那样的话就会导致阻塞。当客户端返回一个结果时，客户端会告诉我们它为什么回复（然后我们就可以正确地处理它）。</p><h4 id="同步服务端中的线程">同步服务端中的线程</h4><p>这是一个非常重要的关注点：我们开辟多少线程去处理服务端请求？<br>对于一个同步服务端，我们至少需要一个处理新连接的线程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">accept_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(service, ip::tcp::endpoint(ip::tcp::v4(),<span class="hljs-number">8001</span>))</span></span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-function">client_ptr <span class="hljs-title">new_</span><span class="hljs-params">( <span class="hljs-keyword">new</span> talk_to_client)</span></span>;<br>        acceptor.<span class="hljs-built_in">accept</span>(new_-&gt;<span class="hljs-built_in">sock</span>());<br>        boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs)</span></span>;<br>        clients.<span class="hljs-built_in">push_back</span>(new_);<br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>对于已经存在的客户端：</p><ul><li>我们可以是单线程。这是最简单的，同时也是我在<strong>第四章 同步服务端</strong>中采用的实现方式。它可以很轻松地处理100-200并发的客户端而且有时候会更多，对于大多数情况来说这已经足够用了。</li><li>我们可以对每个客户端开一个线程。这不是一个很好的选择；他会浪费很多线程而且有时候会导致调试困难，而且当它需要处理200以上并发的客户端的时候，它可能马上会到达它的瓶颈。</li><li>我们可以用一些固定数量的线程去处理已经存在的客户端</li></ul><p>第三种选择是同步服务端中最难实现的；整个<em>talk_to_client</em>类需要是线程安全的。然后，你需要一个机制来确定哪个线程处理哪个客户端。对于这个问题，你有两个选择：</p><ul><li>将特定的客户端分配给特定的线程；比如，线程1处理前面20个客户端，线程2处理21到40个线程，等等。当一个线程在使用时（我们在等待被客户端阻塞的一些东西），我们从已存在客户端列表中将其取出来。等我们处理完之后，再把它放回到列表中。每个线程都会循环遍历已经存在的客户端列表，然后把拥有完整请求的第一个客户端提出来（我们已经从客户端读取了一条完整的消息），然后回复它。</li><li>服务端可能会变得无响应<ul><li>第一种情况，被同一个线程处理的几个客户端同时发送请求，因为一个线程在同一时刻只能处理一个请求。所以这种情况我们什么也不能做。</li><li>第二种情况，如果我们发现并发请求大于当前线程个数的时候。我们可以简单地创建新线程来处理当前的压力。</li></ul></li></ul><p>下面的代码片段有点类似之前的<em>answer_to_client</em>方法，它向我们展示了第二种方法的实现方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">talk_to_client</span> : boost::enable_shared_from_this&lt;talk_to_client&gt;<br>&#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">answer_to_client</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">read_request</span>();<br>            <span class="hljs-built_in">process_request</span>();<br>        &#125; <span class="hljs-built_in">catch</span> ( boost::system::system_error&amp;) &#123; <span class="hljs-built_in">stop</span>(); &#125;<br>    &#125; <br>&#125;; <br></code></pre></td></tr></table></figure><p>我们需要对它进行修改使它变成下面代码片段的样子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">talk_to_client</span> : boost::enable_shared_from_this&lt;talk_to_client&gt;<br>&#123;<br>    boost::recursive_mutex cs;<br>    boost::recursive_mutex cs_ask;<br>    <span class="hljs-type">bool</span> in_process;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">answer_to_client</span><span class="hljs-params">()</span> </span>&#123;<br>        &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_ask)</span></span>;<br>            <span class="hljs-keyword">if</span> ( in_process)<br>                <span class="hljs-keyword">return</span>;<br>            in_process = <span class="hljs-literal">true</span>;<br>        &#125;<br>        &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs)</span></span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">read_request</span>();<br>                <span class="hljs-built_in">process_request</span>();<br>            &#125;<span class="hljs-built_in">catch</span> ( boost::system::system_error&amp;) &#123;<br>                <span class="hljs-built_in">stop</span>();<br>            &#125;<br>        &#125;<br>        &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_ask)</span></span>;<br>            in_process = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <br>&#125;; <br></code></pre></td></tr></table></figure><p>当我们在处理一个客户端请求的时候，它的<em>in_process</em>变量被设置成<em>true</em>，其他的线程就会忽略这个客户端。额外的福利就是*handle_clients_thread()<em>方法不需要做任何修改；你可以随心所欲地创建你想要数量的</em>handle_clients_thread()*方法。</p><h3 id="客户端应用中的异步I-O">客户端应用中的异步I/O</h3><p>主流程和同步客户端应用有点类似，不同的是Boost.Asio每次都位于async_read和async_write请求中间。</p><p><img src="http://d.pcs.baidu.com/thumbnail/4431fc70c5c5a176aab77ed4d987bbee?fid=3238002958-250528-465126390059981&amp;time=1420768800&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-QwJ4QJrMKJk%2Bzc7ffqY4IOqw2Es%3D&amp;rt=sh&amp;expires=2h&amp;r=492020751&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>第一种情况是我在<strong>第四章 客户端和服务端</strong> 中实现过的。你应该还记得在每个异步操作结束的时候，我都启动另外一个异步操作，这样*service.run()*方法才不会结束。</p><p>为了适应第二种情况，你需要使用下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_connect</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">do_read</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">async_read</span>(sock_, <span class="hljs-built_in">buffer</span>(read_buffer_), <span class="hljs-built_in">MEM_FN2</span>(read_complete,_1,_2), <span class="hljs-built_in">MEM_FN2</span>(on_read,_1,_2));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( err) <span class="hljs-built_in">stop</span>();<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">started</span>() ) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(read_buffer_, bytes)</span></span>;<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;clients&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_clients</span>(msg);<br>    <span class="hljs-keyword">else</span> ...<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-built_in">on_clients</span>(<span class="hljs-type">const</span> std::string &amp; msg) &#123;<br>    std::string clients = msg.<span class="hljs-built_in">substr</span>(<span class="hljs-number">8</span>);<br>    std::cout &lt;&lt; username_ &lt;&lt; <span class="hljs-string">&quot;, new client list:&quot;</span> &lt;&lt; clients ;<br>    <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;clients ok\n&quot;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>注意只要我们成功连接上，我们就开始从服务端读取。每个*on_[event]*方法都会通过写一个回复给服务端的方式来结束我们。</p><p>使用异步的美好在于你可以使用Boost.Asio进行管理，从而把I/O网络操作和其他异步操作结合起来。尽管它的流程不像同步的流程那么清晰，你仍然可以用同步的方式来想象它。</p><p>假设，你从一个web服务器读取文件然后把它们保存到一个数据库中（异步地）。你可以把这个过程想象成下面的流程图：</p><p><img src="http://d.pcs.baidu.com/thumbnail/ee2f4effd44e33822fc13cda59436f5c?fid=3238002958-250528-275385722128526&amp;time=1420772400&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-CZwCGSbdzZ3ZnQj88OTAnBY8Fyc%3D&amp;rt=sh&amp;expires=2h&amp;r=883620133&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><h3 id="服务端应用的异步I-O">服务端应用的异步I/O</h3><p>现在要展示的是两个普遍的情况，情况1（拉取）和情况2（推送）</p><p><img src="http://d.pcs.baidu.com/thumbnail/8c4401c002293f790b56a0810652c29a?fid=3238002958-250528-53644841091289&amp;time=1420772400&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-W8qD0tBIo0TDcNgk0icVoRTIneo%3D&amp;rt=sh&amp;expires=2h&amp;r=395851440&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>第一种情况同样是我在<strong>第4章 客户端和服务端</strong> 中实现的异步服务端。在每一个异步操作最后，我都会启动另外一个异步操作，这样的话service.run()就不会结束。<br>现在要展示的是被剪裁过的框架代码。下面是talk_to_client类所有的成员：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>    <span class="hljs-built_in">do_read</span>(); <span class="hljs-comment">// first, we wait for client to login</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(read_buffer_, bytes)</span></span>;<br>    <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;login &quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_login</span>(msg);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( msg.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;ping&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-built_in">on_ping</span>();<br>    <span class="hljs-keyword">else</span><br>    ...<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-built_in">on_login</span>(<span class="hljs-type">const</span> std::string &amp; msg) &#123;<br>    std::istringstream <span class="hljs-built_in">in</span>(msg);<br>    in &gt;&gt; username_ &gt;&gt; username_;<br>    <span class="hljs-built_in">do_write</span>(<span class="hljs-string">&quot;login ok\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_write</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp; msg)</span> </span>&#123;<br>    std::<span class="hljs-built_in">copy</span>(msg.<span class="hljs-built_in">begin</span>(), msg.<span class="hljs-built_in">end</span>(), write_buffer_);<br>    sock_.<span class="hljs-built_in">async_write_some</span>( <span class="hljs-built_in">buffer</span>(write_buffer_, msg.<span class="hljs-built_in">size</span>()), <span class="hljs-built_in">MEM_FN2</span>(on_write,_1,_2));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123; <span class="hljs-built_in">do_read</span>(); &#125; <br></code></pre></td></tr></table></figure><p>简单来说，我们始终等待一个<em>read</em>操作，而且只要一发生，我们就处理然后将结果返回给客户端。</p><p>我们把上述代码进行修改就可以完成一个推送服务端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>    <span class="hljs-built_in">on_new_client_event</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_new_client_event</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ostringstream msg;<br>    msg &lt;&lt; <span class="hljs-string">&quot;client count &quot;</span> &lt;&lt; clients.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> ( array::const_iterator b = clients.<span class="hljs-built_in">begin</span>(), e = clients.<span class="hljs-built_in">end</span>(); (*b)-&gt;<span class="hljs-built_in">do_write</span>(msg.<span class="hljs-built_in">str</span>());<br>&#125; <br><span class="hljs-type">void</span> <span class="hljs-built_in">on_read</span>(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes) &#123;<br>    std::string <span class="hljs-built_in">msg</span>(read_buffer_, bytes);<br>    <span class="hljs-comment">// 在这里我们基本上只知道我们的客户端接收到我们的通知</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-built_in">do_write</span>(<span class="hljs-type">const</span> std::string &amp; msg) &#123;<br>    std::<span class="hljs-built_in">copy</span>(msg.<span class="hljs-built_in">begin</span>(), msg.<span class="hljs-built_in">end</span>(), write_buffer_);<br>    sock_.<span class="hljs-built_in">async_write_some</span>( <span class="hljs-built_in">buffer</span>(write_buffer_, msg.<span class="hljs-built_in">size</span>()), <span class="hljs-built_in">MEM_FN2</span>(on_write,_1,_2));<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-built_in">on_write</span>(<span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes) &#123; <span class="hljs-built_in">do_read</span>(); &#125; <br></code></pre></td></tr></table></figure><p>只要有一个事件发生，我们假设<em>是on_new_client_event</em>，所有需要被通知到的客户端就都收到一条信息。当它们回复时，我们简单认为他们已经确认收到事件。注意我们永远不会把正在等待的异步操作用尽（所以，*service.run()*不会结束），因为我们一直在等待一个新的客户端：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ip::<span class="hljs-function">tcp::acceptor <span class="hljs-title">acc</span><span class="hljs-params">(service, ip::tcp::endpoint(ip::tcp::v4(), <span class="hljs-number">8001</span>))</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handle_accept</span><span class="hljs-params">(talk_to_client::ptr client, <span class="hljs-type">const</span> error_code &amp; err)</span></span><br><span class="hljs-function"></span>&#123;<br>    client-&gt;<span class="hljs-built_in">start</span>();<br>    talk_to_client::ptr new_client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acc.<span class="hljs-built_in">async_accept</span>(new_client-&gt;<span class="hljs-built_in">sock</span>(), <span class="hljs-built_in">bind</span>(handle_accept,new_client,_1));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异步服务端中的多线程">异步服务端中的多线程</h4><p>我在<strong>第4章 客户端和服务端</strong> 展示的异步服务端是单线程的，所有的事情都发生在main()中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    talk_to_client::ptr client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acc.<span class="hljs-built_in">async_accept</span>(client-&gt;<span class="hljs-built_in">sock</span>(), boost::<span class="hljs-built_in">bind</span>(handle_<br>accept,client,_1));<br>    service.<span class="hljs-built_in">run</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>异步的美妙之处就在于可以非常简单地把单线程变为多线程。你可以一直保持单线程直到你的并发客户端超过200。然后，你可以使用如下的代码片段把单线程变成100个线程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">boost::thread_group threads;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">listen_thread</span><span class="hljs-params">()</span> </span>&#123;<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start_listen</span><span class="hljs-params">(<span class="hljs-type">int</span> thread_count)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; thread_count; ++i)<br>        threads.<span class="hljs-built_in">create_thread</span>( listen_thread);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    talk_to_client::ptr client = talk_to_client::<span class="hljs-built_in">new_</span>();<br>    acc.<span class="hljs-built_in">async_accept</span>(client-&gt;<span class="hljs-built_in">sock</span>(), boost::<span class="hljs-built_in">bind</span>(handle_accept,client,_1));<br>    <span class="hljs-built_in">start_listen</span>(<span class="hljs-number">100</span>);<br>    threads.<span class="hljs-built_in">join_all</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，一旦你选择了多线程，你需要考虑线程安全。尽管你在线程A中调用了<em>async_**，但是它的完成处理流程可以在线程B中被调用（因为线程B也调用了</em>service.run()<em>）。对于它本身而言这不是问题。只要你遵循逻辑流程，也就是从</em>async_read()<em>到</em>on_read()<em>，从</em>on_read()<em>到p</em>rocess_request*，从<em>process_request</em>到<em>async_write()</em>，从<em>async_write()<em>到</em>on_write()</em>，从<em>on_write()<em>到a</em>sync_read()</em>，然后在你的<em>talk_to_client</em>类中也没有被调用的公有方法，这样的话尽管不同的方法可以在不同的线程中被调用，它们还是会被有序地调用。从而不需要互斥量。</p><p>这也意味着对于一个客户端，只会有一个异步操作在等待。假如在某些情况，一个客户端有两个异步方法在等待，你就需要互斥量了。这是因为两个等待的操作可能正好在同一个时间完成，然后我们就会在两个不同的线程中间同时调用他们的完成处理函数。所以，这里需要线程安全，也就是需要使用互斥量。<br>在我们的异步服务端中，我们确实同时有两个等待的操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">async_read</span>(sock_, <span class="hljs-built_in">buffer</span>(read_buffer_),<span class="hljs-built_in">MEM_FN2</span>(read_complete,_1,_2), <span class="hljs-built_in">MEM_FN2</span>(on_read,_1,_2));<br>    <span class="hljs-built_in">post_check_ping</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">post_check_ping</span><span class="hljs-params">()</span> </span>&#123;<br>    timer_.<span class="hljs-built_in">expires_from_now</span>(boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">5000</span>));<br>    timer_.<span class="hljs-built_in">async_wait</span>( <span class="hljs-built_in">MEM_FN</span>(on_check_ping));<br>&#125;<br></code></pre></td></tr></table></figure><p>当在做一个<em>read</em>操作时，我们会异步等待<em>read</em>操作完成和超时。所以，这里需要线程安全。</p><p>我的建议是，如果你准备使用多线程，从开始就保证你的类是线程安全的。通常这不会影响它的性能（当然你也可以在配置中设置开关）。同时，如果你准备使用多线程，从一个开始就使用。这样的话你能尽早地发现可能存在的问题。一旦你发现一个问题，你首先需要检查的事情就是：单线程运行的时候是否会发生？如果是，它很简单；只要调试它就可以了。否则，你可能忘了对一些方法加锁（互斥量）。</p><p>因为我们的例子需要是线程安全的，我已经把<em>talk_to_client</em>修改成使用互斥量的了。同时，我们也有一个客户端连接的列表，它也需要自己的互斥量，因为我们有时需要访问它。</p><p>避免死锁和内存冲突不是那么容易。下面是我需要对*update_client_changed()*方法进行修改的地方：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_clients_changed</span><span class="hljs-params">()</span> </span>&#123;<br>    array copy;<br>    &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(clients_cs)</span></span>; copy = clients; &#125;<br>    <span class="hljs-keyword">for</span>( array::iterator b = copy.<span class="hljs-built_in">begin</span>(), e = copy.<span class="hljs-built_in">end</span>(); b != e; ++b)<br>        (*b)-&gt;<span class="hljs-built_in">set_clients_changed</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>你需要避免的是同时有两个互斥量被锁定（这会导致死锁）。在我们的例子中，我们不想<em>clients_cs</em>和一个客户端的*cs_*互斥量同时被锁住</p><h3 id="异步操作">异步操作</h3><p>Boost.Asio同样允许你异步地运行你任何一个方法。仅仅需要使用下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_func</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>&#125;<br>service.<span class="hljs-built_in">post</span>(my_func);<br></code></pre></td></tr></table></figure><p>这样就可以保证<em>my_func</em>在调用了*service.run()*方法的某个线程中间被调用。你同样可以异步地调用一个有完成处理handler的方法，方法的handler会在方法结束的时候通知你。伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_complete</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_func</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>    service.<span class="hljs-built_in">post</span>(on_complete);<br>&#125;<br><span class="hljs-built_in">async_call</span>(my_func);<br></code></pre></td></tr></table></figure><p>没有现成的<em>async_call</em>方法，因此，你需要自己创建。幸运的是，它不是很复杂，参考下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">async_op</span> : boost::enable_shared_from_this&lt;async_op&gt;, ... &#123;<br>    <span class="hljs-keyword">typedef</span> boost::function&lt;<span class="hljs-type">void</span>(boost::system::error_code)&gt;completion_func;<br>    <span class="hljs-keyword">typedef</span> boost::function&lt;boost::system::error_code ()&gt; op_func;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">operation</span> &#123; ... &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>        &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>            <span class="hljs-keyword">if</span> ( started_) <span class="hljs-keyword">return</span>; started_ = <span class="hljs-literal">true</span>; &#125;<br>        <span class="hljs-function">boost::thread <span class="hljs-title">t</span><span class="hljs-params">(boost::bind(&amp;async_op::run,<span class="hljs-keyword">this</span>))</span></span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(op_func op, completion_func completion, io_service &amp;service)</span> </span>&#123;<br>        self_ = <span class="hljs-built_in">shared_from_this</span>();<br>        boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>        ops_.<span class="hljs-built_in">push_back</span>( <span class="hljs-built_in">operation</span>(service, op, completion));<br>        <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-built_in">start</span>();<br>    &#125; <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>        started_ = <span class="hljs-literal">false</span>; ops_.<span class="hljs-built_in">clear</span>();<br>    &#125; <br><span class="hljs-keyword">private</span>:<br>    boost::recursive_mutex cs_;<br>    std::vector&lt;operation&gt; ops_;<br>    <span class="hljs-type">bool</span> started_;<br>    ptr self_;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>async_op</em>方法创建了一个后台线程，这个线程会运行（<em>run()</em>）你添加（<em>add()</em>）到它里面的所有的异步操作。为了让事情简单一些，每个操作都包含下面的内容：</p><ul><li>一个异步调用的方法</li><li>当第一个方法结束时被调用的一个完成处理handler</li><li>会运行完成处理handler的io_service实例。这也是完成时通知你的地方。参考下面的代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">async_op</span> : boost::enable_shared_from_this&lt;async_op&gt;, <span class="hljs-keyword">private</span> boost::noncopyable &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">operation</span> &#123;<br>        <span class="hljs-built_in">operation</span>(io_service &amp; service, op_func op, completion_func completion) : <span class="hljs-built_in">service</span>(&amp;service), <span class="hljs-built_in">op</span>(op), <span class="hljs-built_in">completion</span>(completion) , <span class="hljs-built_in">work</span>(<span class="hljs-keyword">new</span> io_service::<span class="hljs-built_in">work</span>(service)) &#123;&#125;<br>        <span class="hljs-built_in">operation</span>() : <span class="hljs-built_in">service</span>(<span class="hljs-number">0</span>) &#123;&#125;<br>        io_service * service;<br>        op_func op;<br>        completion_func completion;<br>        <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;io_service::work&gt; work_ptr;<br>        work_ptr work;<br>    &#125;;<br>    ... <br>&#125;; <br></code></pre></td></tr></table></figure><p>它们被<em>operation</em>结构体包含在内部。注意当有一个操作在等待时，我们在操作的构造方法中构造一个<em>io_service::work</em>实例，从而保证直到我们完成异步调用之前<em>service.run()<em>都不会结束（当</em>io_service::work</em>实例保持活动时，*service.run()*就会认为它有工作需要做）。参考下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">async_op</span> : ... &#123;<br>    <span class="hljs-keyword">typedef</span> boost::shared_ptr&lt;async_op&gt; ptr;<br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">new_</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">ptr</span>(<span class="hljs-keyword">new</span> async_op); &#125;<br>    ...<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> ( <span class="hljs-literal">true</span>) &#123;<br>            &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>                <span class="hljs-keyword">if</span> ( !started_) <span class="hljs-keyword">break</span>; &#125;<br>            boost::this_thread::<span class="hljs-built_in">sleep</span>(boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-number">10</span>));<br>            operation cur;<br>            &#123; boost::<span class="hljs-function">recursive_mutex::scoped_lock <span class="hljs-title">lk</span><span class="hljs-params">(cs_)</span></span>;<br>                <span class="hljs-keyword">if</span> ( !ops_.<span class="hljs-built_in">empty</span>()) &#123;<br>                    cur = ops_[<span class="hljs-number">0</span>]; <br>                    ops_.<span class="hljs-built_in">erase</span>(ops_.<span class="hljs-built_in">begin</span>());<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( cur.service)<br>                cur.service-&gt;<span class="hljs-built_in">post</span>(boost::<span class="hljs-built_in">bind</span>(cur.completion, cur.<span class="hljs-built_in">op</span>()));        <br>        &#125;<br>        self_.<span class="hljs-built_in">reset</span>();<br>    &#125;<br>&#125;; <br></code></pre></td></tr></table></figure><p>*run()*方法就是后台线程；它仅仅观察是否有工作需要做，如果有，就一个一个地运行这些异步方法。在每个调用结束的时候，它会调用相关的完成处理方法。</p><p>为了测试，我们创建一个会被异步执行的<em>compute_file-checksum</em>方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">size_t</span> checksum = <span class="hljs-number">0</span>;<br>boost::<span class="hljs-function">system::error_code <span class="hljs-title">compute_file_checksum</span><span class="hljs-params">(std::string file_name)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE file = ::<span class="hljs-built_in">CreateFile</span>(file_name.<span class="hljs-built_in">c_str</span>(),GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, <span class="hljs-number">0</span>);<br>    <span class="hljs-function">windows::random_access_handle <span class="hljs-title">h</span><span class="hljs-params">(service, file)</span></span>;<br>    <span class="hljs-type">long</span> buff[<span class="hljs-number">1024</span>];<br>    checksum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">size_t</span> bytes = <span class="hljs-number">0</span>, at = <span class="hljs-number">0</span>;<br>    boost::system::error_code ec;<br>    <span class="hljs-keyword">while</span> ( (bytes = <span class="hljs-built_in">read_at</span>(h, at, <span class="hljs-built_in">buffer</span>(buff), ec)) &gt; <span class="hljs-number">0</span>) &#123;<br>        at += bytes; bytes /= <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>);<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; bytes; ++i)<br>            checksum += buff[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> boost::system::<span class="hljs-built_in">error_code</span>(<span class="hljs-number">0</span>,boost::system::<span class="hljs-built_in">generic_category</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_checksum</span><span class="hljs-params">(std::string file_name, boost::system::error_code)</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;checksum for &quot;</span> &lt;&lt; file_name &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; checksum &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    std::string fn = <span class="hljs-string">&quot;readme.txt&quot;</span>;<br>    async_op::<span class="hljs-built_in">new_</span>()-&gt;<span class="hljs-built_in">add</span>( service, boost::<span class="hljs-built_in">bind</span>(compute_file_checksum,fn),boost::<span class="hljs-built_in">bind</span>(on_checksum,fn,_1));<br>    service.<span class="hljs-built_in">run</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意我展示给你的只是实现异步调用一个方法的一种可能。除了像我这样实现一个后台线程，你可以使用一个内部<em>io_service</em>实例，然后推送（<em>post()</em>）异步方法给这个实例调用。这个作为一个练习留给读者。</p><p>你也可以扩展这个类让其可以展示一个异步操作的进度（比如，使用百分比）。这样做你就可以在主线程通过一个进度条来显示进度。</p><h3 id="代理实现">代理实现</h3><p>代理一般位于客户端和服务端之间。它接受客户端的请求，可能会对请求进行修改，然后接着把请求发送到服务端。然后从服务端取回结果，可能也会对结果进行修改，然后接着把结果发送到客户端。</p><p><img src="http://d.pcs.baidu.com/thumbnail/0d46b36ce96944c80215c9d222b320d7?fid=3238002958-250528-198047002317925&amp;time=1420772400&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-TCr9tmAKwz40%2F9XC%2FhzcAzQbtN8%3D&amp;rt=sh&amp;expires=2h&amp;r=321797592&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>代理有什么特别的？我们讲述它的目的在于：对每个连接，你都需要两个sokect，一个给客户端，另外一个给服务端。这些都给实现一个代理增加了不小的难度。</p><p>实现一个同步的代理应用比异步的方式更加复杂；数据可能同时从两个端过来（客户端和服务端），也可能同时发往两个端。这也就意味着如果我们选择同步，我们就可能在一端向另一端<em>read()<em>或者</em>write()</em>，同时另一端向这一端*read()<em>或者</em>write()*时阻塞，这也就意味着最终我们会变得无响应。</p><p>根据下面几条实现一个异步代理的简单例子：</p><ul><li>在我们的方案中，我们在构造函数中能拿到两个连接。但不是所有的情况都这样，比如对于一个web代理来说，客户端只告诉我们服务端的地址。</li><li>因为比较简单，所以不是线程安全的。参考如下的代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">proxy</span>  : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;proxy&gt; &#123;<br>    <span class="hljs-built_in">proxy</span>(ip::tcp::endpoint ep_client, ip::tcp::endpoint ep_server) : ... &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep_client,</span></span><br><span class="hljs-params"><span class="hljs-function">ip::tcp::endpoint ep_svr)</span> </span>&#123;<br>        <span class="hljs-function">ptr <span class="hljs-title">new_</span><span class="hljs-params">(<span class="hljs-keyword">new</span> proxy(ep_client, ep_svr))</span></span>;<br>        <span class="hljs-comment">// … 连接到两个端</span><br>        <span class="hljs-keyword">return</span> new_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// ... 关闭两个连接</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">started</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> started_ == <span class="hljs-number">2</span>; &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_connect</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( !err)      &#123;<br>            <span class="hljs-keyword">if</span> ( ++started_ == <span class="hljs-number">2</span>) <span class="hljs-built_in">on_start</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">stop</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_start</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-built_in">do_read</span>(client_, buff_client_);<br>        <span class="hljs-built_in">do_read</span>(server_, buff_server_);<br>    &#125;<br>... <br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket client_, server_;<br>    <span class="hljs-keyword">enum</span> &#123; max_msg = <span class="hljs-number">1024</span> &#125;;<br>    <span class="hljs-type">char</span> buff_client_[max_msg], buff_server_[max_msg]; <br>    <span class="hljs-type">int</span> started_; <br>&#125;;<br></code></pre></td></tr></table></figure><p>这是个非常简单的代理。当我们两个端都连接时，它开始从两个端读取（*on_start()*方法）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">proxy</span>  : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;proxy&gt; &#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_read</span><span class="hljs-params">(ip::tcp::socket &amp; sock, <span class="hljs-type">const</span> error_code&amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>        <span class="hljs-type">char</span> * buff = &amp;sock == &amp;client_ ? buff_client_ : buff_server_;<br>        <span class="hljs-built_in">do_write</span>(&amp;sock == &amp;client_ ? server_ : client_, buff, bytes);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_write</span><span class="hljs-params">(ip::tcp::socket &amp; sock, <span class="hljs-type">const</span> error_code &amp;err, <span class="hljs-type">size_t</span> bytes)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> ( &amp;sock == &amp;client_) <span class="hljs-built_in">do_read</span>(server_, buff_server_);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">do_read</span>(client_, buff_client_);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_read</span><span class="hljs-params">(ip::tcp::socket &amp; sock, <span class="hljs-type">char</span>* buff)</span> </span>&#123;<br>        <span class="hljs-built_in">async_read</span>(sock, <span class="hljs-built_in">buffer</span>(buff, max_msg), <span class="hljs-built_in">MEM_FN3</span>(read_complete,<span class="hljs-built_in">ref</span>(sock),_1,_2), <span class="hljs-built_in">MEM_FN3</span>(on_read,<span class="hljs-built_in">ref</span>(sock),_1,_2));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_write</span><span class="hljs-params">(ip::tcp::socket &amp; sock, <span class="hljs-type">char</span> * buff, <span class="hljs-type">size_t</span> size)</span> </span>&#123;<br>        sock.<span class="hljs-built_in">async_write_some</span>(<span class="hljs-built_in">buffer</span>(buff,size), <span class="hljs-built_in">MEM_FN3</span>(on_write,<span class="hljs-built_in">ref</span>(sock),_1,_2));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(ip::tcp::socket &amp; sock, <span class="hljs-type">const</span> error_code &amp; err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> ( sock.<span class="hljs-built_in">available</span>() &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span><br>        sock.<span class="hljs-built_in">available</span>();<br>        <span class="hljs-keyword">return</span> bytes &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;; <br></code></pre></td></tr></table></figure><p>对每一个成功的读取操作（<em>on_read</em>），它都会发送消息到另外一个部分。只要消息一发送成功（<em>on_write</em>），我们就从来源那部分再次读取。</p><p>使用下面的代码片段让这个流程运转起来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep_c</span><span class="hljs-params">(ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">8001</span>)</span></span>;<br>    ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep_s</span><span class="hljs-params">(ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">8002</span>)</span></span>;<br>    proxy::<span class="hljs-built_in">start</span>(ep_c, ep_s);<br>    service.<span class="hljs-built_in">run</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>你会注意到我在读和写中重用了buffer。这个重用是ok的，因为从客户端读取到的消息在新消息被读取之前就已经写入到服务端，反之亦然。这也意味着这种特别的实现方式会碰到响应性的问题。当我们正在处理到B部分的写入时，我们不会从A读取（我们会在写入到B部分完成时重新从A部分读取）。你可以通过下面的方式重写实现来克服这个问题：</p><ul><li>使用多个读取buffer</li><li>对每个成功的<em>read</em>操作，除了异步写回到另外一个部分，还需要做额外的一个<em>read</em>（读取到一个新的buffer）</li><li>对每个成功的<em>write</em>操作，销毁（或者重用）这个buffer</li></ul><p>我会把这个当作练习留给你们。</p><h3 id="小结">小结</h3><p>在选择同步或者异步时需要考虑很多事情。最先需要考虑的就是避免混淆它们。</p><p>在这一章中，我们已经看到：</p><ul><li>实现，测试，调试各个类型的应用是多么简单</li><li>线程是如何影响你的应用的</li><li>应用的行为是怎么影响它的实现的（拉取或者推送类型）</li><li>选择异步时怎样去嵌入自己的异步操作</li></ul><p>接下来，我们会了解一些Boost.Asio不那么为人知晓的特性，中间就有我最喜欢的Boost.Asio特性－协程，它可以让你轻松地取异步之精华，去异步之糟粕。</p><h2 id="Boost-Asio－其他特性">Boost.Asio－其他特性</h2><p>这章我们讲了解一些Boost.Asio不那么为人所知的特性。标准的stream和streambuf对象有时候会更难用一些，但正如你所见，它们也有它们的益处。最后，你会看到姗姗来迟的Boost.Asio协程的入口，它可以让你的异步代码变得非常易读。这是非常惊人的一个特性。</p><h3 id="标准stream和标准I-O-buffer">标准stream和标准I/O buffer</h3><p>读这一章节之前你需要对STL stream和STL streambuf对象有所了解。</p><p>Boost.Asio在处理I/O操作时支持两种类型的buffer：</p><ul><li><em>boost::asio::buffer()</em>：这种buffer关联着一个Boost.Asio的操作（我们使用的buffer被传递给一个Boost.Asio的操作）</li><li><em>boost::asio::streambuf</em>：这个buffer继承自<em>std::streambuf</em>，在网络编程中可以和STL stream一起使用</li></ul><p>纵观全书，之前的例子中最常见的例子如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(boost::system::error_code, <span class="hljs-type">size_t</span> bytes)</span></span>&#123; ... &#125;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">1024</span>];<br><span class="hljs-built_in">read</span>(sock, <span class="hljs-built_in">buffer</span>(buff), read_complete);<br><span class="hljs-built_in">write</span>(sock, <span class="hljs-built_in">buffer</span>(<span class="hljs-string">&quot;echo\n&quot;</span>));<br></code></pre></td></tr></table></figure><p>通常来说使用这个就能满足你的需要，如果你想要更复杂，你可以使用<em>streambuf</em>来实现。</p><p>这个就是你可以用<em>streambuf</em>对象做的最简单也是最坏的事情：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-built_in">read</span>(sock, buf);<br></code></pre></td></tr></table></figure><p>这个会一直读到<em>streambuf</em>对象满了，然后因为<em>streambuf</em>对象可以通过自己重新开辟空间从而获取更多的空间，它基本会读到连接被关闭。</p><p>你可以使用<em>read_until</em>一直读到一个特定的字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-built_in">read_until</span>(sock, buf, <span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>这个例子会一直读到一个“\n”为止，把它添加到<em>buffer</em>的末尾，然后退出<em>read</em>方法。</p><p>向一个<em>streambuf</em>对象写一些东西，你需要做一些类似下面的事情：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;buf)</span></span>;<br>out &lt;&lt; <span class="hljs-string">&quot;echo&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">write</span>(sock, buf);<br></code></pre></td></tr></table></figure><p>这是非常直观的；你在构造函数中传递你的<em>streambuf</em>对象来构建一个STL stream，将其写入到你想要发送的消息中，然后使用<em>write</em>来发送buffer的内容。</p><h3 id="Boost-Asio和STL-stream">Boost.Asio和STL stream</h3><p>Boost.Asio在集成STL stream和网络方面做了很棒的工作。也就是说，如果你已经在使用STL扩展，你肯定就已经拥有了大量重载了操作符&lt;&lt;和&gt;&gt;的类。从socket读或者写入它们就好像在公园漫步一样简单。</p><p>假设你有下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">person</span> &#123;<br>    std::string first_name, last_name;<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp; out, <span class="hljs-type">const</span> person &amp; p) &#123;<br>    <span class="hljs-keyword">return</span> out &lt;&lt; p.first_name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.last_name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.age;<br>&#125;<br>std::istream&amp; <span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp; in, person &amp; p) &#123;<br>    <span class="hljs-keyword">return</span> in &gt;&gt; p.first_name &gt;&gt; p.last_name &gt;&gt; p.age;<br>&#125; <br></code></pre></td></tr></table></figure><p>通过网络发送这个<em>person</em>就像下面的代码片段这么简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;buf)</span></span>;<br>person p;<br><span class="hljs-comment">// … 初始化p</span><br>out &lt;&lt; p &lt;&lt; std::endl;<br><span class="hljs-built_in">write</span>(sock, buf);<br></code></pre></td></tr></table></figure><p>另外一个部分也可以非常简单的读取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read_until</span>(sock, buf, <span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;buf)</span></span>;<br>person p;<br>in &gt;&gt; p;<br></code></pre></td></tr></table></figure><p>使用<em>streambuf</em>对象（当然，也包括它用来写入的<em>std::ostream</em>和用来读取的<em>std::istream</em>）时最棒的部分就是你最终的编码会很自然：</p><ul><li>当通过网络写入一些要发送的东西时，很有可能你会有多个片段的数据。所以，你需要把数据添加到一个buffer里面。如果那个数据不是一个字符串，你需要先把它转换成一个字符串。当使用&lt;&lt;操作符时这些操作默认都已经做了。</li><li>同样，在另外一个部分，当读取一个消息时，你需要解析它，也就是说，读取到一个片段的数据时，如果这个数据不是字符串，你需要将它转换为字符串。当你使用&gt;&gt;操作符读取一些东西时这些也是默认就做了的。</li></ul><p>最后要给出的是一个非常著名，非常酷的诀窍，使用下面的代码片段把<em>streambuf</em>的内容输出到console中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br>...<br>std::cout &lt;&lt; &amp;buf &lt;&lt; std::endl; <span class="hljs-comment">//把所有内容输出到console中</span><br></code></pre></td></tr></table></figure><p>同样的，使用下面的代码片段来把它的内容转换为一个<em>string</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::string <span class="hljs-title">to_string</span><span class="hljs-params">(streambuf &amp;buf)</span> </span>&#123;<br>    std::ostringstream out;<br>    out &lt;&lt; &amp;buf;<br>    <span class="hljs-keyword">return</span> out.<span class="hljs-built_in">str</span>();<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="streambuf类">streambuf类</h3><p>我之前说过，<em>streambuf</em>继承自<em>std::streambuf</em>。就像<em>std::streambuf</em>本身，它不能拷贝构造。</p><p>另外，它有一些额外的方法，如下：</p><ul><li><em>streambuf([max_size,][allocator])</em>：这个方法构造了一个<em>streambuf</em>对象。你可以选择指定一个最大的buffer大小和一个分配器，分配器用来在需要的时候分配/释放内存。</li><li><em>prepare(n)</em>：这个方法返回一个子buffer，用来容纳连续的n个字符。它可以用来读取或者写入。方法返回的结果可以在任何Boost.Asio处理<em>read/write</em>的自由函数中使用，而不仅仅是那些用来处理<em>streambuf</em>对象的方法。</li><li><em>data()</em>：这个方法以连续的字符串形式返回整个buffer然后用来写入。方法返回的结果可以在任何Boost.Asio处理写入的自由函数中使用，而不仅仅是那些用来处理streambuf对象的方法。</li><li><em>comsume(n)</em>：在这个方法中，数据从输入队列中被移除（从read操作）</li><li><em>commit(n)</em>：在这个方法中，数据从输出队列中被移除(从write操作)然后加入到输入队列中（为read操作准备）。</li><li><em>size()</em>：这个方法以字节为单位返回整个streambuf对象的大小。</li><li><em>max_size()</em>：这个方法返回最多能保存的字节数。</li></ul><p>除了最后的两个方法，其他的方法不是那么容易理解。首先，大部分时间你会把<em>streambuf</em>以参数的方式传递给<em>read/write</em>自由函数，就像下面的代码片段展示的一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read_until</span>(sock, buf, <span class="hljs-string">&quot;\n&quot;</span>); <span class="hljs-comment">// 读取到buf中</span><br><span class="hljs-built_in">write</span>(sock, buf); <span class="hljs-comment">// 从buf写入</span><br></code></pre></td></tr></table></figure><p>如果你想之前的代码片段展示的一样把整个buffer都传递到一个自由函数中，方法会保证把buffer的输入输出指针指向的位置进行增加。也就是说，如果有数据需要读，你就能读到它。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read_until</span>(sock, buf, <span class="hljs-string">&#x27;\n&#x27;</span>);<br>std::cout &lt;&lt; &amp;buf &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>上述代码会把你刚从socket写入的东西输出。而下面的代码不会输出任何东西：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read</span>(sock, buf.<span class="hljs-built_in">prepare</span>(<span class="hljs-number">16</span>), <span class="hljs-built_in">transfer_exactly</span>(<span class="hljs-number">16</span>) );<br>std::cout &lt;&lt; &amp;buf &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>字节被读取了，但是输入指针没有移动，你需要自己移动它，就像下面的代码片段所展示的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read</span>(sock, buf.<span class="hljs-built_in">prepare</span>(<span class="hljs-number">16</span>), <span class="hljs-built_in">transfer_exactly</span>(<span class="hljs-number">16</span>) );<br>buf.<span class="hljs-built_in">commit</span>(<span class="hljs-number">16</span>);<br>std::cout &lt;&lt; &amp;buf &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>同样的，假设你需要从<em>streambuf</em>对象中写入，如果你使用了<em>write</em>自由函数，则需要像下面一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;buf)</span></span>;<br>out &lt;&lt; <span class="hljs-string">&quot;hi there&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">write</span>(sock, buf);<br></code></pre></td></tr></table></figure><p>下面的代码会把hi there发送三次：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;buf)</span></span>;<br>out &lt;&lt; <span class="hljs-string">&quot;hi there&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)<br>    <span class="hljs-built_in">write</span>(sock, buf.<span class="hljs-built_in">data</span>());<br></code></pre></td></tr></table></figure><p>发生的原因是因为buffer从来没有被消耗过，因为数据还在。如果你想消耗它，使用下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;buf)</span></span>;<br>out &lt;&lt; <span class="hljs-string">&quot;hi there&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-built_in">write</span>(sock, buf.<span class="hljs-built_in">data</span>());<br>buf.<span class="hljs-built_in">consume</span>(<span class="hljs-number">9</span>);<br></code></pre></td></tr></table></figure><p>总的来说，你最好选择一次处理整个<em>streambuf</em>实例。如果需要调整则使用上述的方法。</p><p>尽管你可以在读和写操作时使用同一个<em>streambuf</em>，你仍然建议你分开使用两个，一个读另外一个写，它会让事情变的简单，清晰，同时你也会减少很多导致bug的可能。</p><h3 id="处理streambuf对象的自由函数">处理streambuf对象的自由函数</h3><p>下面列出了Boost.Asio中处理streambuf对象的自由函数：</p><ul><li><em>read(sock, buf[, completion_function])</em>：这个方法把内容从socket读取到<em>streambuf</em>对象中。<em>completion</em>方法是可选的。如果有，它会在每次<em>read</em>操作成功之后被调用，然后告诉Boost.Asio这个操作是否完成（如果没有，它继续读取）。它的格式是：<em>size_t completion(const boost::system::error_code &amp; err, size_t bytes_transfered);</em>，如果<em>completion</em>方法返回0，我们认为<em>read</em>操作完成了，如果非0，它表示下一次调用stream的<em>read_some</em>方法需要读取的最大的字节数。</li><li><em>read_at(random_stream, offset, buf [, completion_function])</em>:  这个方法从一个支持随机读取的stream中读取。注意它没有被应用到socket中（因为他们没有随机读取的模型，它们是单向的，一直向前）。</li><li><em>read_until(sock, buf, char | string | regex | match_condition)</em>: 这个方法一直读到满足一个特性的条件为止。或者是一个char类型的数据被读到，或者是一个字符串被读到，或者是一个目前读到的字符串能匹配的正则表达式，或者<em>match_condition</em>方法告诉我们需要结束这个方法。<em>match_condition</em>方法的格式是：<em>pair&lt;iterator,bool&gt; match(iterator begin, iterator end);</em> ，<em>iterator</em>代表 <em>buffers_ iterator<a href="streambuf::const_buffers_type">streambuf::const_buffers_type</a></em>。如果匹配到，你需要返回一个<em>pair</em>（<em>passed_end_of_match</em>被设置成true）。如果没有匹配到，你需要返回<em>pair</em>（begin被设置为false）。</li><li><em>write(sock, buf [, completion_function])</em>:  这个方法写入<em>streambuf</em>对象所有的内容。<em>completion</em>方法是可选的，它的表现和<em>read()<em>的</em>completion</em>方法类似：当write操作完成时返回0，或者返回一个非0数代表下一次调用stream的<em>write_some</em>方法需要写入的最大的字节数。</li><li><em>write_at(random_stream,offset, buf [, completion_function])</em>: 这个方法用来向一个支持随机存储的stream写入。同样，它没有被应用到socket中。</li><li><em>async_read(sock, buf [, competion_function], handler)</em>:  这个方法是*read()*的异步实现，handler的格式为：<em>void handler(const boost::system::error_code, size_t bytes)</em>。</li><li><em>async_read_at(radom_stream, offset, buf [, completion_function] , handler)</em>: 这个方法是*read_at()*的异步实现。</li><li><em>async_read_until (sock, buf, char | string | regex | match_ condition, handler)</em>:  这个方法是*read_until()*的异步实现。</li><li><em>async_write(sock, buf [, completion_function] , handler)</em>:  这个方法是*write()*的异步实现。</li><li><em>async_write_at(random_stream,offset, buf [, completion_function] , handler)</em>:  这个方法是*write_at()*的异步实现。</li></ul><p>我们假设你需要一直读取直到读到一个元音字母：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_vowel</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;a&#x27;</span> || c == <span class="hljs-string">&#x27;e&#x27;</span> || c == <span class="hljs-string">&#x27;i&#x27;</span> || c == <span class="hljs-string">&#x27;o&#x27;</span> || c == <span class="hljs-string">&#x27;u&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_complete</span><span class="hljs-params">(boost::system::error_code, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> * begin = <span class="hljs-built_in">buffer_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span>*&gt;( buf.<span class="hljs-built_in">data</span>());<br>    <span class="hljs-keyword">if</span> ( bytes == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> ( bytes &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">is_vowel</span>(*begin++)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> --bytes;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>...<br><span class="hljs-built_in">read</span>(sock, buf, read_complete);<br></code></pre></td></tr></table></figure><p>这里需要注意的事情是对<em>read_complete()<em>中buffer的访问，也就是</em>buffer_cast&lt;&gt;<em>和</em>buf.data</em>。</p><p>如果你使用正则，上面的例子会更简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">read_until</span>(sock, buf, boost::<span class="hljs-built_in">regex</span>(<span class="hljs-string">&quot;^[aeiou]+&quot;</span>) ); <br></code></pre></td></tr></table></figure><p>或者我们修改例子来让<em>match_condition</em>方法工作起来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">streambuf buf;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_vowel</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;a&#x27;</span> || c == <span class="hljs-string">&#x27;e&#x27;</span> || c == <span class="hljs-string">&#x27;i&#x27;</span> || c == <span class="hljs-string">&#x27;o&#x27;</span> || c == <span class="hljs-string">&#x27;u&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">typedef</span> buffers_iterator&lt;streambuf::const_buffers_type&gt; iterator;<br><span class="hljs-function">std::pair&lt;iterator,<span class="hljs-type">bool</span>&gt; <span class="hljs-title">match_vowel</span><span class="hljs-params">(iterator b, iterator e)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> ( b != e)<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">is_vowel</span>(*b++)) <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_pair</span>(b, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">make_pair</span>(e, <span class="hljs-literal">false</span>);<br>&#125;<br>...<br><span class="hljs-type">size_t</span> bytes = <span class="hljs-built_in">read_until</span>(sock, buf, match_vowel);<br></code></pre></td></tr></table></figure><p>当使用<em>read_until</em>时会有个难点：你需要记住你已经读取的字节数，因为下层的buffer可能多读取了一些字节（不像使用*read()*时）。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; &amp;buf &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>上述代码输出的字节可能比<em>read_until</em>读取到的多。</p><h3 id="协程">协程</h3><p>Boost.Asio的作者在2009-2010年间实现了非常酷的一个部分，协程，它能让你更简单地设计你的异步应用。</p><p>它们可以让你同时享受同步和异步两个世界中最好的部分，也就是：异步编程但是很简单就能遵循流程控制，就好像应用是按流程实现的。</p><p><img src="http://d.pcs.baidu.com/thumbnail/75bba5ebc1781380baf5c8ecf40b7f6e?fid=3238002958-250528-571276571493867&amp;time=1420772400&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-xqB0SvR9wei6sSPHYGH86JOKGw4%3D&amp;rt=sh&amp;expires=2h&amp;r=263323555&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p><p>正常的流程已经在情形1种展示了，如果使用协程，你会尽可能的接近情形2。</p><p>简单来说，就是协程允许在方法中的指定位置开辟一个入口来暂停和恢复运行。</p><p>如果要使用协程，你需要在<em>boost/libs/asio/example/http/server4</em>目录下的两个头文件：<em>yield.hpp</em>和<em>coroutine.hpp</em>。在这里，Boost.Asio定义了两个虚拟的关键词（宏）和一个类：</p><ul><li><em>coroutine</em>：这个类在实现协程时被你的连接类继承或者使用。</li><li><em>reenter(entry)</em>：这个是协程的主体。参数<em>entry</em>是一个指向<em>coroutine</em>实例的指针，它被当作一个代码块在整个方法中使用。</li><li><em>yield code</em>：它把一个声明当作协程的一部分来运行。当下一次进入方法时，操作会在这段代码之后执行。</li></ul><p>为了更好的理解，我们来看一个例子。我们会重新实现 <strong>第四章 异步客户端</strong> 中的应用，这是一个可以登录，ping，然后能告诉你其他已登录客户端的简单客户端应用。<br>核心代码和下面的代码片段类似：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_svr</span> : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;talk_to_svr&gt;, <span class="hljs-keyword">public</span> coroutine, boost::noncopyable &#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">step</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err = error_code(), <span class="hljs-type">size_t</span> bytes = <span class="hljs-number">0</span>)</span> </span>&#123;<br>        <span class="hljs-built_in">reenter</span>(<span class="hljs-keyword">this</span>) <br>        &#123; <br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-function">yield <span class="hljs-title">async_write</span><span class="hljs-params">(sock_, write_buffer_, MEM_FN2(step,_1,_2) )</span></span>;<br>                <span class="hljs-function">yield <span class="hljs-title">async_read_until</span><span class="hljs-params">( sock_, read_buffer_,<span class="hljs-string">&quot;\n&quot;</span>, MEM_FN2(step,_1,_2))</span></span>;<br>                yield service.<span class="hljs-built_in">post</span>( <span class="hljs-built_in">MEM_FN</span>(on_answer_from_server));<br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;; <br></code></pre></td></tr></table></figure><p>首先改变的事就是：我们只有一个叫做*step()<em>的方法，而没有大量类似</em>connect()，on_connect()，on_read()，do_read()，on_write()，do_write()*等等的成员方法。</p><p>方法的主体在<em>reenter(this) { for (;;) { }}</em> 内。你可以把*reenter(this)*当作我们上次运行的代码，所以这次我们执行的是下一次的代码。</p><p>在<em>reenter</em>代码块中，你会发现几个<em>yield</em>声明。你第一次进入方法时，<em>async_write</em>方法被执行，第二次<em>async_read_until</em>方法被执行，第三次<em>service.post</em>方法被执行，然后第四次<em>async_write</em>方法被执行，然后一直循环下去。</p><p>你需要一直记住*for(;;){}*实例。参考下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">step</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err = error_code(), <span class="hljs-type">size_t</span> bytes = <span class="hljs-number">0</span>)</span> </span>&#123;<br>    <span class="hljs-built_in">reenter</span>(<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-function">yield <span class="hljs-title">async_write</span><span class="hljs-params">(sock_, write_buffer_, MEM_FN2(step,_1,_2) )</span></span>;<br>        <span class="hljs-function">yield <span class="hljs-title">async_read_until</span><span class="hljs-params">( sock_, read_buffer_, <span class="hljs-string">&quot;\n&quot;</span>,MEM_FN2(step,_1,_2))</span></span>;<br>        yield service.<span class="hljs-built_in">post</span>(<span class="hljs-built_in">MEM_FN</span>(on_answer_from_server));<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>如果我们第三次使用上述的代码片段，我们会进入方法然后执行<em>service.post</em>。当我们第四次进入方法时，我们跳过<em>service.post</em>，不执行任何东西。当执行第五次时仍然不执行任何东西，然后一直这样下去：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_svr</span> : <span class="hljs-keyword">public</span> boost::enable_shared_from_this&lt;talk_to_svr&gt;, <span class="hljs-keyword">public</span> coroutine, boost::noncopyable &#123;<br>    <span class="hljs-built_in">talk_to_svr</span>(<span class="hljs-type">const</span> std::string &amp; username) : ... &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep)</span> </span>&#123;<br>        sock_.<span class="hljs-built_in">async_connect</span>(ep, <span class="hljs-built_in">MEM_FN2</span>(step,_1,<span class="hljs-number">0</span>) );<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> ptr <span class="hljs-title">start</span><span class="hljs-params">(ip::tcp::endpoint ep, <span class="hljs-type">const</span> std::string &amp;username)</span> </span>&#123;<br>        <span class="hljs-function">ptr <span class="hljs-title">new_</span><span class="hljs-params">(<span class="hljs-keyword">new</span> talk_to_svr(username))</span></span>;<br>        new_-&gt;<span class="hljs-built_in">start</span>(ep); <br>        <span class="hljs-keyword">return</span> new_;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">step</span><span class="hljs-params">(<span class="hljs-type">const</span> error_code &amp; err = error_code(), <span class="hljs-type">size_t</span> bytes = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">reenter</span>(<span class="hljs-keyword">this</span>) &#123; <br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">if</span> ( !started_) &#123;<br>                    started_ = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;write_buf_)</span></span>;<br>                    out &lt;&lt; <span class="hljs-string">&quot;login &quot;</span> &lt;&lt; username_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;<br>                <span class="hljs-function">yield <span class="hljs-title">async_write</span><span class="hljs-params">(sock_, write_buf_,MEM_FN2(step,_1,_2))</span></span>;<br>                <span class="hljs-function">yield <span class="hljs-title">async_read_until</span><span class="hljs-params">( sock_,read_buf_,<span class="hljs-string">&quot;\n&quot;</span>,MEM_FN2(step,_1,_2))</span></span>;<br>                yield service.<span class="hljs-built_in">post</span>(<span class="hljs-built_in">MEM_FN</span>(on_answer_from_server));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_answer_from_server</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;read_buf_)</span></span>;<br>        std::string word;<br>        in &gt;&gt; word;<br>        <span class="hljs-keyword">if</span> ( word == <span class="hljs-string">&quot;login&quot;</span>) <span class="hljs-built_in">on_login</span>();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( word == <span class="hljs-string">&quot;ping&quot;</span>) <span class="hljs-built_in">on_ping</span>();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( word == <span class="hljs-string">&quot;clients&quot;</span>) <span class="hljs-built_in">on_clients</span>();<br>        read_buf_.<span class="hljs-built_in">consume</span>( read_buf_.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">if</span> (write_buf_.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) service.<span class="hljs-built_in">post</span>(<span class="hljs-built_in">MEM_FN2</span>(step,<span class="hljs-built_in">error_code</span>(),<span class="hljs-number">0</span>));<br>    &#125;<br>    ... <br><span class="hljs-keyword">private</span>:<br>    ip::tcp::socket sock_;<br>    streambuf read_buf_, write_buf_;<br>    <span class="hljs-type">bool</span> started_;<br>    std::string username_;<br>    deadline_timer timer_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>当我们启动连接时，<em>start()<em>被调用，然后它会异步地连接到服务端。当连接完成时，我们第一次进入</em>step()</em>。也就是我们发送我们登录信息的时候。</p><p>在那之后，我们调用<em>async_write</em>，然后调用<em>async_read_until</em>，再处理消息（<em>on_answer_from_server</em>）。</p><p>我们在<em>on_answer_from_server</em>处理接收到的消息；我们读取第一个字符，然后把它分发到相应的方法。剩下的消息（如果还有一些消息没读完）我们都忽略掉：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">talk_to_svr</span> : ... &#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_login</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-built_in">do_ask_clients</span>(); &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_ping</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;read_buf_)</span></span>;<br>        std::string answer; in &gt;&gt; answer;<br>        <span class="hljs-keyword">if</span> ( answer == <span class="hljs-string">&quot;client_list_changed&quot;</span>)<br>            <span class="hljs-built_in">do_ask_clients</span>();<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">postpone_ping</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_clients</span><span class="hljs-params">()</span> </span>&#123;<br>        std::ostringstream clients; clients &lt;&lt; &amp;read_buf_;<br>        std::cout &lt;&lt; username_ &lt;&lt; <span class="hljs-string">&quot;, new client list:&quot;</span> &lt;&lt; clients.<span class="hljs-built_in">str</span>();<br>        <span class="hljs-built_in">postpone_ping</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ping</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;write_buf_)</span></span>; out &lt;&lt; <span class="hljs-string">&quot;ping\n&quot;</span>;<br>        service.<span class="hljs-built_in">post</span>( <span class="hljs-built_in">MEM_FN2</span>(step,<span class="hljs-built_in">error_code</span>(),<span class="hljs-number">0</span>));<br>    &#125; <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postpone_ping</span><span class="hljs-params">()</span> </span>&#123;<br>        timer_.<span class="hljs-built_in">expires_from_now</span>(boost::posix_time::<span class="hljs-built_in">millisec</span>(<span class="hljs-built_in">rand</span>() % <span class="hljs-number">7000</span>));<br>        timer_.<span class="hljs-built_in">async_wait</span>( <span class="hljs-built_in">MEM_FN</span>(do_ping));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_ask_clients</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-function">std::ostream <span class="hljs-title">out</span><span class="hljs-params">(&amp;write_buf_)</span></span>;<br>        out &lt;&lt; <span class="hljs-string">&quot;ask_clients\n&quot;</span>;<br>    &#125;<br>&#125;; <br></code></pre></td></tr></table></figure><p>完整的例子还会更复杂一点，因为我们需要随机地ping服务端。实现这个功能我们需要在第一次请求客户端列表完成之后做一个ping操作。然后，在每个从服务端返回的ping操作的结果中，我们做另外一个ping操作。</p><p>使用下面的代码片段来执行整个过程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    ip::<span class="hljs-function">tcp::endpoint <span class="hljs-title">ep</span><span class="hljs-params">(ip::address::from_string(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">8001</span>)</span></span>;<br>    talk_to_svr::<span class="hljs-built_in">start</span>(ep, <span class="hljs-string">&quot;John&quot;</span>);<br>    service.<span class="hljs-built_in">run</span>();<br>&#125; <br></code></pre></td></tr></table></figure><p>使用协程，我们节约了15行代码，而且代码也变的更加易读。</p><p>在这里我们仅仅接触了协程的一点皮毛。如果你想要了解更多，请登录作者的个人主页：<a href="http://blog.think-async.com/2010_03_01_archive.html">http://blog.think-async.com/2010_03_01_archive.html</a>。</p><h3 id="总结-5">总结</h3><p>我们已经了解了如何使用Boost.Asio玩转STL stream和streambuf对象。我们也了解了如何使用协程来让我们的代码更加简洁和易读。</p><p>下面就是重头戏了，比如Asio VS Boost.Asio，高级调试，SSL和平台相关特性。</p><h2 id="Boost-Asio－进阶话题">Boost.Asio－进阶话题</h2><p>这一章对Boost.Asio的一些进阶话题进行了阐述。在日常编程中深入研究这些问题是不太可能的，但是知道这些肯定是有好处的：</p><ul><li>如果调试失败，你需要看Boost.Asio能帮到你什么</li><li>如果你需要处理SSL，看Boost.Asio能帮你多少</li><li>如果你指定一个操作系统，看Boost.Asio为你准备了哪些额外的特性</li></ul><h3 id="Asio-VS-Boost-Asio">Asio VS Boost.Asio</h3><p>Boost.Asio的作者也保持了Asio。你可以用Asio的方式来思考，因为它在两种情况中都有：Asio（非Boost的）和Boost.Asio。作者声明过更新都会先在非Boost中出现，然后过段时间后，再加入到Boost的发布中。</p><p>不同点被归纳到下面几条：</p><ul><li>Asio被定义在*asio::<em>的命名空间中，而Boost.Asio被定义在</em>boost::asio::*中</li><li>Asio的主头文件是<em>asio.hpp</em>，而Boost.Asio的头文件是<em>boost/asio.hpp</em></li><li>Asio也有一个启动线程的类（和<em>boost::thread</em>一样）</li><li>Asio提供它自己的错误码类(<em>asio::error_code</em>代替<em>boost::system::error_code</em>，然后<em>asio:system_error</em>代替<em>boost::systrem::system_error</em>)</li></ul><p>你可以在这里查阅更多Asio的信息：<a href="http://think_async.com">http://think_async.com</a></p><p>你需要自己决定你选择的版本，我选择Boost.Asio。下面是一些当你做选择时需要考虑的问题：</p><ul><li>Asio的新版本比Boost.Asio的新版本发布要早（因为Boost的版本更新比较少）</li><li>Asio只有头文件（而Boost.Asio的部分依赖于其他Boost库，这些库可能需要编译）</li><li>Asio和Boost.Asio都是非常成熟的，所以除非你非常需要一些Asio新发布的特性，Boost.Asio是非常保险的选择，而且你也可以同时拥有其他Boost库的资源</li></ul><p>尽管我不推荐这样，你可以在一个应用中同时使用Asio和Boost.Asio。在允许的情况下这是很自然的，比如你使用Asio，然后一些第三方库是Boost.Asio，反之亦然。</p><h3 id="调试">调试</h3><p>调试同步应用往往比调试异步应用要简单。对于同步应用，如果阻塞了，你会跳转进入调试，然后你会知道你在哪（同步意味着有序的）。然而如果是异步，事件不是有序发生的，所以在调试中是非常难知道到底发生了什么的。</p><p>为了避免这种情况，首先，你需要深入了解协程。如果实现正确，基本上你一点也不会碰到异步调试的问题。</p><p>以防万一，在做异步编码的时候，Boost.Asio还是对你伸出了援手；Boost.Asio允许“句柄追踪”，当<em>BOOST_ASIO_ENABLE_HANDLER_TRACKING</em>被定义时，Boost.Asio会写很多辅助的输出到标准错误流，纪录时间，异步操作，以及操作和完成处理handler的关系。</p><h4 id="句柄追踪信息">句柄追踪信息</h4><p>虽然输出信息不是那么容易理解，但是有总比没有好。Boost.Asio的输出是*@asio|<timestamp>|<action>|<description>*<br>。<br>第一个标签永远都是*@asio*，因为其他代码也会输出到标准错误流（和<em>std::error</em>相当），所以你可以非常简单的用这个标签过滤从Boost.Asio打印出来的信息。<em>timestamp</em>实例从1970年1月1号到现在的秒数和毫秒数。<em>action</em>实例可以是下面任何一种：</p><ul><li><em>&gt;n</em>：这个在我们进入handler <em>n</em>的时候使用。<em>description</em>实例包含了我们发送给handler的参数。</li><li><em>&lt;n</em>：这个在我们退出handler <em>n</em>的时候使用。</li><li><em>!n</em>：这个当我们因为异常退出handler <em>n</em>的时候使用。</li><li><em>-n</em>：这个当handler <em>n</em>在没有调用的情况就退出的时候使用；可能是因为io_service实例被删除地太快了（在<em>n</em>有机会被调用之前）</li><li><em>n</em>m*：这个当handler <em>n</em>创建了一个新的有完成处理hanlder * <em>m</em>的异步操作时被调用。<em>description</em>实例展示的就是异步操作开始的地方。当你看到*&gt;m*（开始）和*&lt;m*（结束）时<em>completion</em>句柄被调用了。</li><li><em>n</em>：就像在<em>description</em>中展示的一样，这个当handler <em>n</em>做了一个操作的时候使用（可能是<em>close</em>或者<em>cancel</em>操作）。你一般可以忽略这些信息。</li></ul><p>当<em>n</em>是0时，操作是在所有（异步）handler之外被执行的；你经常会在第一个操作时看到这个，或者当你使用的信号量其中一个被触发时。</p><p>你需要特别注意类型为*!n<em>和</em>-n<em>的信息，这些信息大部分都意味着你的代码有错误。在第一种情形中，异步方法没有抛出异常，所以，异常一定是你自己造成的；你不能让异常跑出你的</em>completion<em>句柄。第二种情形中，你可能太早就销毁了</em>io_service*实例，在所有完成处理句被调用之前。</p><h4 id="一个例子">一个例子</h4><p>为了向你展示一个带辅助输出信息的例子，我们修改了在<strong>第六章 Boost.Asio其他特性</strong> 中使用的例子。你所需要做的仅仅是在包含<em>boost/asio.hpp</em>之前添加一个*#define*</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">define</span> BOOST_ASIO_ENABLE_HANDLER_TRACKING</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/asio.hpp&gt;</span></span><br>...<br></code></pre></td></tr></table></figure><p>同时，我们也在用户登录和接收到第一个客户端列表时将信息输出到控制台中。输出会如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp">@asio|<span class="hljs-number">1355603116.602867</span>|<span class="hljs-number">0</span>*<span class="hljs-number">1</span>|socket@<span class="hljs-number">008</span>D4EF8.async_connect<br>@asio|<span class="hljs-number">1355603116.604867</span>|&gt;<span class="hljs-number">1</span>|ec=system:<span class="hljs-number">0</span><br>@asio|<span class="hljs-number">1355603116.604867</span>|<span class="hljs-number">1</span>*<span class="hljs-number">2</span>|socket@<span class="hljs-number">008</span>D4EF8.async_send<br>@asio|<span class="hljs-number">1355603116.604867</span>|&lt;<span class="hljs-number">1</span>|<br>@asio|<span class="hljs-number">1355603116.604867</span>|&gt;<span class="hljs-number">2</span>|ec=system:<span class="hljs-number">0</span>,bytes_transferred=<span class="hljs-number">11</span><br>@asio|<span class="hljs-number">1355603116.604867</span>|<span class="hljs-number">2</span>*<span class="hljs-number">3</span>|socket@<span class="hljs-number">008</span>D4EF8.async_receive<br>@asio|<span class="hljs-number">1355603116.604867</span>|&lt;<span class="hljs-number">2</span>|<br>@asio|<span class="hljs-number">1355603116.605867</span>|&gt;<span class="hljs-number">3</span>|ec=system:<span class="hljs-number">0</span>,bytes_transferred=<span class="hljs-number">9</span><br>@asio|<span class="hljs-number">1355603116.605867</span>|<span class="hljs-number">3</span>*<span class="hljs-number">4</span>|io_service@<span class="hljs-number">008</span>D4BC8.post<br>@asio|<span class="hljs-number">1355603116.605867</span>|&lt;<span class="hljs-number">3</span>|<br>@asio|<span class="hljs-number">1355603116.605867</span>|&gt;<span class="hljs-number">4</span>|<br>John logged in<br>@asio|<span class="hljs-number">1355603116.606867</span>|<span class="hljs-number">4</span>*<span class="hljs-number">5</span>|io_service@<span class="hljs-number">008</span>D4BC8.post<br>@asio|<span class="hljs-number">1355603116.606867</span>|&lt;<span class="hljs-number">4</span>|<br>@asio|<span class="hljs-number">1355603116.606867</span>|&gt;<span class="hljs-number">5</span>|<br>@asio|<span class="hljs-number">1355603116.606867</span>|<span class="hljs-number">5</span>*<span class="hljs-number">6</span>|socket@<span class="hljs-number">008</span>D4EF8.async_send<br>@asio|<span class="hljs-number">1355603116.606867</span>|&lt;<span class="hljs-number">5</span>|<br>@asio|<span class="hljs-number">1355603116.606867</span>|&gt;<span class="hljs-number">6</span>|ec=system:<span class="hljs-number">0</span>,bytes_transferred=<span class="hljs-number">12</span><br>@asio|<span class="hljs-number">1355603116.606867</span>|<span class="hljs-number">6</span>*<span class="hljs-number">7</span>|socket@<span class="hljs-number">008</span>D4EF8.async_receive<br>@asio|<span class="hljs-number">1355603116.606867</span>|&lt;<span class="hljs-number">6</span>|<br>@asio|<span class="hljs-number">1355603116.606867</span>|&gt;<span class="hljs-number">7</span>|ec=system:<span class="hljs-number">0</span>,bytes_transferred=<span class="hljs-number">14</span><br>@asio|<span class="hljs-number">1355603116.606867</span>|<span class="hljs-number">7</span>*<span class="hljs-number">8</span>|io_service@<span class="hljs-number">008</span>D4BC8.post<br>@asio|<span class="hljs-number">1355603116.607867</span>|&lt;<span class="hljs-number">7</span>|<br>@asio|<span class="hljs-number">1355603116.607867</span>|&gt;<span class="hljs-number">8</span>|<br>John, <span class="hljs-keyword">new</span> client list: John<br></code></pre></td></tr></table></figure><p>让我们一行一行分析：</p><ul><li>我们进入<em>async_connect</em>，它创建了句柄1（在这个例子中，所有的句柄都是<em>talk_to_svr::step</em>）</li><li>句柄1被调用（当成功连接到服务端时）</li><li>句柄1调用<em>async_send</em>，这创建了句柄2（这里，我们发送登录信息到服务端）</li><li>句柄1退出</li><li>句柄2被调用，11个字节被发送出去（login John）</li><li>句柄2调用<em>async_receive</em>，这创建了句柄3（我们等待服务端返回登录的结果）</li><li>句柄2退出</li><li>句柄3被调用，我们收到了9个字节（login ok）</li><li>句柄3调用<em>on_answer_from_server</em>（这创建了句柄4）</li><li>句柄3退出</li><li>句柄4被调用，这会输出John logged in</li><li>句柄4调用了另外一个step（句柄5），这会写入<em>ask_clients</em></li><li>句柄4退出</li><li>句柄5进入</li><li>句柄5，<em>async_send_ask_clients</em>，创建句柄6</li><li>句柄5退出</li><li>句柄6调用<em>async_receive</em>，这创建了句柄7（我们等待服务端发送给我们已存在的客户端列表）</li><li>句柄6退出</li><li>句柄7被调用，我们接受到了客户端列表</li><li>句柄7调用<em>on_answer_from_server</em>（这创建了句柄8）</li><li>句柄7退出</li><li>句柄8进去，然后输出客户端列表（<em>on_clients</em>）</li></ul><p>这需要时间去理解，但是一旦你理解了，你就可以分辨出有问题的输出，从而找出需要被修复的那段代码。</p><h4 id="句柄追踪信息输出到文件">句柄追踪信息输出到文件</h4><p>默认情况下，句柄的追踪信息被输出到标准错误流（相当于<em>std::cerr</em>）。而把输出重定向到其他地方的可能性是非常高的。对于控制台应用，输出和错误输出都被默认输出到相同的地方，也就是控制台。但是对于一个windows（非命令行）应用来说，默认的错误流是null。</p><p>你可以通过命令行把错误输出重定向，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">some_application <span class="hljs-number">2</span>&gt;err.txt<br></code></pre></td></tr></table></figure><p>或者，如果你不是很懒，你可以代码实现，就像下面的代码片段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//  对于Windows</span><br>HANDLE h = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;err.txt&quot;</span>, GENERIC_WRITE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, CREATE_ALWAYS,<br>FILE_ATTRIBUTE_NORMAL , <span class="hljs-number">0</span>);<br><span class="hljs-built_in">SetStdHandle</span>(STD_ERROR_HANDLE, h);<br><span class="hljs-comment">// 对于Unix</span><br><span class="hljs-type">int</span> err_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;err.txt&quot;</span>, O_WRONLY);<br><span class="hljs-built_in">dup2</span>(err_file, STDERR_FILENO);<br></code></pre></td></tr></table></figure><h3 id="SSL">SSL</h3><p>Boost.Asio提供了一些支持基本SSL的类。它在幕后使用的其实是OpenSSL，所以，如果你想使用SSL，首先从<a href="www.openssl.org">www.openssl.org</a>下载OpenSSL然后构建它。你需要注意，构建OpenSSL通常来说不是一个简单的任务，尤其是你没有一个常用的编译器，比如Visual Studio。</p><p>假如你成功构建了OpenSSL，Boost.Asio就会有一些围绕它的封装类：</p><ul><li><em>ssl::stream</em>：它代替<em>ip:<protocol>::socket</em>来告诉你用什么</li><li><em>ssl::context</em>：这是给第一次握手用的上下文</li><li><em>ssl::rfc2818_verification</em>：使用这个类可以根据RFC 2818协议非常简单地通过证书认证一个主机名</li></ul><p>首先，你创建和初始化SSL上下文，然后使用这个上下文打开一个连接到指定远程主机的socket，然后做SSL握手。握手一结束，你就可以使用Boost.Asio的<em>read</em>/write**等自由函数。</p><p>下面是一个连接到Yahoo！的HTTPS客户端例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/asio.hpp&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/asio/ssl.hpp&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br>io_service service;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">typedef</span> ssl::stream&lt;ip::tcp::socket&gt; ssl_socket;<br>    <span class="hljs-function">ssl::context <span class="hljs-title">ctx</span><span class="hljs-params">(ssl::context::sslv23)</span></span>;<br>    ctx.<span class="hljs-built_in">set_default_verify_paths</span>();<br>    <span class="hljs-comment">// 打开一个到指定主机的SSL socket</span><br>    io_service service;<br>    <span class="hljs-function">ssl_socket <span class="hljs-title">sock</span><span class="hljs-params">(service, ctx)</span></span>;<br>    ip::<span class="hljs-function">tcp::resolver <span class="hljs-title">resolver</span><span class="hljs-params">(service)</span></span>;<br>    std::string host = <span class="hljs-string">&quot;www.yahoo.com&quot;</span>;<br>    ip::tcp::<span class="hljs-function">resolver::query <span class="hljs-title">query</span><span class="hljs-params">(host, <span class="hljs-string">&quot;https&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">connect</span>(sock.<span class="hljs-built_in">lowest_layer</span>(), resolver.<span class="hljs-built_in">resolve</span>(query));<br>    <span class="hljs-comment">// SSL 握手</span><br>    sock.<span class="hljs-built_in">set_verify_mode</span>(ssl::verify_none);<br>    sock.<span class="hljs-built_in">set_verify_callback</span>(ssl::<span class="hljs-built_in">rfc2818_verification</span>(host));<br>    sock.<span class="hljs-built_in">handshake</span>(ssl_socket::client);<br>    std::string req = <span class="hljs-string">&quot;GET /index.html HTTP/1.0\r\nHost: &quot;</span> + host + <span class="hljs-string">&quot;\r\nAccept: */*\r\nConnection: close\r\n\r\n&quot;</span>;<br>    <span class="hljs-built_in">write</span>(sock, <span class="hljs-built_in">buffer</span>(req.<span class="hljs-built_in">c_str</span>(), req.<span class="hljs-built_in">length</span>()));<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br>    boost::system::error_code ec;<br>    <span class="hljs-keyword">while</span> ( !ec) &#123;<br>        <span class="hljs-type">int</span> bytes = <span class="hljs-built_in">read</span>(sock, <span class="hljs-built_in">buffer</span>(buff), ec);<br>        std::cout &lt;&lt; std::<span class="hljs-built_in">string</span>(buff, bytes);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>第一行能很好的自释。当你连接到远程主机，你使用<em>sock.lowest_layer()</em>，也就是说，你使用底层的socket（因为<em>ssl::stream</em>仅仅是一个封装）。接下来三行进行了握手。握手一结束，你使用Booat.Asio的*write()*方法做了一个HTTP请求，然后读取（<em>read()</em>）所有接收到的字节。</p><p>当实现SSL服务端的时候，事情会变的有点复杂。Boost.Asio有一个SSL服务端的例子，你可以在<em>boost/libs/asio/example/ssl/server.cpp</em>中找到。</p><h3 id="Boost-Asio的Windows特性">Boost.Asio的Windows特性</h3><p>接下来的特性只赋予Windows操作系统</p><h4 id="流处理">流处理</h4><p>Boost.Asio允许你在一个Windows句柄上创建封装，这样你就可以使用大部分的自由函数，比如<em>read()，read_until()，write()，async_read()，async_read_until()<em>和</em>async_write()</em>。下面告诉你如何从一个文件读取一行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HANDLE file = ::<span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;readme.txt&quot;</span>, GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, <span class="hljs-number">0</span>);<br><span class="hljs-function">windows::stream_handle <span class="hljs-title">h</span><span class="hljs-params">(service, file)</span></span>;<br>streambuf buf;<br><span class="hljs-type">int</span> bytes = <span class="hljs-built_in">read_until</span>(h, buf, <span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-function">std::istream <span class="hljs-title">in</span><span class="hljs-params">(&amp;buf)</span></span>;<br>std::string line;<br>std::<span class="hljs-built_in">getline</span>(in, line);<br>std::cout &lt;&lt; line &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p><em>stream_handle</em>类只有在I/O完成处理端口正在被使用的情况下才有效（这是默认情况）。如果情况满足，<em>BOOST_ASIO_HAS_WINDOWS_STREAM_HANDLE</em>就被定义</p><h4 id="随机访问句柄">随机访问句柄</h4><p>Boost.Asio允许对一个指向普通文件的句柄进行随机读取和写入。同样，你为这个句柄创建一个封装，然后使用自由函数，比如<em>read_at()，write_at()，async_read_at()，async_write_at()</em>。要从1000的地方读取50个字节，你需要使用下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HANDLE file = ::<span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">&quot;readme.txt&quot;</span>, GENERIC_READ, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, <span class="hljs-number">0</span>);<br><span class="hljs-function">windows::random_access_handle <span class="hljs-title">h</span><span class="hljs-params">(service, file)</span></span>;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> bytes = <span class="hljs-built_in">read_at</span>(h, <span class="hljs-number">1000</span>, <span class="hljs-built_in">buffer</span>( buf));<br><span class="hljs-function">std::string <span class="hljs-title">msg</span><span class="hljs-params">(buf, bytes)</span></span>;<br>std::cout &lt;&lt; msg &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>对于Boost.Asio，随机访问句柄只提供随机访问，你不能把它们当作流句柄使用。也就是说，自由函数，比如：*read()，read_until()，write()*以及他们的相对的异步方法都不能在一个随机访问的句柄上使用。</p><p><em>random_access_handle</em>类只有在I/O完成处理端口在使用中才有效（这是默认情况）。如果情况满足，<em>BOOST_ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE</em>就被定义</p><h4 id="对象句柄">对象句柄</h4><p>你可以通过Windows句柄等待内核对象，比如修改通知，控制台输入，事件，内存资源通知，进程，信号量，线程或者可等待的计时器。或者简单来说，所有可以调用<em>WaitForSingleObject</em>的东西。你可以在它们上面创建一个<em>object_handle</em>封装，然后在上面使用<em>wait()<em>或者</em>async_wait()</em>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_wait_complete</span><span class="hljs-params">(boost::system::error_code err)</span> </span>&#123;&#125;<br>...<br>HANDLE evt = ::<span class="hljs-built_in">CreateEvent</span>(<span class="hljs-number">0</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">0</span>);<br><span class="hljs-function">windows::object_handle <span class="hljs-title">h</span><span class="hljs-params">(service, evt)</span></span>;<br><span class="hljs-comment">// 同步等待</span><br>h.<span class="hljs-built_in">wait</span>();<br><span class="hljs-comment">// 异步等待</span><br>h.<span class="hljs-built_in">async_wait</span>(on_wait_complete);<br></code></pre></td></tr></table></figure><h3 id="Boost-Asio-POSIX特性">Boost.Asio POSIX特性</h3><p>这些特性只在Unix操作系统上可用</p><h4 id="本地socket">本地socket</h4><p>Boost.Asio提供了对本地socket的基本支持（也就是著名的Unix 域socket）。</p><p>本地socket是一种只能被运行在主机上的应用访问的socket。你可以使用本地socket来实现简单的进程间通讯，连接两端的方式是把一个当作客户端而另一个当作服务端。对于本地socket，端点是一个文件，比如*/tmp/whatever*。很酷的一件事情是你可以给指定的文件赋予权限，从而禁止机器上指定的用户在文件上创建socket。</p><p>你可以用客户端socket的方式连接，如下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">local::<span class="hljs-function">stream_protocol::endpoint <span class="hljs-title">ep</span><span class="hljs-params">(<span class="hljs-string">&quot;/tmp/my_cool_app&quot;</span>)</span></span>;<br>local::<span class="hljs-function">stream_protocol::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>sock.<span class="hljs-built_in">connect</span>(ep);<br></code></pre></td></tr></table></figure><p>你可以创建一个服务端socket，如下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">::<span class="hljs-built_in">unlink</span>(<span class="hljs-string">&quot;/tmp/my_cool_app&quot;</span>);<br>local::<span class="hljs-function">stream_protocol::endpoint <span class="hljs-title">ep</span><span class="hljs-params">(<span class="hljs-string">&quot;/tmp/my_cool_app&quot;</span>)</span></span>;<br>local::<span class="hljs-function">stream_protocol::acceptor <span class="hljs-title">acceptor</span><span class="hljs-params">(service, ep)</span></span>;<br>local::<span class="hljs-function">stream_protocol::socket <span class="hljs-title">sock</span><span class="hljs-params">(service)</span></span>;<br>acceptor.<span class="hljs-built_in">accept</span>(sock);<br></code></pre></td></tr></table></figure><p>只要socket被成功创建，你就可以像用普通socket一样使用它；它和其他socket类有相同的成员方法，而且你也可以在使用了socket的自由函数中使用。</p><p>注意本地socket只有在目标操作系统支持它们的时候才可用，也就是<em>BOOST_ASIO_HAS_LOCAL_SOCKETS</em>（如果被定义）</p><h4 id="连接本地socket">连接本地socket</h4><p>最终，你可以连接两个socket，或者是无连接的（数据报），或者是基于连接的（流）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 基于连接</span><br>local::<span class="hljs-function">stream_protocol::socket <span class="hljs-title">s1</span><span class="hljs-params">(service)</span></span>;<br>local::<span class="hljs-function">stream_protocol::socket <span class="hljs-title">s2</span><span class="hljs-params">(service)</span></span>;<br>local::<span class="hljs-built_in">connect_pair</span>(s1, s2);<br><span class="hljs-comment">// 数据报</span><br>local::<span class="hljs-function">datagram_protocol::socket <span class="hljs-title">s1</span><span class="hljs-params">(service)</span></span>;<br>local::<span class="hljs-function">datagram_protocol::socket <span class="hljs-title">s2</span><span class="hljs-params">(service)</span></span>;<br>local::<span class="hljs-built_in">connect_pair</span>(s1, s2);<br></code></pre></td></tr></table></figure><p>在内部，<em>connect_pair</em>使用的是不那么著名的*POSIX socketpair()*方法。基本上它所作的事情就是在没有复杂socket创建过程的情况下连接两个socket；而且只需要一行代码就可以完成。这在过去是实现线程通信的一种简单方式。而在现代编程中，你可以避免它，然后你会发现在处理使用了socket的遗留代码时它非常有用。</p><h4 id="POSIX文件描述符">POSIX文件描述符</h4><p>Boost.Asio允许在一些POSIX文件描述符，比如管道，标准I/O和其他设备（但是不是在普通文件上）上做一些同步和异步的操作。<br>一旦你为这样一个POSIX文件描述符创建了一个<em>stream_descriptor</em>实例，你就可以使用一些Boost.Asio提供的自由函数。比如<em>read()，read_until()，write()，async_read()，async_read_until()<em>和</em>async_write()</em>。</p><p>下面告诉你如何从stdin读取一行然后输出到stdout：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">read_up_to_enter</span><span class="hljs-params">(error_code err, <span class="hljs-type">size_t</span> bytes)</span> </span>&#123; ... &#125;<br><span class="hljs-function">posix::stream_descriptor <span class="hljs-title">in</span><span class="hljs-params">(service, ::dup(STDIN_FILENO))</span></span>;<br><span class="hljs-function">posix::stream_descriptor <span class="hljs-title">out</span><span class="hljs-params">(service, ::dup(STDOUT_FILENO))</span></span>;<br><span class="hljs-type">char</span> buff[<span class="hljs-number">512</span>];<br><span class="hljs-type">int</span> bytes = <span class="hljs-built_in">read</span>(in, <span class="hljs-built_in">buffer</span>(buff), read_up_to_enter);<br><span class="hljs-built_in">write</span>(out, <span class="hljs-built_in">buffer</span>(buff, bytes));<br></code></pre></td></tr></table></figure><p><em>stream_descriptor</em>类只在目标操作系统支持的情况下有效，也就是<em>BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR</em>（如果定义了）</p><h4 id="Fork">Fork</h4><p>Boost.Asio支持在程序中使用<em>fork()<em>系统调用。你需要告诉</em>io_service</em>实例*fork()*方法什么时候会发生以及什么时候发生了。参考下面的代码片段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">service.<span class="hljs-built_in">notify_fork</span>(io_service::fork_prepare);<br><span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 子进程</span><br>    service.<span class="hljs-built_in">notify_fork</span>(io_service::fork_child);<br>    ...<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 父进程</span><br>    service.<span class="hljs-built_in">notify_fork</span>(io_service::fork_parent);<br>    ... <br>&#125; <br></code></pre></td></tr></table></figure><p>这意味着会在不同的线程使用即将被调用的<em>service</em>。尽管Boost.Asio允许这样，我还是强烈推荐你使用多线程，因为使用<em>boost::thread</em>简直就是小菜一碟。</p><h3 id="总结-6">总结</h3><p>为简单明了的代码而奋斗。学习和使用协程会最小化你需要做的调试工作，但仅仅是在代码中有潜在bug的情况下，Boost.Asio才会伸出援手，这一点在关于调试的章节中就已经讲过。</p><p>如果你需要使用SSL，Boost.Asio是支持基本的SSL编码的</p><p>最终，如果已经知道应用是针对专门的操作系统的，你可以享用Boost.Asio为那个特定的操作系统准备的特性。</p><p>就目前来说，网络编程是非常重要的。作为21世纪所有C++程序员的必学内容，我们对Boost.Asio的理论进行了深入理解并付诸实践。因为本书的内容都可以很简单的进行阅读、测试、理解和扩展，所以你可以把它当作一个参考以及便携的Boost.Asio样例库。</p><p>最后，希望你能以读本书为乐，以编程为乐。</p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>转载</tag>
      
      <tag>Boost</tag>
      
      <tag>Asio</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【诗】 梦与泥</title>
    <link href="/2025/09/15/%E3%80%90%E8%AF%97%E3%80%91%E6%A2%A6%E4%B8%8E%E6%B3%A5/"/>
    <url>/2025/09/15/%E3%80%90%E8%AF%97%E3%80%91%E6%A2%A6%E4%B8%8E%E6%B3%A5/</url>
    
    <content type="html"><![CDATA[<h1>梦与泥</h1><p>死寂的花园里摆满<br>空白的日历<br>伟大的数字爬满<br>蠕动的蚂蚁</p><p>雾霭如惊涛般涌来<br>大声吼叫，<br>回音充斥着漩涡<br>哭泣</p><p>我的食指已被折断。</p><p>沙漠不允许绿洲<br>风神哪，侵蚀着<br>雕像，不应站立<br>沙尘是正义<br>沙尘是纪律<br>沙尘是秩序</p><p>如网般脆弱啊<br>化作梦，<br>与泥</p><p><img src="/img/250916.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS的N种形态</title>
    <link href="/2025/08/24/XSS%E7%9A%84N%E7%A7%8D%E5%BD%A2%E6%80%81/"/>
    <url>/2025/08/24/XSS%E7%9A%84N%E7%A7%8D%E5%BD%A2%E6%80%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>众所周知，前端三大件：HTML, JS, CSS，可以说是喂给浏览器的一套说明书，写好了它的渲染，执行的一系列逻辑，转而交由浏览器去执行。正因为这一点，前端跟后端、客户端相比不同的是，不管是谁，都能看到现在正在执行的前端的代码是什么。<br>我如果能借着这个，来让所有的网站来按照我自己定的规矩来执行，那可不就太棒了吗。<br>可是前端开发者们肯定会让我得逞的。就这样，我想要先了解了解前端最著名的一种攻击——XSS攻击。</p></blockquote><h1>XSS威胁</h1><p>第一次学XSS的时候，想到了“韦一敏效应”。其实似乎也和之前一个老笑话有关：</p><blockquote><p>面试官：你好，你的名字是？<br>面试者：我叫你被录用了。<br>面试官：你好，你被录用了！</p></blockquote><p>正经地说，跨站脚本攻击XSS（Cross - Site Scripting）指的是恶意攻击者往Web页面里插入恶意Html代码，利用网站漏洞从用户那里恶意盗取信息的攻击方式。</p><p>以白帽子的视角来说，一般他们在尝试对网页进行XSS时，JS的执行内容一般只有一个友善的<code>alert(1)</code>，在浏览器中弹出一个弹窗，在不产生什么影响的情况下，标识出此页面被成功注入XSS，就可以去跟网站那边要奖金了（确信）。<br><img src="/img/20250823222711.png" alt=""><br>成功注入XSS的一段代码，被称作<strong>payload</strong>。</p><h1>XSS的N种形态</h1><p>这里主要讲可以用哪些方法来达成XSS。<br>列举几个经典的XSS案例：</p><h2 id="经典的-script">经典的&lt;script&gt;</h2><p>既然在html中，js是在<code>&lt;script&gt;</code>标签里面执行的，那我们自然而然能想到的XSS攻击，肯定也都是把攻击的信息写在<code>script</code>标签里面再去想办法植入到html当中。<br>这样的话，作为攻击者，需要去想办法找到网页在哪里可以允许插入用户的html。<br>那其实这种地方还是相当多的，比如说一个评论区的html如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment-box&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment-author&quot;</span>&gt;</span>comment :<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment-body&quot;</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>网页允许你插入评论，而你发了一条<code>&lt;script&gt; alert('XSS!'); &lt;/script&gt;</code>。<br>那网页就会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment-box&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment-author&quot;</span>&gt;</span>comment:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment-body&quot;</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;XSS!&#x27;</span>); </span><br><span class="language-javascript"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用户把攻击用的js给放进了html里面，让浏览器执行了这一段攻击代码，并且由于评论会被存储在服务器上，其他看这条评论的用户也都会被执行这个XSS，这就很恐怖了。</p><p>比较经典的注入script标签的地方就是矢量图<code>&lt;svg&gt;</code>，矢量图跟html一样也是一种XML，浏览器也可以去执行它，这代表一张矢量图里面，也可以内嵌JS代码（不过想想这也是合理的），但就是这么合理的一个地方，能被钻各种空子。<br>因为网页基本不可能不用到图片，支持图片就没有理由不支持svg（所以也可以直接简单粗暴地禁止svg来防止这种形式的XSS），那svg可以写成这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> standalone=<span class="hljs-string">&quot;no&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;XSS from SVG file!&#x27;</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">rect</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;180&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;180&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;alert(&#x27;XSS from onload event!&#x27;)&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">font-size</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;white&quot;</span>&gt;</span>這是一個圖片<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这张图片一被复制，被网站储存起来，就是一个XSS攻击成功了。</p><p>或者，我们也可以不用利用网页的功能，而是直接在url里的一些可以读取html代码的地方写一段XSS，都能达到类似的效果。总之，凡是有机会在html里面插入一下自己的内容的地方，都可以这么XSS一下。</p><h2 id="属性也可以插入js">属性也可以插入js</h2><p>诸如<code>src</code>,<code>href</code>，html标签里的属性有很多。而这其中有一部分的属性，是可以插入js代码的，我们把它称为<code>event_handler</code>。比如<code>button</code>的<code>onclick</code>属性，一般情况下，on开头的属性都属于event_handler。<br>甚至说一张普通的图片标签，也可以注入XSS。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;not_exist&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="直接注入js">直接注入js</h2><p>Javascript的<code>eval()</code>函数可以把字符串当作JS来处理。<br>如果有一个大意的前端开发者，他把eval()函数中的内容交给了用户去输入（不一定出现在输入框，也可能是url中的一个字段，那会发生什么？XSS。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">loadContent</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 例如，URL 是 http://example.com/vulnerable.html#&#123;&quot;user&quot;:&quot;Alice&quot;&#125;</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> dataString = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 移除 &#x27;#&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (dataString) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 開發者錯誤地認為 eval 可以方便地將字串轉為物件</span></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> data = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-built_in">decodeURIComponent</span>(dataString) + <span class="hljs-string">&#x27;)&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;content&#x27;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;你好, &#x27;</span> + data.<span class="hljs-property">user</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)<br></code></pre></td></tr></table></figure><h2 id="javascript伪协议">javascript伪协议</h2><p>如果说有一种url可以直接执行js代码，那岂不是更头大了。<br>但是很遗憾，这种东西是真实存在的，那就是JavaScript伪协议。它长这样：<code>javascript:alert(1)</code> 。<br>也就是说，现在不仅需要提防<code>event_handler</code>属性，连最普通的<code>src</code>,<code>href</code>都有可能被注入XSS。<br>比如说，在<code>iframe</code>标签下，或者在网页重定向的时候（重定向的url直接填JavaScript伪协议）等等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h1>XSS的种类</h1><p>经典分类贴标签环节。</p><p>一般来说，把XSS分为3类：</p><h2 id="持久-存储型XSS">持久/存储型XSS</h2><p>此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。<br>也就是像刚才提到的，攻击者发送带有XSS攻击的一条评论，所有看到这条评论的人都会被攻击。这种攻击威胁非常大，因为它直接被储存到了服务器上，甚至可以做到让服务器把这条攻击一传十，十传百。那网站碰到这种情况基本只能停服维护个几天了。</p><h2 id="反射型XSS">反射型XSS</h2><p>反射型 XSS 的利用一般是攻击者通过特定手法，诱使用户去访问一个<strong>包含恶意代码的 URL</strong>（比较常见的情况），当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。<br>这种攻击方式是最常见也是最广泛的XSS。并且服务器可以通过查看url请求的log来发现是否有反射型XSS的产生。</p><h2 id="DOM-based-XSS">DOM-based XSS</h2><p>前两种XSS都会与服务器进行交互，而这种却是<em>浏览器-&gt;本地脚本-&gt;浏览器</em>的链路。所以，当产生DOM-Based XSS的时候服务器一般是不会知道的。（之前本人一直分不清它与反射型XSS，这一条可以说是分辨依据之一）<br>DOM-based XSS 本质是一个前端漏洞。</p><h1>防御XSS</h1><p>如果上述所说的各种XSS攻击都是无法防御的话，那么估计没有人敢上网了。但其实针对XSS的防御还是有很多的。<br>比如说，既然<code>&lt;script&gt;</code>标签非常危险，那我们作为防御者在处理用户输入的时候直接把<code>&lt;&gt;</code>作为敏感字符编码调，等到显示在浏览器的时候再去重新处理，或者直接禁止掉此类。<br>总之，最简单的方法就是用简单的字符串处理，识别出是否有XSS，如通过正则匹配验证url是否为JavaScript伪协议。</p><p>但是简单的字符串逻辑是很容易被绕过的。攻击者研究你的识别逻辑，很容易可以想出一个新的刁钻的payload。那这时，不如直接用专业处理过的sanitizer。</p><h2 id="Sanitization">Sanitization</h2><p>sanitization，顾名思义，消毒。也就是通过统一的处理手段，处理掉可能含有XSS的用户输入。而编码其实就是一种较为基础的sanitization。而编码除了有上述容易绕过的毛病以外，对开发者其实也是一个不小的限制。比如如果直接编码掉<code>&lt;&gt;</code>，那所有的html标签都无法使用了，不止script。<br>那此时不妨放弃自己作判断，转而去使用如<strong>dompurify</strong>这样的专业进行sanitization的库。它可以以更复杂的逻辑进行消毒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sanitization = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(html);<br></code></pre></td></tr></table></figure><p>这个方法可以选择性地去除危险标签，保留原来一些比较安全的标签。</p><p>但是随着开发越来越深入，消毒的局限性是会越来越大的。如果有人忘了消毒怎么办？这个时候需要一种稳定的开发规范——CSP。</p><h2 id="CSP">CSP</h2><p>CSP（Content Security Policy）可以让开发者自己设定一套安全规范，在开发过程中时刻进行检查，是否有可能带来危险的代码。<br>它的工作原理是这样的，一般放在html的<code>&lt;meta&gt;</code>标签页下，代表这个CSP是对于这个网页的一种元数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;script-src &#x27;none&#x27;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，也可以放在请求的header中。<br>在CSP的这个字段中，我们可以配置相关的规则来进行安全管控，以上方为例：<br><code>content</code>内是具体的管控规则，其中的<code>script-src</code>指的是对js的管理。后面的<code>'none'</code>指 <strong>”不允许任何JavaScript代码执行“</strong> 。很明显这是一条相当激进的规则。<br>当然，在大多数情况下我们还是必须要去执行js代码的，但是我们可以管控我们可以执行的代码的来源是什么。把<code>none</code>换成<code>self</code>，就允许所有同源的js代码执行。这一条规则一般是看上去比较安全的常用的规则。当然，它的后面也可以填协议名，代表限制特定的协议，也可以填域名，代表限制特定的域名等。甚至可以自定义一个哈希值代表一个标记，允许加载带这个标记的js。<br>当然，XSS也不止于在<code>script</code>标签内，所以还有其他的CSP管控规则如<code>style-src</code>,<code>img-src</code>等。</p><p>比较成熟的网站一般会有一套相当复杂且稳定的CSP。</p><h3 id="局限性">局限性</h3><p>CSP这么强居然还有局限性吗？<br>那是必然的。CSP再怎么说，也是人为的产物，是开发者自己定的。如果有了新需求，需要对CSP作临时改动，可能又会对CSP作一些放宽，那攻击者就可以趁着这个放宽的时期进行攻击。<br>明文写出的规定，是有办法对其进行绕过的。比如说刚才提到的经典的<code>content=&quot;script-src 'self'</code>。如果这个域名下提供了一些其他功能，比如说svg图床，而在那个功能下没有对安全做出保障，那是不是可以直接使用svg图床注入js，然后再去引用那里面的内容去执行呢？是可以的。因为它们属于同一个源，对其的执行是完全合法的。</p><h2 id="怎么防御？">怎么防御？</h2><p>假如攻击者真的绕过了csp，那怎么办？<br>要知道，安全加固是没有终点的，永远没有一个安全策略能被说是”完美“的，它始终应该跟着需求不断变化，需要人的长期维护。而这些安全策略就像一层一层的城墙，玛丽亚之墙破了还有罗塞之墙，，罗塞之墙破了还有希纳之墙，没有可以防住任何东西的城墙，就算是结界也可以被打破啊！<br>前端做好前端的安全，前端的安全被打破了至少还能在后端拦截或者减小一下损伤嘛。</p><blockquote><p>一点小小的愚见，大概以后还会在这个方向学习的吧。</p></blockquote><p><img src="https://imageproxy.pixnet.cc/imgproxy?url=https://pic.pimg.tw/smallblackdog3/1378118474-3606929878_l.jpg&amp;ver=20250714" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>安全</tag>
      
      <tag>XSS</tag>
      
      <tag>CSP</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【诗】 玫瑰</title>
    <link href="/2025/07/30/%E3%80%90%E8%AF%97%E3%80%91%E7%8E%AB%E7%91%B0/"/>
    <url>/2025/07/30/%E3%80%90%E8%AF%97%E3%80%91%E7%8E%AB%E7%91%B0/</url>
    
    <content type="html"><![CDATA[<h1>玫瑰</h1><p>离开笼中的鸟<br>深邃透明的天<br>悠久的符号<br>神秘的星光</p><p>飞向<br>带刺的玫瑰，映刻<br>流血的未来，创伤</p><p>易碎的玫瑰。<br>苦涩的玫瑰。</p><p>又怎会是恶魔？<br>它明就如此洁白<br>如此清亮…</p><p><img src="https://img.88tph.com/fc/f7/_PegrVpuEembJgARMiynhQ-1.jpg!/fw/700/watermark/url/L3BhdGgvbG9nby5wbmc/align/center" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>诗歌</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【魔芋种植】单文件宝宝的C++开发实录</title>
    <link href="/2025/07/27/%E3%80%90%E9%AD%94%E8%8A%8B%E7%A7%8D%E6%A4%8D%E3%80%91%E5%8D%95%E6%96%87%E4%BB%B6%E5%AE%9D%E5%AE%9D%E7%9A%84C++%E5%BC%80%E5%8F%91%E5%AE%9E%E5%BD%95/"/>
    <url>/2025/07/27/%E3%80%90%E9%AD%94%E8%8A%8B%E7%A7%8D%E6%A4%8D%E3%80%91%E5%8D%95%E6%96%87%E4%BB%B6%E5%AE%9D%E5%AE%9D%E7%9A%84C++%E5%BC%80%E5%8F%91%E5%AE%9E%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>事情是这样的：因为某种机缘巧合，我本来以某个摸鱼工具人身份收到了一个开发任务，或者说，一个小challenge。但是发生了各种魔幻的事情之后（如因为打cf错过沟通，最后还掉了90分），我需要以一个更核心的身份进行此次C++开发任务。<br>于是，单文件宝宝的第一次像模像样的团队合作C++开发，就此开始…<br><img src="/img/2025072701.png" alt=""><br>（可能是我的最后一次CF，痛失紫名）</p><h1>什么都不会</h1><p>大概就是模仿传奇跨平台开源项目<a href="https://github.com/localsend/localsend">localsend</a>来做一个类似的文件传输工具。<br>文件传输？也就是要用到计网的内容吧，可是我计网还没学啊，别说计网了，我连一个正经的c++项目都没开发过好吗！整天就在那里嗯写单文件，这很多文件…到底是怎么被组织起来工作的啊我去…</p><p>不过起码，我有github账号，我还有对git有着一知半解水平，这也是我仅有的东西了。我甚至没有自己写过约定式提交。</p><h1>那就学</h1><p>于是我就开始学了。当然了，学的都是一些非常基础的东西：</p><ul><li><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/">约定式提交</a>：用于规范化git提交的一套规则，同时还学了一下在进行团队项目开发的时候应该如何正确地使用<code>git</code>。</li><li>CMake：一套C++构建工具。不过其语法对我来说还是太过抽象了，导致我其实是复制了一套板子，然后根据自己的理解做一些渐进地修改。</li><li><a href="https://www.boost.org/">Boost</a>（boost::asio）：一套c++地异步网络库，很明显在这次的与网络传输相关（牵扯到效率等问题）的任务是离不开这一套库的。</li><li>现代C++：我以前写的那叫c++吗？顶多可能叫C with class。我希望通过这次任务能对现代c++的一些思想的理解更加深刻，对语法更加熟悉。</li><li><a href="https://vcpkg.io/">vcpkg</a>：一套好用的包管理工具，可能在小型项目开发的时候会比较有用。</li></ul><h1>怎么做</h1><p>localsend是用flutter写的，我寻思我也不会啊。所以Mairon老师无私地给我写了一个小demo，里面包含了一个简易的<code>CMakelist.txt</code>、vcpkg的相关配置和boost::asio的简单应用。<br>于是我稍微看懂了，以我目前对项目的认知，就是简单对任务归类，一个类别放一个文件夹，然后写一个类来处理业务，业务与业务之间的耦合就纯靠一个<code>main</code>函数来进行调度嘛。</p><p>“先写一个开始页面，然后再进行udp广播用于设备的发现和连接，之后再验证消息，最后文件传输，不就好了嘛。”还是秉持着一贯的单文件思路。只不过就是把各个复杂的业务给分到了其他文件，仅此而已。</p><p>Mairon老师发烧了，我就自己写吧。</p><h2 id="克苏鲁">克苏鲁</h2><p>刚一开始处理广播的部分的时候感觉还是不错的。在AI的帮助下，挺快就写完了主要的业务，毕竟现在也就这一件事情，所以感觉还比较好写。<br>结果到了处理第二个事情：连接时的密码验证的时候，直接给我干破防了。<br>因为我完全没有项目处理的经验，根本就不知道应该怎么去规划一个项目，所以从刚刚的广播开始，我都是想到哪里写到哪里，感觉就这样子一点一点写下去就完全没事了。</p><p>结果，就这么小一件事，我写了一个有一个文件，一行又一行的代码，一会加一个参数一会又加一个参数，感觉都叠成杀人书了。</p><p>但是我依然觉得“都tm写到这了，再重写不是沉默成本太高了吗，史山就史山了，反正整个项目就不大。</p><p>于是，写到文件传输那一块的时候，我为了实现异步疯狂的写回调函数，加了一堆莫名其妙的类，最后看似整个项目写完了，文件夹也分的好好的，但是总是给我一种不可名状的感觉。感觉每一个模块都像一个八爪鱼在那边张牙舞爪跟别的模块互相殴打，最后直接扭在一起不止天地为为何物了。这样的写项目的心路历程让我不由自主地想起今年年初看的Ave Mujica，前面看起来是一个正常在流转的流水线，到后面流水线扭来扭去，变成了跳舞的线，到最后这条线又变成了非常掉SAN的样子…</p><p>最后很明显是跑不起来的，哈哈。</p><h2 id="重来">重来</h2><p>两个星期过后，经过了一系列痛苦的抉择，还是决定得重来。把整份代码全部推翻重写。</p><p>这次吸取了上次的教训，拿一个小本本，把整个项目的框图给画出来，把应该实现的哪些函数写好，明确地规划好整个项目的框架，然后才敢开始写。<br>计划是这样的：</p><ul><li>设备发现：单独一个线程用来处理，分发送和接受两个方法</li><li><code>Client</code>：用于消息的接收</li><li><code>Server</code>：用于消息的发送<br>消息怎么发送？就包装成<code>json</code>就好了。这样也方便包装请求。<br>所有的异步操作全都使用<code>boost::asio</code>的协程，放进<code>io_context</code>上下文中进行调度。</li></ul><p>这样子看起来就清晰非常多了。不过还是有两个比较蛋疼的点：</p><ul><li>server接收到消息了，我还想再发送一个反馈的消息怎么办？<br>这里用了一个不太好的处理方式：建一个全局的消息队列，server模块将想要发的请求放进队列里面，client模块检测队列里面是否为空（定时3秒检测一次，这也是这个处理方式的愚蠢所在），client模块代为发送。</li><li>文件分块传输了，怎么分块，分了块之后又以什么形式传输？<br>1Mb一块吧。这个分法也只是俺寻思之力想出来的。然后数据处理…因为要包装成json，所以迫不得已，只能把二进制给编码成base64格式，这个想法实在是蠢到家了，也是传输效率低下的最大原因。<br>不过至少比之前是健康多了。</li></ul><h2 id="Vibe-Coding">Vibe Coding</h2><blockquote><p>不会写怎么办？问AI。<br>AI写的有问题怎么办？继续问AI。<br>编译出来有问题看不懂怎么办？再问AI。</p></blockquote><p>写到最后我已经成这样了。</p><p>旁边的CEvove05老师跟我说，我这是纯纯的 <em>vibe coding（氛围编程）</em> 啊。<br>Vibe coding？啥意思？<br><img src="/img/fd7c80f02be000064380caf99825d41a.png" alt=""><br>后来，偶然刷到了与其相关的知乎帖子，天哪这简直就是我！</p><p>才发现，确实不能这么搞了，这样子做就算整个项目做出来了也不是自己的。AI应该是给自己学习的工具，而不是代替自己学习的工具。</p><h1>最后…？</h1><p>写这篇博客的时候这件事情其实已经过去了两个月左右，而我也因为这件事收获了一个对自己人生非常重要的东西。两个月后的自己也比当初的我长进了相当多（甚至中间还隔了个期末考试，所以我学技术的时间远小于两个月）。</p><p>感谢所有在这件事上给予我帮助的SAST的伙伴们。</p><p>之后还想做什么？当然是再把它重写一遍咯（逃</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>魔芋种植</tag>
      
      <tag>C++</tag>
      
      <tag>Vibe Coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>就那么一点点的生成函数与多项式</title>
    <link href="/2025/04/06/%E5%B0%B1%E9%82%A3%E4%B9%88%E4%B8%80%E7%82%B9%E7%82%B9%E7%9A%84%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    <url>/2025/04/06/%E5%B0%B1%E9%82%A3%E4%B9%88%E4%B8%80%E7%82%B9%E7%82%B9%E7%9A%84%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1>就那么一点点的生成函数与多项式</h1><blockquote><p>笔者对群论等数学体系的十分浅薄，如有不严谨之处请指出，会进行修改。</p></blockquote><h2 id="数列？">数列？</h2><p>上过高中的朋友，应该都知道数列是什么：就是一列数嘛。</p><p>我们能有哪些方式来表示一个数列呢？有直接列举，通项公式，递推式等等…</p><p>这些方法都很好，但是都有各自的局限性。我们能否想出来一种方式，能让这种方式表示出任何的数列呢？或者说，是否能建立起数列和另一种东西的<strong>一一映射</strong>？</p><h2 id="函数？">函数？</h2><p>那可能就是函数了。对于一个数列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_0, a_1, a_2,... a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们将其整理为一种函数：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">f(x) = a_0 + a_1x+a_2x^2+...+a_nx^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8144em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><br>我们拿一个数列，“生”出了一个函数出来，这样的函数被称之为<strong>生成函数</strong>。按照上述方式生成出的函数叫<strong>普通生成函数</strong>(Ordinary Generating Function, OGF)。</p><p>为什么我们需要生成函数？我们可以通过对函数的一些基本运算，得到不同的数列。</p><p>比如说，对于数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">1,1,1,1,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span>，其生成函数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">f(x)=1+x+x^2+x^3+...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">...</span></span></span></span><br>我们可以针对这个生成函数来列出一个等式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x)=xf(x)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。可以发现，我们通过对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>乘上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>,来实现了式子的右移。</p><p>我们甚至可以直接写出：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(x)=\frac{1}{1-x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2484em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。我们用一个简单的分式，来表达出了有无穷多项的数列！这样的式子被称为生成函数的<strong>封闭形式</strong>。</p><blockquote><p>可以试试看，下面的几个数列的生成函数是多少呢？</p></blockquote><p>等比数列：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">1,2,4,8,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span><br>一隔一的数列：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">0,1,0,1,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span><br>组合数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><mo separator="true">,</mo><msubsup><mi>C</mi><mi>n</mi><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>C</mi><mi>n</mi><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^0,C_n^1,C_n^2,...,C_n^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><br>等差数列：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">0,1,2,3,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span><br>斐波那契数列：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>8</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">1,1,2,3,5,8,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span></p><p>神奇指令 <code>series x/(1-x-x^2) to order 20</code></p><h3 id="等等，我们是不是能拿它推通项公式…">等等，我们是不是能拿它推通项公式…</h3><p>以斐波那契数列为例，通项公式为<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mn>5</mn></msqrt></mfrac><mrow><mo fence="true">(</mo><msup><mrow><mo fence="true">(</mo><mfrac><mrow><mn>1</mn><mo>+</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mi>n</mi></msup><mo>−</mo><msup><mrow><mo fence="true">(</mo><mfrac><mrow><mn>1</mn><mo>−</mo><msqrt><mn>5</mn></msqrt></mrow><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mi>n</mi></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">F(n) = \frac{1}{\sqrt{5}} \left( \left( \frac{1 + \sqrt{5}}{2} \right)^n - \left( \frac{1 - \sqrt{5}}{2} \right)^n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8543em;vertical-align:-0.65em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.551em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2043em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.038em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.399em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9128em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">5</span></span></span><span style="top:-2.8728em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1272em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2043em;"><span style="top:-3.6029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span><br>因此，尽量将分式拆成等比数列形式。</p><h3 id="试试两个生成函数相乘？">试试两个生成函数相乘？</h3><p>刚才提到的各种操作的内容似乎都停留在对单个生成函数的操作，我们如果将两个生成函数相乘会发生什么呢？</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msub><mi>a</mi><mn>3</mn></msub><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">F(x)=a_0+a_1x+a_2x^2+a_3x^3+...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">...</span></span></span></span><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msub><mi>b</mi><mn>3</mn></msub><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">G(x)=b_0+b_1x+b_2x^2+b_3x^3+...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">...</span></span></span></span></p><p>可以发现相乘之后，每一项的编号之和都是相同的，formally：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>n</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">c_n=\sum_{i=0}^{n}a_ib_{n-i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.104em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span><br>很像是把两个多项式卷起来，我们可以把它称之为<strong>卷积</strong>。在信号与系统书中，会将卷积的各种求法，实际上大同小异。</p><blockquote><p>来试试推导： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>1</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>3</mn><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">1^2+2^2+3^2+...+n^2=?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mclose">?</span></span></span></span></p></blockquote><p>Prob: <a href="https://www.luogu.com.cn/problem/P2000">P2000 拯救世界</a></p><p>广义二项式定理：![[Pasted image 20250329152413.png]]</p><h3 id="普通在哪？">普通在哪？</h3><p>刚刚提到的OGF之所以被称作OGF，是因为还有其他类型的生成函数，如<strong>指数生成函数（EGF)</strong>、<strong>Dirichlet生成函数（DGF）</strong> 等。</p><p><strong>指数生成函数</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><mfrac><msub><mi>a</mi><mn>2</mn></msub><mrow><mn>2</mn><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mfrac><msub><mi>a</mi><mn>3</mn></msub><mrow><mn>3</mn><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">F(x)=a_1x+\frac{a_2}{2!}x^2+\frac{a_3}{3!}x^3+...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1591em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7115em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1591em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7115em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">...</span></span></span></span>由于泰勒展开而得名。<br>它的作用是什么？</p><ol><li>可以尝试去做一做两个指数生成函数相乘…</li><li>设想一下球盒模型…</li></ol><p>经常出现在带标号的部分组合数学问题当中。</p><p><strong>Dirichlet生成函数</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msub><mi>a</mi><mn>1</mn></msub><msup><mn>1</mn><mi>s</mi></msup></mfrac><mo>+</mo><mfrac><msub><mi>a</mi><mn>2</mn></msub><msup><mn>2</mn><mi>s</mi></msup></mfrac><mo>+</mo><mfrac><msub><mi>a</mi><mn>3</mn></msub><msup><mn>3</mn><mi>s</mi></msup></mfrac><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">F(s)=\frac{a_1}{1^s}+\frac{a_2}{2^s}+\frac{a_3}{3^s}+...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0565em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7115em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0565em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7115em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0565em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7115em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">...</span></span></span></span><br>继续考虑相乘的情况…</p><p>Prob:求长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的01字符串中不可分解的字符串的个数。</p><h2 id="多项式？">多项式？</h2><p>对于求和式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\sum a_nx_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，如果是有限项相加，称为多项式。我们可以理解为，我们以多项式的形式存储了一列信息。</p><h3 id="我们有什么表示多项式的方式吗？">我们有什么表示多项式的方式吗？</h3><p>我们如果设多项式的最高次为n，那么不难发现，我们只要给出n个函数图像上的点，就一定可以<strong>唯一确定</strong>这个多项式。我们可以直接列出方程组，通过高斯消元得到。</p><p>当然，我们也可以使用<strong>拉格朗日插值</strong>来更快地生成多项式。原理很简单，其实和高中学过的”两点式“差不多。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>y</mi><mi>i</mi></msub><msub><mo>∏</mo><mrow><mi>j</mi><mo mathvariant="normal">≠</mo><mi>i</mi></mrow></msub><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub></mrow><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">f(x)=\sum^n_{i=1}y_i\prod_{j\ne i}\frac{x-x_j}{x_i-x_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.458em;vertical-align:-0.5423em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1864em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight"><span class="mrel mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord mtight"><span class="mrel mtight"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel mtight">=</span></span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9157em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5073em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，也有更快的优化方法。</p><p>![[Pasted image 20250326153502.png]]<br>嗯，看来确实可以唯一确定。</p><p>那实际上我们就有了一种新的表示多项式的方法——<strong>点值表示法</strong>。用几个确定的点来表示出这个多项式。</p><p>点值表示法有什么作用呢？回忆一下解析几何，可以想起：两个多项式相乘（也就是两个多项式所对应的数列相卷积），可以直接用点值相乘，如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>→</mo><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y_1) (x,y_2) \to(x, y_1y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 得到一个新多项式。</p><h3 id="变换？">变换？</h3><p>为什么能把一个数列写成生成函数的形式呢？其实可以理解为生成函数是对于这个数列的一个<strong>变换</strong>，也就是用另一种方式来表达某个东西（我们用函数来表达了一个数列）。这与信号与系统中的<strong>Z变换</strong>较为相似。</p><p>除此之外比较常用的变换，还有<strong>傅里叶变换</strong>(Fourier Transform)——将一个函数看作是各种频率的正弦函数叠加而成，每一种频率，都有其对应的振幅。那么，就可以重新以频率为自变量，振幅为因变量做出一个全新的函数。</p><p>我们如何求出一个函数的傅里叶变换呢？公式如下：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>i</mi><mi>ω</mi><mi>t</mi></mrow></msup><mi mathvariant="normal">d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">F(\omega)=\int^{\infty}_{-\infty}f(t)e^{-i\omega t}\mathrm dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2734em;vertical-align:-0.4142em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4142em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">iω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathrm">d</span><span class="mord mathnormal">t</span></span></span></span><br>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>指时间。所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>是关于时间的函数，有时间才有频率。根据欧拉公式（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>x</mi></mrow></msup><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>i</mi><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">e^{ix}=\cos x+i\sin x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span>），这其中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mi>i</mi><mi>ω</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">e^{-i\omega t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">iω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span> 其实就是正弦，余弦函数。我们还可以使用<strong>傅里叶反变换</strong>来把这个频率的函数给变回原来的样子：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi></mrow></mfrac><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>F</mi><mo stretchy="false">(</mo><mi>ω</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>i</mi><mi>ω</mi><mi>t</mi></mrow></msup><mi mathvariant="normal">d</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">f(t)=\frac{1}{2\pi}\int^{\infty}_{-\infty}F(\omega)e^{-i\omega t}\mathrm dt</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2734em;vertical-align:-0.4142em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8593em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4142em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">iω</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathrm">d</span><span class="mord mathnormal">t</span></span></span></span></p><p>傅里叶变换在信号与系统当中有着极其重要的作用，因为我们很多时候会对一个信号的频率来进行一定的处理。它可以处理连续的信号，当然也可以处理离散的信号（也就是处理我们经常会碰到的数列）。</p><p>这些东西都可以来唯一表示数列：想象为一系列正交的向量。</p><h3 id="快速…傅里叶变换？">快速…傅里叶变换？</h3><p>我们对数列进行操作，肯定是离不开卷积的。但是我们按照原方式进行卷积的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，似乎不是很能接受。<br>如果我们使用点值表示法，对每一个点进行乘积，时间复杂度就成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，似乎可以接受。但是我们对多项式求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个点，再使用拉格朗日插值变回多项式，这两个操作的复杂度都是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，我们好像又不能接受了。有什么办法吗？</p><ul><li>试试分治？</li><li>怎么快速求值？</li><li>傅里叶？</li><li>不想爆栈，还能优化吗？（<strong>蝶形运算</strong>）<br>于是，我们就得到了<strong>快速傅里叶变换</strong>(FFT)的过程。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><br><span class="hljs-type">int</span> r[<span class="hljs-number">4000010</span>], n, m, l, limit = <span class="hljs-number">1</span>;<br>complex&lt;<span class="hljs-type">double</span>&gt; a[<span class="hljs-number">4000010</span>], b[<span class="hljs-number">4000010</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(complex&lt;<span class="hljs-type">double</span>&gt; *A, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt; limit;i++)&#123;<br>        <span class="hljs-keyword">if</span>(r[i] &lt; i)<span class="hljs-built_in">swap</span>(A[i], A[r[i]]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; limit;i&lt;&lt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-function">complex&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">wn</span><span class="hljs-params">(cos(pi/i), (<span class="hljs-type">double</span>)e * sin(pi/i))</span></span>;<br>        <span class="hljs-type">int</span> len = i&lt;&lt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; limit; j+=len)&#123;<br>            <span class="hljs-function">complex&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;i;k++,w *= wn )&#123;<br>                complex&lt;<span class="hljs-type">double</span>&gt; x = A[j + k], y = w * A[j + i + k];<br>                A[j + k] = x + y;<br>                A[j + i + k] = x-y;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//预处理</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;limit;i++)&#123;<br>    r[i] = ((r[i&gt;&gt;<span class="hljs-number">1</span>]&gt;&gt;<span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (l<span class="hljs-number">-1</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><p>板子题：<a href="https://www.luogu.com.cn/problem/P1919">P1919 A*B Problem</a></p><h3 id="还有什么变换？">还有什么变换？</h3><p>除了FFT以外，还有<strong>快速数论变换</strong>(NTT)，<strong>快速沃尔什变换</strong>(FWT)。</p><p><strong>快速数论变换</strong>(NTT)在算法竞赛中可能更为常见，它实际上是利用了模运算的乘方周期性，来代替了原来FFT的复数的乘方周期性。</p><p><strong>快速沃尔什变换</strong>(FWT)解决的是是一种更为广义的卷积，卷积原先是定义在”和相同“之上的，FWT针对的卷积可以处理位运算，有的时候似乎可以用来优化状压dp？</p><h2 id="更多，更多，更多的算法…">更多，更多，更多的算法…</h2><h3 id="牛顿迭代法">牛顿迭代法</h3><p>如果给定一个多项式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，如何计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>，</mtext><mfrac><mn>1</mn><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><msqrt><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></msqrt></mrow><annotation encoding="application/x-tex">\ln F(x)，\frac{1}{F(x)},\sqrt{F(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.455em;vertical-align:-0.52em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-2.895em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305em;"><span></span></span></span></span></span></span></span></span>等各种各样的”函数套函数“呢？</p><p>牛顿迭代法，实际上是从一个常数开始，不断倍增，慢慢接近目标的多项式的过程。我们需要利用的公式是：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≡</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mfrac><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>G</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">f_{2n}(x)\equiv f_n(x)-\frac{G(x,f_n(x))}{\frac{\partial G}{\partial y} G(x,f_n(x))}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.774em;vertical-align:-0.764em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.574em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.88em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">G</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4829em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathnormal mtight">G</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.1076em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">))</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.1076em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">))</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.764em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，如果给定函数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，操作的函数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">G(x,y)=g(y)-h(x) =0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>.</p><p>（证明过程用到了泰勒展开）</p><p>来试一试：<a href="https://codeforces.com/problemset/problem/438/E">CF438E-The Child and Binary Tree</a></p><h3 id="拉格朗日反演">拉格朗日反演</h3><p>如果我们得知了一个生成函数的封闭形式，我们如何知道每一项的具体的值呢？</p><p>这时候就需要使用Lagrange反演了。常用的公式是：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msup><mi>x</mi><mi>n</mi></msup><mo stretchy="false">]</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo stretchy="false">[</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mfrac><mi>x</mi><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">[x^n]F(x)=\frac{1}{n}[x^{n-1}](\frac{x}{G(x)})^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3651em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">G</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>，其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>G</mi><mo stretchy="false">(</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">F(G(x))=G(F(x))=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>，也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>G</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x),G(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>互为复合逆。</p><p>来试一试：<a href="https://www.luogu.com.cn/problem/P2767">P2767 树的数量</a></p><h2 id="参考资料">参考资料</h2><blockquote><p><a href="https://www.cnblogs.com/joke3579/p/poly-and-gf.html">浅谈多项式与生成函数 - joke3579 - 博客园</a><br><a href="https://www.zhihu.com/column/c_1575814114315915264">算法学习笔记 - 知乎</a><br><a href="https://www.cnblogs.com/chroneZ/p/18193539">多项式与生成函数学习笔记 - ChroneZ - 博客园</a><br><a href="https://www.bilibili.com/video/BV16X4y1N74M">[算法竞赛入门] 生成函数：函数与数列之间的桥梁 (蒋炎岩)</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>生成函数</tag>
      
      <tag>多项式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 1008 (Div. 2) 解题报告</title>
    <link href="/2025/03/11/Codeforces%20Round%201008%20(Div.%202)%20%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2025/03/11/Codeforces%20Round%201008%20(Div.%202)%20%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1>Codeforces Round 1008 (Div. 2) 解题报告</h1><p>自从南京站打铁之后，道心破碎的我，似乎上个学期就没碰过算法竞赛的任何一点内容了。直到寒假开始想想，要不继续打打cf吧。不过一开始非常烂，先是掉到了绿名( <em>pupil</em> )的水平，打过div4，也算是复健起来了。于是花了一个月的时间，也算是到了蓝名( <em>expert</em> )了。可能是这场运气确实有点好了的原因吧。</p><p>那就写个解题报告纪念一下吧，主要也是为了记录当时赛时的思路过程，了解以后如何才能比较快的想到正确思路。</p><h2 id="A-Final-Verdict">A.Final Verdict</h2><p>给长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> ，每次可以平均分成若干段，然后把分出的每一段合成一个数（这一段数的平均值），最后合成一个数字。给定一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> ，问是否有一种操作方法让序列变成一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 。</p><p>因为是A题，盲猜不管怎么操作最后得到的都是一样的，直接取平均值与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 对照。当然也易证。</p><p>code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,x,sum = <span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;x;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        sum += a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum == x * n)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br><br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-Vicious-Labyrinth">B.Vicious Labyrinth</h2><p>相邻房间号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ,个房间有一个人和一个传送器，传送器将这个房间里的人传送到目标房间（目标房间不能是自身）。所有人一起传送 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 次。最终代价为每个人距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 号房间的距离之和，构造一种传送器方案最小化代价。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>房间全都传送到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 传送到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ，可以吗？</p><p>不行。hack：<code>3 2</code>。按照这种方案，1和2先被传送到3，3被传送到2，然后两者交换。在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 号房间的人数有2个，代价不是最小。</p><p>发现只有第一步，第二步是有用的，后面几步全在重复。所以根据奇偶性进行分类，奇数使用上述方案，偶数的话，除了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 传送到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> ，其他房间全部传送到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。总代价永远为1，显然最优。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">if</span>(k % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i != n)cout&lt;&lt;n&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;n<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i != n<span class="hljs-number">-1</span>)cout&lt;&lt;n<span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-string">&quot; \n&quot;</span>[i==n];<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;n&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Breach-of-Faith">C.Breach of Faith</h2><p>似乎也是div1的A题。对我来说是一道还算可以，不怎么难做的div2C题。</p><p>有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个两两不同的正数，现在给出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span> 个数，要求找到剩下的一个数， 满足这一堆数中的一个数，是通过剩下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span> 个数中两两分组做差后，求和得到。</p><p>这个构造里面有几个难点：</p><ol><li>必须都是正数</li><li>两两必须不同</li><li>满足数量关系</li></ol><p>其实最简单的是满足数量关系，因为我们只要把它像解方程一样解出来就行了。</p><p><strong>怎么保证全都是正数?</strong></p><p>比较好想的办法是，没告诉我们的剩下的那个数，正好就是求和得到的数。为了保证它是正数，我们只要把前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 大的数当成被减数， 前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 小的数当成减数就一定是正数。</p><p>两个条件都满足了，能否满足两两不同？</p><p>不能。hack：<code>1 6 3 2</code>。 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mo>+</mo><mn>3</mn><mo>−</mo><mn>2</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">6+3-2-1=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>，是之前出现过的数。我们会发现，上述构造方式不合法，当且仅当前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 小的数之和，等于前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 大的数（除去最大的那个数）之和。</p><p>这是一个特殊情况。有没有针对它的别的构造方法？</p><p>有的兄弟，有的。我们把求和得到的那个数，设为这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span> 个数中最小的那个数，然后把前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 大的数全都当减数，这样，剩下的那个数一定比所有数都大（经计算，不会超过数据范围）。这样就合法了。</p><p>当然，前面有个特殊情况就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的时候。简单特判一下（</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    n = n*<span class="hljs-number">2</span> ;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-type">int</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(a &lt; b)<span class="hljs-built_in">swap</span>(a,b);<br>        <span class="hljs-keyword">if</span>(a == b*<span class="hljs-number">2</span>)&#123;<br>            cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b*<span class="hljs-number">3</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;a-b&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;b[i];<br>        mp[b[i]] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt; n/<span class="hljs-number">2</span>;i--)&#123;<br>        sum += b[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n/<span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">1</span>;i--)&#123;<br>        sum -= b[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">count</span>(sum))&#123;<br>        sum = b[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt; n/<span class="hljs-number">2</span>;i--)&#123;<br>            sum += b[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n/<span class="hljs-number">2</span>; i &gt; <span class="hljs-number">1</span>;i--)&#123;<br>            sum -= b[i];<br>        &#125;<br>        cout&lt;&lt;b[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n/<span class="hljs-number">2</span>;i++)&#123;<br>            cout&lt;&lt;b[i+n/<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout&lt;&lt;b[n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    cout&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt;n/<span class="hljs-number">2</span>;i--)&#123;<br>        cout&lt;&lt;b[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b[i-n/<span class="hljs-number">2</span>]&lt;&lt;<span class="hljs-string">&quot; \n&quot;</span>[i==n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>赛后发现，这个几十多分钟想出来的思路简直歪到姥姥家去了。其实只要最大n+1个数-最小n-1个数就能直接完美搞定这道题目。</strong></p><h2 id="D-Scammy-Game-Ad">D.Scammy Game Ad</h2><p>当时没仔细看题目，一看这图片和样例就发现：这不就是平常刷的抽象小游戏广告嘛，就明白题意了。</p><p>不过题意还是和平常那个小游戏不太一样：首先，左右两通道各有一人。第二，已经选定通道的人不能更改位置，只有新增的人能够自由选择位置。并且，乘法只可能是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>。</p><p>这数据范围 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">n \leq 30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">30</span></span></span></span> 可给我整怕了，本来以为是搜索，或者三分啊什么的。后来再捋了一下思路。</p><p>如果说没有乘法，只有加法会怎样？我们会发现，新生成的小人放在哪里根本无所谓。所以说，只有乘法是需要我们明确放置小人的。所以，我们可以手里放一些位置悬而未决的小人，以后可以同意决策。</p><p>我们需不需要为了未来考虑，去提前放一些小人在加法的通道上？不需要。因为即使是最小的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\times 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">×</span><span class="mord">2</span></span></span></span> 操作，把空闲的小人全都放过去，就可以全部回收。换句话说，只有尽量多的小人进行乘法操作，我们才可能有多余的收益。</p><p>既然不需要为了未来考虑，那直接贪心就完事了，没想到n这么小的一个题目居然复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的，想必只是为了防止数字过大罢，出题还是挺有良心的（笑）。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r= <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-type">char</span> a,c;<br>        <span class="hljs-type">int</span> b,d;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;<br>        <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; c == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>            res += b+d;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;x&#x27;</span> &amp;&amp; c == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>            l += res;<br>            res = l * (b - <span class="hljs-number">1</span>);<br>            res += d;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;+&#x27;</span> &amp;&amp; c == <span class="hljs-string">&#x27;x&#x27;</span>)&#123;<br>            r += res;<br>            res = r * (d - <span class="hljs-number">1</span>);<br>            res += b;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(b==d)&#123;<br>                res *= b;<br>                res += (l+r) * (b<span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b == <span class="hljs-number">2</span> &amp;&amp; d == <span class="hljs-number">3</span>)&#123;<br>                r += res;<br>                res = (r * (d - <span class="hljs-number">1</span>));<br>                res += (l * (b<span class="hljs-number">-1</span>));<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                l += res;<br>                res = l * (b - <span class="hljs-number">1</span>);<br>                res += (r * (d<span class="hljs-number">-1</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;res&lt;&lt;&quot;\n&quot;;</span><br>    &#125;<br>    cout&lt;&lt;l+r+res&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;res&lt;&lt;&quot;\n&quot;;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>写完D题还有一个多小时，EF想了个十几二十分钟，估计这不是我能场上做出来的题就睡觉了。明天，哦不是，今天还得晨跑呢（悲）。</p></blockquote><h2 id="E-Finding-OR-Sum">E.Finding OR Sum</h2><p>当时看过题数，又是交互题真的被吓到了，回来补题的时候发现，原来这题还真的挺简单的。</p><p>有两个数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n,m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span> ，你可以询问两个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>, 每一次询问会返回<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n|x) + (m|x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的值。询问完之后，题目给定一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> ,输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo stretchy="false">(</mo><mi>m</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n|y) | (m|y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">∣</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>的值。</p><p>只能询问两次其实给我们一个相当大的提示了。我们可以发现，如果给的x的某一位是0，那么运算后这意味就是n位上的数+m位上的数。如果给的是1，那么固定就是2。这样会产生一个进位的问题，而解决进位问题也相当简单，只要第一次询问 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>010101....</mn></mrow><annotation encoding="application/x-tex">010101....</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">010101....</span></span></span></span> 第二次询问 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>101010...</mn></mrow><annotation encoding="application/x-tex">101010...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">101010...</span></span></span></span> 就行。这样每个数都有两位的空间来让我们看，这一位上n位上的数+m位上的数究竟是多少。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T;<br><span class="hljs-type">int</span> od, ev;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;od&lt;&lt;endl;<br>    <span class="hljs-type">int</span> odi, evi;<br>    cin&gt;&gt;odi;<br>    cout&lt;&lt;ev&lt;&lt;endl;<br>    cin&gt;&gt;evi;<br>    odi -= <span class="hljs-number">2</span>* od;<br>    evi -= <span class="hljs-number">2</span>* ev;<br>    cout&lt;&lt;<span class="hljs-string">&quot;!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-type">int</span> cnt[<span class="hljs-number">40</span>] &#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>        cnt[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>((odi&gt;&gt;i) &amp; <span class="hljs-number">1</span>)cnt[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((odi&gt;&gt;(i+<span class="hljs-number">1</span>)) &amp; <span class="hljs-number">1</span>)cnt[i] = <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>((evi&gt;&gt;i) &amp; <span class="hljs-number">1</span>)cnt[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((evi&gt;&gt;(i+<span class="hljs-number">1</span>)) &amp; <span class="hljs-number">1</span>)cnt[i] = <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> cop;<br>    cin&gt;&gt;cop;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>((cop &gt;&gt; i) &amp; <span class="hljs-number">1</span>)ans += (<span class="hljs-number">2</span>&lt;&lt;i);<br>        <span class="hljs-keyword">else</span> ans += cnt[i] * (<span class="hljs-number">1</span>&lt;&lt;i);<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span>)ev |= (<span class="hljs-number">1</span>&lt;&lt;i);<br>        <span class="hljs-keyword">else</span> od |= (<span class="hljs-number">1</span>&lt;&lt;i);<br>    &#125;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="F-Binary-Subsequence-Value-Sum">F.Binary Subsequence Value Sum</h2><p>有点难。但是当时看榜居然这题过的比E多，不可思议。</p><p>一个长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 组成的串，定义一个子序列的价值为<strong>将这个序列分成两段之后，把每段的求和乘起来得到的最大值。</strong></p><p>有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>次询问，每次可以改变某一位的值，每次询问完后，求所有子序列的价值之和（带取模）。</p><p>我理解了好几天这个解法，看jiangly老师录播的时候真感觉惊为天人。一下子就写出来了。</p><p>最后的解法是这样：首先，我们可以确定的是，不管这个序列的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 分布如何，最后的价值一定是<strong>这个序列的总和，平方，再除4。</strong>（先只考虑偶数情况）。总之，肯定是将它拆分为求和基本一样的两段（基本不等式，易证）。</p><p>对于奇数的情况呢？假如总和是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 那么价值就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。但是这样写不方便求平方，可以写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{(2n+1)^2-1}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1089em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。那么，对于偶数（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span>）的情况也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{(2n)^2}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4539em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1089em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 。</p><p>总结： $ val(x) = \frac{1}{4} [x^2 - (x \mod 2)] $</p><p>我们对于特定的和的价值已经了解，接下来需要求总价值，也就转化为了一个计数问题。</p><p>我们怎样求 求和为某一个特定的数的子序列 的数量呢？</p><p>假设序列中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 的数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 。可以说，所有子序列中，代价最大的，肯定要么全是1，要么全是-1。接下来就是这个解法的妙处所在了：</p><p>假如说，我们默认全取-1。我们如果多改变默认值中的一个，比如说，把原来应该取的-1不取了，或者把原来不应该取的1给取了，那么子序列的总和就会减少1。于是，我们原先推得的式子里面，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>就应代换成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 。改变 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>个，就代换成 $ x-i $ 。</p><p>还有一点，<strong>改变 i 个的子序列一共有多少个？</strong> $C^i_n $ 个。$这样，我们针对所有的子序列都能直接计算价值了。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>4</mn></mfrac><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msubsup><mi mathvariant="normal">C</mi><mi>n</mi><mi>i</mi></msubsup><mo stretchy="false">(</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">val(s) = \frac{1}{4}\sum^n_ {i=0}\mathrm{C}^i_n( [(x-i)^2 - ((x-i) \mod 2)] )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">([(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">)])</span></span></span></span></p><p>为了以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的速度求出它，我们需要把平方项拆开，然后分别求和，这一步就相当简单了。</p><p>code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> u64 = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> u32 = <span class="hljs-type">unsigned</span>;<br><span class="hljs-keyword">using</span> u128 = <span class="hljs-type">unsigned</span> __int128;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> T <span class="hljs-title">power</span><span class="hljs-params">(T a, u64 b, T res = <span class="hljs-number">1</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (; b != <span class="hljs-number">0</span>; b /= <span class="hljs-number">2</span>, a *= a) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) &#123;<br>            res *= a;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;u32 P&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> u32 <span class="hljs-title">mulMod</span><span class="hljs-params">(u32 a, u32 b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">u64</span>(a) * b % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;u64 P&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> u64 <span class="hljs-title">mulMod</span><span class="hljs-params">(u64 a, u64 b)</span> </span>&#123;<br>    u64 res = a * b - <span class="hljs-built_in">u64</span>(<span class="hljs-number">1.L</span> * a * b / P - <span class="hljs-number">0.5L</span>) * P;<br>    res %= P;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> i64 <span class="hljs-title">safeMod</span><span class="hljs-params">(i64 x, i64 m)</span> </span>&#123;<br>    x %= m;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>        x += m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> std::pair&lt;i64, i64&gt; <span class="hljs-title">invGcd</span><span class="hljs-params">(i64 a, i64 b)</span> </span>&#123;<br>    a = <span class="hljs-built_in">safeMod</span>(a, b);<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;b, <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    <br>    i64 s = b, t = a;<br>    i64 m0 = <span class="hljs-number">0</span>, m1 = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (t) &#123;<br>        i64 u = s / t;<br>        s -= t * u;<br>        m0 -= m1 * u;<br>        <br>        std::<span class="hljs-built_in">swap</span>(s, t);<br>        std::<span class="hljs-built_in">swap</span>(m0, m1);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (m0 &lt; <span class="hljs-number">0</span>) &#123;<br>        m0 += b / s;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> &#123;s, m0&#125;;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;std::unsigned_integral U, U P&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ModIntBase</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">ModIntBase</span><span class="hljs-params">()</span> : x(<span class="hljs-number">0</span>) &#123;</span>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;std::unsigned_integral T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">constexpr</span> <span class="hljs-title">ModIntBase</span><span class="hljs-params">(T x_)</span> : x(x_ % mod()) &#123;</span>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;std::signed_integral T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">constexpr</span> <span class="hljs-title">ModIntBase</span><span class="hljs-params">(T x_)</span> </span>&#123;<br>        <span class="hljs-keyword">using</span> S = std::<span class="hljs-type">make_signed_t</span>&lt;U&gt;;<br>        S v = x_ % <span class="hljs-built_in">S</span>(<span class="hljs-built_in">mod</span>());<br>        <span class="hljs-keyword">if</span> (v &lt; <span class="hljs-number">0</span>) &#123;<br>            v += <span class="hljs-built_in">mod</span>();<br>        &#125;<br>        x = v;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> U <span class="hljs-title">mod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> P;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> U <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <br>    <span class="hljs-keyword">constexpr</span> ModIntBase <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span> &#123;<br>        ModIntBase res;<br>        res.x = (x == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">mod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> ModIntBase <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">power</span>(*<span class="hljs-keyword">this</span>, <span class="hljs-built_in">mod</span>() - <span class="hljs-number">2</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">constexpr</span> ModIntBase &amp;<span class="hljs-keyword">operator</span>*=(<span class="hljs-type">const</span> ModIntBase &amp;rhs) &amp; &#123;<br>        x = <span class="hljs-built_in">mulMod</span>&lt;<span class="hljs-built_in">mod</span>()&gt;(x, rhs.<span class="hljs-built_in">val</span>());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> ModIntBase &amp;<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> ModIntBase &amp;rhs) &amp; &#123;<br>        x += rhs.<span class="hljs-built_in">val</span>();<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">mod</span>()) &#123;<br>            x -= <span class="hljs-built_in">mod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> ModIntBase &amp;<span class="hljs-keyword">operator</span>-=(<span class="hljs-type">const</span> ModIntBase &amp;rhs) &amp; &#123;<br>        x -= rhs.<span class="hljs-built_in">val</span>();<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">mod</span>()) &#123;<br>            x += <span class="hljs-built_in">mod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> ModIntBase &amp;<span class="hljs-keyword">operator</span>/=(<span class="hljs-type">const</span> ModIntBase &amp;rhs) &amp; &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> ModIntBase <span class="hljs-keyword">operator</span>*(ModIntBase lhs, <span class="hljs-type">const</span> ModIntBase &amp;rhs) &#123;<br>        lhs *= rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> ModIntBase <span class="hljs-keyword">operator</span>+(ModIntBase lhs, <span class="hljs-type">const</span> ModIntBase &amp;rhs) &#123;<br>        lhs += rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> ModIntBase <span class="hljs-keyword">operator</span>-(ModIntBase lhs, <span class="hljs-type">const</span> ModIntBase &amp;rhs) &#123;<br>        lhs -= rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> ModIntBase <span class="hljs-keyword">operator</span>/(ModIntBase lhs, <span class="hljs-type">const</span> ModIntBase &amp;rhs) &#123;<br>        lhs /= rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, ModIntBase &amp;a) &#123;<br>        i64 i;<br>        is &gt;&gt; i;<br>        a = i;<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> ModIntBase &amp;a) &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> ModIntBase &amp;lhs, <span class="hljs-type">const</span> ModIntBase &amp;rhs) &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::strong_ordering <span class="hljs-built_in">operator</span>&lt;=&gt;(<span class="hljs-type">const</span> ModIntBase &amp;lhs, <span class="hljs-type">const</span> ModIntBase &amp;rhs) &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() &lt;=&gt; rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <br><span class="hljs-keyword">private</span>:<br>    U x;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;u32 P&gt;<br><span class="hljs-keyword">using</span> ModInt = ModIntBase&lt;u32, P&gt;;<br><span class="hljs-keyword">template</span>&lt;u64 P&gt;<br><span class="hljs-keyword">using</span> ModInt64 = ModIntBase&lt;u64, P&gt;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Barrett</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Barrett</span>(u32 m_) : <span class="hljs-built_in">m</span>(m_), <span class="hljs-built_in">im</span>((u64)(<span class="hljs-number">-1</span>) / m_ + <span class="hljs-number">1</span>) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> u32 <span class="hljs-title">mod</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> u32 <span class="hljs-title">mul</span><span class="hljs-params">(u32 a, u32 b)</span> <span class="hljs-type">const</span> </span>&#123;<br>        u64 z = a;<br>        z *= b;<br>        <br>        u64 x = <span class="hljs-built_in">u64</span>((<span class="hljs-built_in">u128</span>(z) * im) &gt;&gt; <span class="hljs-number">64</span>);<br>        <br>        u32 v = <span class="hljs-built_in">u32</span>(z - x * m);<br>        <span class="hljs-keyword">if</span> (m &lt;= v) &#123;<br>            v += m;<br>        &#125;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    u32 m;<br>    u64 im;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;u32 Id&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DynModInt</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">DynModInt</span><span class="hljs-params">()</span> : x(<span class="hljs-number">0</span>) &#123;</span>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;std::unsigned_integral T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">constexpr</span> <span class="hljs-title">DynModInt</span><span class="hljs-params">(T x_)</span> : x(x_ % mod()) &#123;</span>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;std::signed_integral T&gt;</span><br><span class="hljs-function">    <span class="hljs-keyword">constexpr</span> <span class="hljs-title">DynModInt</span><span class="hljs-params">(T x_)</span> </span>&#123;<br>        <span class="hljs-type">int</span> v = x_ % (<span class="hljs-type">int</span>)(<span class="hljs-built_in">mod</span>());<br>        <span class="hljs-keyword">if</span> (v &lt; <span class="hljs-number">0</span>) &#123;<br>            v += <span class="hljs-built_in">mod</span>();<br>        &#125;<br>        x = v;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">setMod</span><span class="hljs-params">(u32 m)</span> </span>&#123;<br>        bt = m;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">static</span> u32 <span class="hljs-title">mod</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> bt.<span class="hljs-built_in">mod</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> u32 <span class="hljs-title">val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <br>    <span class="hljs-keyword">constexpr</span> DynModInt <span class="hljs-keyword">operator</span>-() <span class="hljs-type">const</span> &#123;<br>        DynModInt res;<br>        res.x = (x == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">mod</span>() - x);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> DynModInt <span class="hljs-title">inv</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> v = <span class="hljs-built_in">invGcd</span>(x, <span class="hljs-built_in">mod</span>());<br>        <span class="hljs-built_in">assert</span>(v.first == <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> v.second;<br>    &#125;<br>    <br>    <span class="hljs-keyword">constexpr</span> DynModInt &amp;<span class="hljs-keyword">operator</span>*=(<span class="hljs-type">const</span> DynModInt &amp;rhs) &amp; &#123;<br>        x = bt.<span class="hljs-built_in">mul</span>(x, rhs.<span class="hljs-built_in">val</span>());<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> DynModInt &amp;<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> DynModInt &amp;rhs) &amp; &#123;<br>        x += rhs.<span class="hljs-built_in">val</span>();<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">mod</span>()) &#123;<br>            x -= <span class="hljs-built_in">mod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> DynModInt &amp;<span class="hljs-keyword">operator</span>-=(<span class="hljs-type">const</span> DynModInt &amp;rhs) &amp; &#123;<br>        x -= rhs.<span class="hljs-built_in">val</span>();<br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-built_in">mod</span>()) &#123;<br>            x += <span class="hljs-built_in">mod</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">constexpr</span> DynModInt &amp;<span class="hljs-keyword">operator</span>/=(<span class="hljs-type">const</span> DynModInt &amp;rhs) &amp; &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span> *= rhs.<span class="hljs-built_in">inv</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> DynModInt <span class="hljs-keyword">operator</span>*(DynModInt lhs, <span class="hljs-type">const</span> DynModInt &amp;rhs) &#123;<br>        lhs *= rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> DynModInt <span class="hljs-keyword">operator</span>+(DynModInt lhs, <span class="hljs-type">const</span> DynModInt &amp;rhs) &#123;<br>        lhs += rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> DynModInt <span class="hljs-keyword">operator</span>-(DynModInt lhs, <span class="hljs-type">const</span> DynModInt &amp;rhs) &#123;<br>        lhs -= rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> DynModInt <span class="hljs-keyword">operator</span>/(DynModInt lhs, <span class="hljs-type">const</span> DynModInt &amp;rhs) &#123;<br>        lhs /= rhs;<br>        <span class="hljs-keyword">return</span> lhs;<br>    &#125;<br>    <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(std::istream &amp;is, DynModInt &amp;a) &#123;<br>        i64 i;<br>        is &gt;&gt; i;<br>        a = i;<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(std::ostream &amp;os, <span class="hljs-type">const</span> DynModInt &amp;a) &#123;<br>        <span class="hljs-keyword">return</span> os &lt;&lt; a.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> DynModInt &amp;lhs, <span class="hljs-type">const</span> DynModInt &amp;rhs) &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() == rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">constexpr</span> std::strong_ordering <span class="hljs-built_in">operator</span>&lt;=&gt;(<span class="hljs-type">const</span> DynModInt &amp;lhs, <span class="hljs-type">const</span> DynModInt &amp;rhs) &#123;<br>        <span class="hljs-keyword">return</span> lhs.<span class="hljs-built_in">val</span>() &lt;=&gt; rhs.<span class="hljs-built_in">val</span>();<br>    &#125;<br>    <br><span class="hljs-keyword">private</span>:<br>    u32 x;<br>    <span class="hljs-type">static</span> Barrett bt;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;u32 Id&gt;<br>Barrett DynModInt&lt;Id&gt;::bt = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> Z = ModInt&lt;<span class="hljs-number">998244353</span>&gt;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Comb</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;Z&gt; _fac;<br>    std::vector&lt;Z&gt; _invfac;<br>    std::vector&lt;Z&gt; _inv;<br>    <br>    <span class="hljs-built_in">Comb</span>() : n&#123;<span class="hljs-number">0</span>&#125;, _fac&#123;<span class="hljs-number">1</span>&#125;, _invfac&#123;<span class="hljs-number">1</span>&#125;, _inv&#123;<span class="hljs-number">0</span>&#125; &#123;&#125;<br>    <span class="hljs-built_in">Comb</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">Comb</span>() &#123;<br>        <span class="hljs-built_in">init</span>(n);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m &lt;= n) <span class="hljs-keyword">return</span>;<br>        _fac.<span class="hljs-built_in">resize</span>(m + <span class="hljs-number">1</span>);<br>        _invfac.<span class="hljs-built_in">resize</span>(m + <span class="hljs-number">1</span>);<br>        _inv.<span class="hljs-built_in">resize</span>(m + <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n + <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            _fac[i] = _fac[i - <span class="hljs-number">1</span>] * i;<br>        &#125;<br>        _invfac[m] = _fac[m].<span class="hljs-built_in">inv</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &gt; n; i--) &#123;<br>            _invfac[i - <span class="hljs-number">1</span>] = _invfac[i] * i;<br>            _inv[i] = _invfac[i] * _fac[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        n = m;<br>    &#125;<br>    <br>    <span class="hljs-function">Z <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m &gt; n) <span class="hljs-built_in">init</span>(<span class="hljs-number">2</span> * m);<br>        <span class="hljs-keyword">return</span> _fac[m];<br>    &#125;<br>    <span class="hljs-function">Z <span class="hljs-title">invfac</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m &gt; n) <span class="hljs-built_in">init</span>(<span class="hljs-number">2</span> * m);<br>        <span class="hljs-keyword">return</span> _invfac[m];<br>    &#125;<br>    <span class="hljs-function">Z <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m &gt; n) <span class="hljs-built_in">init</span>(<span class="hljs-number">2</span> * m);<br>        <span class="hljs-keyword">return</span> _inv[m];<br>    &#125;<br>    <span class="hljs-function">Z <span class="hljs-title">binom</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n &lt; m || m &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">fac</span>(n) * <span class="hljs-built_in">invfac</span>(m) * <span class="hljs-built_in">invfac</span>(n - m);<br>    &#125;<br>&#125; comb;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, q;<br>    cin&gt;&gt;n&gt;&gt;q;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">int</span> x = -<span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(),<span class="hljs-string">&#x27;0&#x27;</span>);<br>    Z a[<span class="hljs-number">2</span>], b[<span class="hljs-number">2</span>], c[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;p&lt;=<span class="hljs-number">1</span>;p++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>            a[p] += comb.<span class="hljs-built_in">binom</span>(n, i);<br>            b[p] += comb.<span class="hljs-built_in">binom</span>(n, i) * <span class="hljs-number">2</span> * i;<br>            c[p] += comb.<span class="hljs-built_in">binom</span>(n, i) * i * i;<br>            <span class="hljs-keyword">if</span>((i+p)%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)c[p]-=comb.<span class="hljs-built_in">binom</span>(n, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> p;<br>        cin&gt;&gt;p;<br>        <span class="hljs-keyword">if</span>(s[p<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>)x++;<br>        <span class="hljs-keyword">else</span> x--;<br>        s[p<span class="hljs-number">-1</span>] ^=<span class="hljs-number">1</span>;<br>        Z ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> od = x  &amp; <span class="hljs-number">1</span>;<br>        ans = a[od] * x * x + b[od] * x + c[od] ;<br>        ans = ans / <span class="hljs-number">4</span>;<br>        cout&lt;&lt;ans&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <br>    <span class="hljs-type">int</span> t;<br>    std::cin &gt;&gt; t;<br>    <br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>感觉前面几年的学习还不如这一个月来的效率高呢。我之前到底在做什么？我真的在前进吗？？</p><p>希望我做的这些微薄努力能在一小点程度上稍微扭转我早已烂掉的命运罢…</p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>ACM</tag>
      
      <tag>Codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【碎碎念】耳机全丢了</title>
    <link href="/2025/03/08/%E3%80%90%E7%A2%8E%E7%A2%8E%E5%BF%B5%E3%80%91%E8%80%B3%E6%9C%BA%E5%85%A8%E4%B8%A2%E4%BA%86/"/>
    <url>/2025/03/08/%E3%80%90%E7%A2%8E%E7%A2%8E%E5%BF%B5%E3%80%91%E8%80%B3%E6%9C%BA%E5%85%A8%E4%B8%A2%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>星期三参加校队的内部比赛，打得很烂。当时觉得自己努力的还不够。回到工位开始玉玉，觉得自己真的菜，也怀疑自己的方法不对，执行力太低。</p><p>星期四中午下课，上个学期刚换的新耳机又丢在不知名的地方，拼尽全力没办法找回来。</p><p>人的崩溃有的时候真的就是一瞬间的事情。本来就对自己学习的表现不满，结果连保管好耳机这么一件小事情都做不好，有点绝望。上网一搜，这个小小的蓝牙耳机卖350元。学期前还在希望，这学期能买个平板用来写字，放假的时候能去个地方旅游，现在好像都成了一种罪恶。我这种随便丢弃父母给的财物的人，又凭什么去再去像吸血鬼一样讨要其他的东西呢？</p><p>我不打算将这件事情告诉父母了。一小方面怕责问，更多的可能是对自己的惩罚，自己犯的错自己承担责任，没有必要再去拿新的耳机了。</p><p>出于调整心情的目的，难得从宿舍回了趟家，把一个放在工位上的大耳机带了回来。</p><p>周六带着大耳机出去跟家人散步，回来一看耳机又没了。后来意识到，估计是放在饭店了。我现在是真的一个耳机也没有了。</p><p>不得已将另一个耳机的的遗失之事告诉了父母，父亲没有责怪我。</p><p>父母的宽容换来的是我更深的自责。说实话，我更希望他们骂我一顿。一个人，到底是无能到何种程度，才能做不到任何自己想做的事情的？当时也是，现在也是。无论是算法竞赛能力，还是计算机能力，还是做题能力，抑或是过好自己生活的能力…泪水流了下来。</p><p>“没事啊，我这还有耳机呢，你要换哪个新的？”</p><p>我做不出选择。我到底是对自己的自责，还是不敢再担责？我不知道。</p><p>我到底有没有为自己想做的事而努力？我不知道。我想说我在努力，但是我不配说。我也可能根本就没努力过，我唯一能确定的事是  <strong>我很痛苦</strong> 。这种痛苦甚至不能称之为精神，因为精神是需要投射到现实的，这充其量只是一种意识，一种虚无缥缈的，毫无迹象的意识。所以，就结果而谈，我应该是根本不在前进的。</p><p>挥拳击打天空，等待手上的疼痛，可颤抖的只有我的心。</p><p>我恨我自己。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【诗】 太阳的方向</title>
    <link href="/2024/10/25/%E3%80%90%E8%AF%97%E3%80%91%E5%A4%AA%E9%98%B3%E7%9A%84%E6%96%B9%E5%90%91/"/>
    <url>/2024/10/25/%E3%80%90%E8%AF%97%E3%80%91%E5%A4%AA%E9%98%B3%E7%9A%84%E6%96%B9%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1>太阳的方向</h1><p>白银上洒满<br>点点黄金<br>陌生的家，前往<br>太阳的方向。</p><p>前方无云，却<br>雾霭重重<br>空中前行的千帆<br>默默无闻的远方</p><p>古老的灰尘扑向<br>彩色盐碱地<br>诡异的乐曲<br>迎来终章</p><p>苦涩与悲怆化作<br>未知的印章<br>前进,哪怕<br>九死南荒</p><p><img src="/img/241104.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【爬虫】 谁才是近几年的番剧“神作”？</title>
    <link href="/2024/09/09/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E8%B0%81%E6%89%8D%E6%98%AF%E8%BF%91%E5%87%A0%E5%B9%B4%E7%9A%84%E7%95%AA%E5%89%A7%E2%80%9C%E7%A5%9E%E4%BD%9C%E2%80%9D%EF%BC%9F/"/>
    <url>/2024/09/09/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E8%B0%81%E6%89%8D%E6%98%AF%E8%BF%91%E5%87%A0%E5%B9%B4%E7%9A%84%E7%95%AA%E5%89%A7%E2%80%9C%E7%A5%9E%E4%BD%9C%E2%80%9D%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1>谁才是近几年的番剧“神作”？</h1><blockquote><p>有一段时间看<a href="https://bgm.tv/">bamgumi</a>上的评分，尤其是评分的排行榜的时候，我就不由得回忆起那些曾经高开低走的动画，在刚开播的时候还能在排行榜前排看到它们，但一道出现了奇怪的结局之后，又早就掉得无影无踪，实在是令人感叹。当然，也有很多的佳作，在刚开播的时候岌岌无名，但最后才发现它其实是唯一真神。</p></blockquote><p>又发现，正好bangumi有了<a href="https://netaba.re/">natabare</a>这样的动画评分历史变化功能，那我不如直接做一个数据可视化，来看出近几年番剧的评分变化是怎么样的。<em>那既然有了点子，那就直接去做吧</em>！</p><h2 id="分析一下网页资源">分析一下网页资源</h2><h3 id="单个番剧">单个番剧</h3><p>首先要做的第一件事情那就肯定是观察<code>natabare</code>网站的构成，然后找到得到对应数据的办法了。</p><p><img src="/img/2024090901.png" alt="这里是natabare的折线图（以某动画为例子）"></p><p>我们右键审查元素-&gt;网络 就可以看到这个网站加载的各种资源。</p><p><img src="/img/2024090902.png" alt="这里是network"></p><p>我们<strong>注意到</strong>，其中有一个<code>json</code>文件，这里面记载了这部动画每一天的各种数据。</p><p><img src="/img/2024090903.png" alt="这里是network"></p><p>那么在这里我们就可以很高兴地发现！里面的数据居然已经直接发出来了，根本不需要使用<code>js逆向</code>，或者<code>beautifulsoup</code>之类的其他的较为进阶的爬虫的技术了，我们只要把json接受下来然后对其进行处理，就可以直接搞定了。</p><p>我们对网页的资源分析已经完成，接下来就是写代码了。</p><h3 id="番剧列表">番剧列表</h3><p>我们选取2020年的评分靠前的动画列表：</p><p><img src="/img/2024090904.png" alt="列表"></p><p>我们可以通过获得<code>番剧列表</code>网页，来得到我们所需的评分靠前的动画。</p><h2 id="接收资源">接收资源</h2><p>本人并没有考虑过接收的效率问题，所以没有使用<code>scrapy</code>,<code>aiohttp</code>等等可能可以非常有效地提升爬取效率的工具，只用了非常朴素的<code>request</code>库,为了方便编写…</p><h3 id="获取某一部番剧的json">获取某一部番剧的json</h3><p>爬取番剧json的函数大致如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">scrape_data</span>(<span class="hljs-params">_<span class="hljs-built_in">id</span></span>):<br>    headers = &#123;<span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>&#125;<br>    headers[<span class="hljs-string">&#x27;User-Agent&#x27;</span>] = random.choice(user_agent_list)<br>    site_url = base_url + <span class="hljs-built_in">str</span>(_<span class="hljs-built_in">id</span>)<br>    <span class="hljs-comment"># 关闭警报</span><br>    requests.packages.urllib3.disable_warnings()<br>    tries = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> tries &lt; <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(site_url, verify=<span class="hljs-literal">False</span>, headers=headers, timeout=<span class="hljs-number">15</span>)<br>            <span class="hljs-keyword">if</span> (r.status_code != <span class="hljs-number">200</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;404&#x27;</span><br>            json_data = json.loads(r.text)<br>            <span class="hljs-keyword">return</span> json_data<br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;timeout. Retrying in&#x27;</span> + <span class="hljs-built_in">str</span>(tries) + <span class="hljs-string">&#x27;/5&#x27;</span>)<br>            tries += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>其中最重要的一个步骤可能就是timeout的处理了。如果没有多次尝试的错误处理，最后非常有可能会卡在一半不再运行。因为请求在超出一定时间限制之后，就不会再获得任何信息。</p><h3 id="将一部番剧的所有信息用一个类进行处理">将一部番剧的所有信息用一个类进行处理</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Anime</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, _<span class="hljs-built_in">id</span></span>):<br>        raw = scrape_data(_<span class="hljs-built_in">id</span>)<br><br>        <span class="hljs-keyword">if</span> raw == <span class="hljs-string">&#x27;404&#x27;</span>:<br>            self.score = <span class="hljs-string">&#x27;error&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No data for&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;name_cn&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span>:<br>                self.name = raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;name_cn&#x27;</span>]<br>            <span class="hljs-keyword">else</span>:<br>                self.name = raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]<br>            self.score = []<br>            <span class="hljs-comment"># self.image = raw[&#x27;subject&#x27;][&#x27;images&#x27;][&#x27;grid&#x27;]</span><br>            self.air_date = raw[<span class="hljs-string">&#x27;subject&#x27;</span>][<span class="hljs-string">&#x27;air_date&#x27;</span>]<br>            self.score = self.get_score(raw)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_score</span>(<span class="hljs-params">self, raw</span>):<br>        scores = &#123;&#125;<br>        score_set = raw[<span class="hljs-string">&#x27;history&#x27;</span>]<br>        i = <span class="hljs-number">0</span><br>        isopen = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(score_set)-<span class="hljs-number">1</span>:<br>            time = score_set[i][<span class="hljs-string">&#x27;recordedAt&#x27;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> compare_air_date(time, self.air_date) == <span class="hljs-number">3</span>:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rating&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> score_set[i]:<br>                <span class="hljs-keyword">continue</span><br>            now_score = calculate_score(score_set[i][<span class="hljs-string">&#x27;rating&#x27;</span>][<span class="hljs-string">&#x27;count&#x27;</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> now_score:<br>                self.air_date = time<br>                <span class="hljs-keyword">continue</span><br>            scores[time] = now_score<br>            clock = datetime.datetime.strptime(time, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) + datetime.timedelta(days=-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">while</span> clock.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> scores <span class="hljs-keyword">and</span> isopen:<br>                <span class="hljs-comment"># (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br>                scores[clock.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)] = now_score<br>                clock += datetime.timedelta(days=-<span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># print(clock.strftime(&#x27;%Y-%m-%d&#x27;))</span><br>            isopen = <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">return</span> scores<br></code></pre></td></tr></table></figure><p>类中存储的信息有： <strong>动画名称</strong>、<strong>开播时间（用于筛选较为有用的信息）</strong>、<strong>各个时间段的评分</strong>。 其中也内置了一个方法<code>get_score</code>， 用于提取json中的评分信息。</p><h3 id="获取番剧列表">获取番剧列表</h3><p>我们获取到番剧列表的网站<code>https://bgm.tv/anime/browser/airtime/2020?sort=rank&amp;page=2</code>，其中<code>2020</code>是可替换成各种年份的,而参数<code>page</code>代表了页码号。通过<code>beautifulsoup</code>来获取番剧列表中的元素，得到列表中每一个动画的id。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url</span>(<span class="hljs-params">year, page</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取年份，页码对应url&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;https://bgm.tv/anime/browser/airtime/&quot;</span>+ <span class="hljs-built_in">str</span>(year) + <span class="hljs-string">&quot;?sort=rank&amp;page=&quot;</span> + <span class="hljs-built_in">str</span>(page)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">launch_to_page</span>(<span class="hljs-params">year, page</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;发送get请求&quot;&quot;&quot;</span><br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0&#x27;</span>,<br>               <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>&#125;<br>    html = requests.get(get_url(year, page), headers = headers).text<br>    <span class="hljs-keyword">return</span> html<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_soup</span>(<span class="hljs-params">year, page</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;分析网页进行id的提取&quot;&quot;&quot;</span><br>    html = launch_to_page(year, page)<br>    soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    soup_of_list = soup.find_all(<span class="hljs-string">&#x27;li&#x27;</span>, class_=[<span class="hljs-string">&#x27;item odd clearit&#x27;</span>, <span class="hljs-string">&#x27;item even clearit&#x27;</span>])<br>    links = [li.find(<span class="hljs-string">&#x27;a&#x27;</span>)[<span class="hljs-string">&#x27;href&#x27;</span>] <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> soup_of_list]<br>    ids = [<span class="hljs-built_in">int</span>(li[<span class="hljs-number">9</span>:]) <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> links]<br>    <span class="hljs-keyword">return</span> ids<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_anime_after</span>(<span class="hljs-params">year</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;得到某一年以后的每个番剧构成的列表&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 今年是2024！</span><br>    ids = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(year, <span class="hljs-number">2025</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n scraping anime page for year &quot;</span> + <span class="hljs-built_in">str</span>(y) + <span class="hljs-string">&quot;...&quot;</span>)<br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, PAGES_LIMIT + <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;scraping page: &quot;</span> + <span class="hljs-built_in">str</span>(page) + <span class="hljs-string">&quot;...&quot;</span>)<br>            ids = ids + get_soup(y, page)<br>    <span class="hljs-keyword">return</span> ids<br></code></pre></td></tr></table></figure><p>在这里值得一提的，可能就是使用了beautifulsoup的<code>get_soup</code>函数。我们可以分析一下列表的html元素构成：</p><p><img src="/img/2024090904.png" alt="2022年的html元素"></p><p>可以发现，为了做出斑马纹样式，它的列表是作出了奇偶性的分类，所以这两种class都在我们的考虑范围之内。</p><p>得到了每一个列表的元素之后，我们再获取它的跳转链接，用<strong>切片</strong>获取它的id就好了。</p><h2 id="存储数据">存储数据</h2><h3 id="写入csv文件">写入csv文件</h3><p>这里我们将所有数据写入csv文件。csv是一种纯文本文件，可以使用它来写入信息到表格中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_files</span>():<br>    <span class="hljs-comment"># write field</span><br>    fieldnames = [<span class="hljs-string">&#x27;name&#x27;</span>]<br>    fieldnames.extend(pd.date_range(START_DATE, END_DATE).strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>).tolist())<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csvfile:<br>        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)<br>        writer.writeheader()<br>        ids = get_anime_after(<span class="hljs-number">2018</span>)<br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> ids:<br>            cnt += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;writing row: &quot;</span> + <span class="hljs-built_in">str</span>(_<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;(&quot;</span> + <span class="hljs-built_in">str</span>(cnt) + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(ids)) + <span class="hljs-string">&quot;)&quot;</span>)<br>            a = Anime(_<span class="hljs-built_in">id</span>)<br>            <span class="hljs-keyword">if</span> a.score == <span class="hljs-string">&#x27;error&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            row = a.score<br>            row[<span class="hljs-string">&#x27;name&#x27;</span>] = a.name<br>            writer.writerow(row)<br></code></pre></td></tr></table></figure><p>这样子我们的爬虫就大功告成了。可是怎么样才能让我们获取到的数据显示出来更方便地看到呢？这里就需要数据可视化的作用了。</p><h2 id="数据可视化">数据可视化</h2><p>由于数据是由时间变化的，这里更适合制作一个条形图的视频，这里推荐用<a href="https://flourish.studio/">flourish</a>。</p><p>我们把自己的数据（csv文件）传入flourish，就可以直接得到视频了。</p><p><img src="/img/2024091001.png" alt="我们得到的视频截图"></p><blockquote><p>感谢你读到最后。你也可以点击<a href="https://public.flourish.studio/visualisation/17440062/">此链接</a>看到最后成品。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>动画</tag>
      
      <tag>杂谈</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法题应有的出题规范（写给sastoj）</title>
    <link href="/2024/09/04/%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/"/>
    <url>/2024/09/04/%E5%87%BA%E9%A2%98%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1>算法题应有的出题规范（写给sastoj）</h1><blockquote><p>给算法竞赛出题涉及题面，测试点等多个方面，由于没有规范的情况下，出题人容易出格式千奇百怪，题面表达不清等问题，所以在这里给出<code>sastoj</code>特色出题规范 当然，关于题面，数据点等方法也同样适用于任何其他oj。</p></blockquote><h2 id="题面书写">题面书写</h2><blockquote><p>此部分的规范不对愚人节比赛的题目有任何约束力。但应遵守本文档的其他部分。</p></blockquote><h3 id="组成部分">组成部分</h3><p>通常来说一道完整的题面应包含一下部分（*表示可省略）：</p><ol><li><p>*题目背景。讲述一道题目的背景，可以不写。题目背景用于介绍题目所属故事，便于读者理解，也可以用于增加题目趣味性。</p></li><li><p><strong>题目描述</strong>。题目的核心部分。要 <strong>没有歧义</strong> 地<strong>符合格式</strong>地指出任务的要求。</p></li><li><p><strong>输入/输出格式</strong>。指出输入的形式，类型和数据范围。</p></li><li><p><strong>输入/输出样例</strong>。表示给出的一种输入以及正确程序应该输出的结果。样例可以有多个。</p></li><li><p>*补充。对题目可能产生歧义的部分作出解释，或对样例进行说明。</p></li></ol><h3 id="题目描述的规范">题目描述的规范</h3><p>题目描述是对于一道题目的核心部分。对于一个合格的题面，题目描述部分应当<strong>没有任何歧义地指出</strong>一个题目所要求解决的问题。有以下几条可能出现失误的要点必须遵守：</p><ul><li><strong>对于一个需要解释的名词（尽管约定俗成）， 必须指出它的具体定义。必要时可以使用数学表达式。</strong></li></ul><p>下面给出一部分常用名词的具体定义：</p><p><em>排列(Permutation)：一段1~n的整数序列。保证1~n每个数字有且仅出现一次。</em></p><p><em>子序列(subsequence):从给定序列中去除一些元素，而不改变其他元素之间相对位置而得到的。</em></p><p><em>子串(substring):表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 串中从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 这一段，也就是顺次排列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>S</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">S[i],S[i+1],\ldots,S[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 形成的字符串。</em></p><p><em>自环 (loop)：对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span> 中的边 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>=</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e = (u, v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>=</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">u = v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span> 被称作一个自环。</em></p><p>更多相关基础词语的定义，参见<a href="https://oi-wiki.org/">oi-wiki</a>或者维基百科等资源。</p><ul><li><strong>对于每一个需要作为输入输出数据的数（或作为运算时的中间变量），必须使用不同的字母进行标识。字母旁边最好标上对应数据范围。（若没有，则须在补充中说明）</strong></li></ul><p>比如，下面这样的题目（a+b problem）的描述是不被允许的：</p><blockquote><p>给出两个整数，请输出它们的和。</p></blockquote><p>正确的表述如下:</p><blockquote><p>给出两个整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> （<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">a, b \leq 10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>），输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>。</p></blockquote><ul><li><strong>题目描述可以延续题目背景所说的世界观所描述。但是在写出要求（约束条件）的时候，必须要标准写出。不能掺杂任何模棱两可的词汇。</strong></li></ul><p>写题目的大忌是认为做题者会往理所应当的思路上来理解自己的题目。然而事实上，不同人可能会有各种的理解（这可能也是赛时clarification的意义）。我们要保证的是在不能让做题者产生任何不符合标准程序的理解。一种解决方式是给自己的题面 <em>“找茬”</em> 。</p><h3 id="IO格式、样例及补充">IO格式、样例及补充</h3><p><strong>输入输出格式部分</strong>：</p><p>输入格式应该标明总共的行数，以及每行需要输入的内容。请注意，这里要输入的所有内容也一定要给出字母。</p><p>sastoj给出了可以选择行末空格以及文末换行的功能，所以应当在体面中也对此有所表明。</p><p><strong>输入输出样例</strong>：</p><p>每一个样例应该给出<code>（输入/输出）#序号</code>的小标题。并在下面给出多行代码块。</p><p><strong>补充</strong>：</p><p>补充内容一定要写上样例解释（<em>样例解释的规范参见“题目描述的规范”</em>）便于做题者进行理解。如果有参考的资料，引用，或者附件，都应该在这一段中标明。</p><p>如果题目描述中没有数据范围，则务必在此补充上。</p><h2 id="题面格式">题面格式</h2><h3 id="关于markdown">关于markdown</h3><p>我们使用<code>markdown</code>来书写题面。markdown是一种设计来易于阅读、编写和理解的标记语言。</p><p>要学习markdown语法可见<a href="https://markdown.com.cn/basic-syntax/">官方教程</a></p><p>在<strong>题面书写</strong>部分，我们已经列出了一道题面的组成部分，这些部分应当都使用二级标题，一级标题则用来写此题的题面。</p><p>具体来说，markdown应如下图所示：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section"># 标题</span><br><span class="hljs-section">## 题目背景</span><br><span class="hljs-section">## 题目描述</span><br><span class="hljs-section">## 输入格式</span><br><span class="hljs-section">## 输出格式</span><br><span class="hljs-section">## 输入输出样例</span><br><span class="hljs-section">### 输入#1</span><br><span class="hljs-section">### 输出#1</span><br><span class="hljs-section">### 输入#2</span><br><span class="hljs-section">### 输出#2</span><br><span class="hljs-section">## 补充</span><br></code></pre></td></tr></table></figure><h3 id="关于markdownlint">关于markdownlint</h3><blockquote><p>The Markdown markup language is designed to be easy to read, write, and understand. It succeeds - and its flexibility is both a benefit and a drawback. Many styles are possible, so formatting can be inconsistent. Some constructs don’t work well in all parsers and should be avoided. The CommonMark specification standardizes parsers - but not authors.</p></blockquote><p><code>markdownlint</code> 是一套用来规范markdown书写格式的工具。有了markdownlint，写作者的语法将更为规范。</p><p>使用markdownlint可以按照<a href="https://github.com/DavidAnson/markdownlint">GitHub官网</a>的方式，使用nodejs进行下载，也可以使用<code>vscode</code>，<code>obsidian</code>等工具自带的markdownlint扩展。</p><p>关于sastoj的markdownlint规范，请点击<a href="https://github.com/NJUPT-SAST/sastoj-docs/blob/main/.markdownlint.jsonc">此链接</a>。</p><p><strong>使用方式</strong>：将上述链接中的文件复制到你所写markdown文件所在的同一工作环境中以使markdownlint按照规定的<code>.markdownlint.jsonc</code>文件所述的规范进行错误提醒。</p><h3 id="题面中所涉及的markdown规范">题面中所涉及的markdown规范</h3><ol><li><p>所有出现的变量，数字，数学符号，公式等，必须使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">Latex</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span></span></span></span>。</p></li><li><p>在一些需要注意的要点中，可以使用<strong>加粗符号来重点说明</strong>。</p></li><li><p>一些专有的英文名词，可以使用<code>代码块</code>标注。</p></li><li><p>输入输出样例，必须包含在<code>多行代码块</code>中。</p></li><li><p>如果必须要插入图片（用作样例的解释或者具体说明等）须提前存在图床中再使用<code>![]()</code>的格式。</p></li><li><p><em>不要</em><strong>滥用</strong> <s>markdown</s>的<code>特殊</code><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>格式</mtext></mrow><annotation encoding="application/x-tex">格式</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">格式</span></span></span></span>。</p></li></ol><h2 id="测试点设置">测试点设置</h2><p><code>sastoj</code>目前仅支持常规题的测试点。测试点可以有多个，每一个都可以有对应的分数点。如果你程序的输出结果与数据点的<code>.out</code>或<code>.ans</code>文件相同，视为通过该测试点，应该获得对应分数。</p><h3 id="出数据的原则">出数据的原则</h3><p>我们在生成一个题目的数据时，应当遵守如下原则：</p><ul><li><strong>如果是新手向的比赛（非ICPC赛制），最好在数据点中加入样例。</strong></li></ul><p>作为初次接触程序设计竞赛的新手，他们可能对一道题目如何提交，如何判分等步骤产生困惑，只能根据样例来判断自己的代码是否正确。为了不让他们感到困惑，最好在数据点中加入样例。</p><ul><li><strong>对于非ICPC赛制的比赛，数据范围的设置应当有一定梯度。</strong></li></ul><p>根据算法的优劣的区别，一道题目的分数也应当有所区别，分数在一定程度上更是对于一道题目完成度的体现。比如说，对一道数据结构题目，应当至少提供<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">30\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">30%</span></span></span></span>的答案正确的暴力算法分数。</p><ul><li><strong>一道完整数据点的题目应当有针对特判的数据。</strong></li></ul><p>在许多题目中，对于一些特殊的数据，不能使用常规的算法来解决问题。为了考察参赛者思维的严谨性，应当有一些特殊的数据来考察参赛者是否考虑到了这种情况。</p><ul><li><strong>只有复杂度优秀的算法才能够获得满分，但尽量不要卡常数。</strong></li></ul><p>这要求出题者需要一定程度上严格把握时间、空间限制。既不能出现数据偏弱，可以用暴力卡过去的情况，也不能出现数据太强，参赛者屡屡被卡常的情况。出题者应对比赛用评测机有一定估量，在写标准程序的时候，可以故意把常数写的大一点。</p><ul><li><strong>对于ICPC赛制的比赛，应当有能hack掉每一种错误算法的数据。</strong></li></ul><p>常用(<s>臭名昭著</s>)的方法有：生成菊花图，生成链，卡单哈希等等。当然，这些不一定要做，但是针对生成错误答案的程序应该将其hack掉。</p><ul><li><strong>使用lf进行换行，而非crlf。</strong></li></ul><p>算法竞赛的评测机采用<code>Linux</code>系统，在 Linux 和 Mac 上，<code>LF</code>相当于新文本行的开始。如果采用windows系统所输出的回车+换行符<code>CRLF</code>的话，可能会产生一下不确定的错误。</p><p>虽然sastoj有将<code>CRLF</code>转化为<code>LF</code>的功能，但我们仍然建议在出数据的时候就以<code>LF</code>进行换行。</p><h3 id="工具与方法">工具与方法</h3><p>对于较大的数据点，手动输入肯定是不现实的。下面有一部分出数据的工具与方法介绍：</p><h4 id="编写python程序">编写python程序</h4><p><code>python</code>由于其轻量化的优势，常常用来生成一道题目的测试数据（当然，您也可以使用其他的语言）。这里仅介绍python编写数据生成器的方法。</p><p>以<code>a+b problem</code>为例，下面是生成数据的代码。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>，<span class="hljs-number">11</span>): <span class="hljs-comment"># 我们生成1.in,1.out,2.in,2.out....</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>.in&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        a = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>)<br>        b = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>)<br>        <span class="hljs-comment"># 我们生成1~100000范围内的整数a和b </span><br>        f.write(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;b&#125;</span>\n&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>))<br>        <span class="hljs-comment">#将生成的数据写入文件。</span><br>        <span class="hljs-comment">#注意：为了保证写入lf而不是crlf，我们将字符串以utf-8编码，转化为二进制写入</span><br>        os.system(<span class="hljs-string">f&quot;.\std.exe &lt; <span class="hljs-subst">&#123;i&#125;</span>.in &gt; <span class="hljs-subst">&#123;i&#125;</span>.out&quot;</span>)<br>        <span class="hljs-comment"># std.exe为出题者所写的标准程序。这条命令表示以&#123;i&#125;.in为输入，以std.exe为程序，将输出写入&#123;i&#125;.out文件。</span><br></code></pre></td></tr></table></figure><h4 id="使用CYaRon">使用<code>CYaRon</code></h4><p><code>CYaRon</code>是洛谷开发的一款开源的数据生成工具。其中支持生成不同类型的树、图等数据。当然，CYaRon也是基于Python的。</p><p>CYaRon的稳定版本可以从pip获取:</p><p><code>pip install cyaron</code></p><p>在此之前，需要准备好Python。</p><p>当然，您可以参照文档进行<a href="https://github.com/luogu-dev/cyaron/wiki">学习</a>。</p><h2 id="配置文件">配置文件</h2><p>为了设置题目的时空限制，设置题目类型以及配置数据点结构， <code>sastoj</code> 设置了一套配置文件的规则。</p><p>对于不同题型的题目的配置文件方法，详情见<a href="https://github.com/Jisu-Woniu/rsjudge-test-cases-schema/tree/main/out">示例</a></p><p>作为出题者，一般情况下我们使用<code>.toml</code>格式写配置文件。配置文件中能够标明题目的时空限制，分数分布以及数据点的关系等等。</p><h3 id="使用yapyto生成配置文件">使用yapyto生成配置文件</h3><p><code>yapyto</code>是一款基于python的<strong>sastoj专用</strong>配置文件生成工具。主要功能有</p><ol><li><p>根据当前的数据点自动生成所需的配置文件</p></li><li><p>将<a href="hydro.ac"><code>hydro</code></a>上的题目便捷转化为sastoj所需的格式。</p></li><li><p>给定标程以及对应的数据生成器，直接生成输入输出文件和对应的配置文件。</p></li></ol><p>您需要把yapyto的<a href="https://github.com/FishZe/yapyto">GitHub仓库</a><code>clone</code>到本地进行使用。</p>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>OI</tag>
      
      <tag>出题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/31/hello-world/"/>
    <url>/2024/08/31/hello-world/</url>
    
    <content type="html"><![CDATA[<blockquote><p>official example of hexo</p></blockquote><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记人生中第一次XCPC</title>
    <link href="/2024/05/30/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1XCPC%E6%AF%94%E8%B5%9B/"/>
    <url>/2024/05/30/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1XCPC%E6%AF%94%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>ACM这个东西，其实我高中时期就有所耳闻了。而作为一个前OIer，感觉上了大学之后acm比赛是怎么说都得碰一碰的。</p><p>所以说，为此，我参加了校队，虽然自己不是计算机专业的，但是总是和一些计软院的同学（以及将要进入计软院的同学）在一起。可能因为学院以及专业不同的原因吧 <s>（其实主要是性格原因）</s> ，跟那些同学也熟络不起来，最后呢，还是在老师以及同门学长的帮助之下找到了队友。</p><p>个人觉得团队版的程序设计竞赛真的很<code>cool</code>诶，一个人不会有太大的压力，也不会有像考试那样的令人害怕的氛围，最重要的是， <strong>同学与同学之间的帮助真的是无私的</strong> 。这点真的是强调竞争的某些考试类比赛永远也得不到的。</p><p>所以，怎么说呢，就算是没有成绩，也不失为一种奇妙的体验吧，我这么想着。</p><h2 id="day-n">day  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">-n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal">n</span></span></span></span></h2><p>JSCPC的时间已经定好了，举办地点在离我们很近的南大。虽然说我所在的队伍是打星名额，是不上领奖台的。但是，我还是很想去一次。但是，却发现jscpc的时间居然跟大学物理的期中考试时间冲突了。</p><p>我第一反应肯定是去申请补考/缓考的。找过了各种负责的机构以及老师，但是最后的结果却令人失望。一个计入绩点的考试，居然没有补考缓考，我也不知道他们这帮人是怎么想的。也就是说， <strong>我如果去比赛的话，我的期中考试分数就是零分</strong> 。</p><p>固然，参加比赛不会给我带来什么实质性的奖励，反而会对我的绩点造成损失。在别人都能拿高分的情况下啊，我一个零分必然是极其显眼的。做了很久的心理斗争，问了自己很多次“我自己真正想要的是什么”。</p><p>我果然还是想去JSCPC。</p><p>**什么也无法舍弃的人，什么也做不到。**出自一个我最喜欢的动画人物之口。我想，我也是时候应该舍弃一些东西了。</p><h2 id="day-0">day 0</h2><p>校队组织了一次模拟赛，也是我第一次跟两位学长见面。在模拟赛的时候被队长的代码手速震惊到了。真的打的太快了…或者说，可能这才是竞赛选手应该有的打字速度。但是我作为一个小学第一节打字课没上的人，操着我的蹩脚打字法一直到现在，改邪归正也是不可能的了。当然，应该这是做题比较熟练的一种体现吧。但是呢，就算我们有着这么快的写题速度，AC量跟不上也无济于事啊。我们眼睁睁看着我们的排名从第二一直往下掉，掉的没底了。就因为一道单调栈的题目，我们思路想错了没跟上。</p><p>这次之后我想了很多的原因，也大概明白XCPC比赛到底应该是个怎么个打法了。</p><h2 id="day-1">day 1</h2><p>今天星期六，做好决定的我，准备去南大来一波真正的热身赛。</p><p><img src="/img/JSCPC-2.jpg" alt="这里"></p><p>今天下着小雨，我们过去的时候雨刚停，温度非常的令人舒服。</p><p>首先是赞助商huawei的宣讲会，又是经典的大神分享环节。我觉得吧，打算竞的大神都会多多少少 ~~有一种特殊的个人魅力（（ ~~ 可能也是因为所处类似环境造成的认同感吧。感觉这次的赞助商还蛮慷慨的哈，免费抽奖的礼物特别多，有耳机，手表啥的都送，据我所知应该不便宜。当然啦我肯定是啥也没抽到。不过我们学校的一个学长抽到了，他好像还是我未来的队友wwww</p><p>送了我们30块钱的饭票，南大的吃的可以随便抢购，除了吃了顿晚饭甚至还可以零元购各种零食饮料，给人的感觉还是很爽的。</p><p>然后就打了个热身赛吧（其实就是熟悉环境随便打打罢了），不过可惜的是我前一天刚看欧拉函数，结果一道欧拉函数的题还没推出结论，还是打表找的结论，搞得我很惭愧…</p><h2 id="day-2">day 2</h2><p>这次是真的要比赛了，不是开玩笑了哈。</p><p>以学校为单位集合拍照的时候，才发现我们学校的名额多得离谱，可能仅次于东道主南大吧。</p><p>题目发下来之后，我们每个人先读不同的题目，看到签到就做。由于我们队长的敲代码十分熟练，所以很快就把签到给打掉了，写完这两道题之后我们的排名很高。之后呢，我提供了一下一道二分题的思路，也是很轻松的就过，3个气球到手。（话说这个气球机制我也觉得很有意思，做出来一道题就给一道题对应颜色的气球，如果是一血的话甚至能获得一个字母形状的气球）</p><p>之后的状况其实就有点坐牢了。另外两位学长攻克一道博弈论题，我因为博弈论很烂，所以去看看其他的题目有没有拿下的机会，但是好像还是没有什么机会。就这样，一位学长不断提供思路，我感觉结论都蛮对的，另一位学长写题交题，但是连交了5发，都寄了。<strong>+5</strong>的罚时啊，之前几题一发过的优势可以说是全无了。不过好在我最后在他们的思路上发现了正解是怎么做的，，也算是过了4题了。</p><p>午饭的免费麦当劳很不错。</p><p>淡蓝色的H题很少人过，我不明白为什么，因为我觉得贪心并不难啊，但是最后因为各种各样的原因还是没有交题。最后讲题的时候说是dp，那我似乎确实是想错了。我们用最后的时间去写主席树已经是来不及了，也不知道能不能过，总之其实还是挺遗憾的。</p><p><strong>所以最后的结果出来了， 场切4题，如果不打星算是上游的铜牌。</strong></p><h2 id="what’s-more">what’s more?</h2><p>说实话这一次还是有一些让我有点遗憾的点的，但是你总不能对着自己的完美发挥说这是自己的真实水平对吧，发挥失常才是实力的一部分。省赛拿铜牌，全国比赛拿牌就真够呛。总之<strong>我还是太菜</strong>。</p><p>颁奖结束后接了辅导员的电话，他跟我反馈了我不去物理考试后，老师对我的态度，但是我很感谢他尊重我的选择。怎么说呢，作为一个优柔寡断的人，我一般失去了什么东西都要斤斤计较，陷入内耗，但是这次并没有，反而是一种自信的感觉将我包围。可能是我真的知道自己想要什么了吧。一个人要是患得患失，永远将自己束缚在规矩的链条之中，那还和NPC有什么区别呢，终归还是要被玩家利用和欺负的。</p><p>骑自行车回学校的路上把代表了那道博弈论题的红气球弄丢了。</p><p>一些小感想罢了，最后还是希望我能走的更远吧。<br><img src="/img/JSCPC-3.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ACM</tag>
      
      <tag>回忆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【诗】 食堂</title>
    <link href="/2024/03/16/%E3%80%90%E8%AF%97%E3%80%91%E9%A3%9F%E5%A0%82/"/>
    <url>/2024/03/16/%E3%80%90%E8%AF%97%E3%80%91%E9%A3%9F%E5%A0%82/</url>
    
    <content type="html"><![CDATA[<h1>食堂</h1><p>冰冷的朝阳向东坠落<br>抬头却只有漆黑的月亮<br>在波光粼粼的夜空中<br>只有乌鸦在潜泳</p><p>走在光辉道路的  野鸡<br>躲在下水道里的  铁锈<br>白云吞噬边界</p><p>嘴巴为了遗忘<br>鼻子领航虚空<br>树枝的闹钟，其实是<br>胡须</p><p>橙黄的大地<br>幽灵<br>独我一人</p><p><img src="/img/2403162.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>诗歌</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随便想的两道算法题+题解</title>
    <link href="/2024/02/28/%E9%9A%8F%E4%BE%BF%E6%83%B3%E7%9A%84%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98+%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/02/28/%E9%9A%8F%E4%BE%BF%E6%83%B3%E7%9A%84%E4%B8%A4%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98+%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>在初中的时候，感觉打OI最有意思的事情之一就是出题。因为自己出的题目可以套一些奇奇怪怪的设定来整活，还可以名正言顺地迫害小伙伴。不过呢出的都不是什么正经题目。</p><p>现在几年过去了，感觉已经好久没有出过题目了，正好社团的友谊赛给了我一个契机来认真出两道题，个人认为这两题的难度，思维量，码量也都说的过去，就出一篇题解。</p><h2 id="A-萌娘评鉴指南"><a href="https://www.luogu.com.cn/problem/U391746">A.萌娘评鉴指南</a></h2><p>题目大意就是给主角找对象啦(* /ω＼*)</p><h3 id="概括">概括</h3><p>给定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个集合，这<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个集合组成一个序列，给定3种操作，一共进行<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>次：</p><ol><li>给编号l~r的集合每个集合添加一个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></li><li>给编号l~r的集合每个集合进行反转 <strong>（去掉有的数字，添加原先没有的数字）</strong></li><li>询问编号l~r的集合中，有数字<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>的集合数量是奇数还是偶数。</li></ol><p>数据范围：  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>≤</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo><mi>c</mi><mo>≤</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">n,m \leq 2\times10^5, c\leq15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">15</span></span></span></span>.</p><h3 id="思路：">思路：</h3><h4 id="位运算：">位运算：</h4><p>其实看到c的范围就可以找到这题的突破口。因为对于集合里的每个数，都只有“有”和“没有”两种状态，所以完全可以利用位运算，来把每个集合转化为二进制的数字，这样集合就可以以<code>int</code>的形式存储了。</p><p>例： 1,2,4 -&gt; 1011 -&gt; 11</p><p>使用位运算，我们又可以重新翻译一下这道题目：</p><p>给定n个整数，进行q次以下可能的操作：</p><ol><li>给编号l~r的数每个数都 <strong>按位或</strong> <code>1&lt;&lt;c</code></li><li>给编号l~r的数每个数都进行 <strong>取反</strong></li><li>查询l~r的数的<strong>异或和</strong>  <strong>按位与</strong> <code>1&lt;&lt;c</code>的结果。</li></ol><p>熟悉位运算的应该能非常容易作出这种转化，不熟悉的也会发现这几种操作可以和原先所说的完全对应起来。</p><h4 id="线段树：">线段树：</h4><p>因为询问的是异或的结果，而异或是满足结合律的，结合数据范围，我们必须要想到一种能够在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">logn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>复杂度内进行操作的方法。</p><p>那么很明显就是用 <strong>线段树</strong>。 线段树维护的内容是区间内的异或和。</p><p>那么问题来了，怎么样完成1操作和2操作呢？</p><p>对于线段树而言，肯定是要建lazytag的，通过合理地设置lazytag，我们就可以合理建出满足要求的线段树 <s>（车轱辘话时间）</s></p><p>显然，lazytag中包含以下两个内容： <strong>区间要取或的值</strong> 和 <strong>区间是否取反</strong>。但是有一个问题：区间进行取反之后，区间要取或的值就变了！思考一下可以发现，要取或的值，取反之后，再取与就可以了。</p><p>所以实际上我们的lazytag要存储3个内容：</p><ol><li>区间要取或的值</li><li>区间是否取反</li><li>区间要取与的值</li></ol><p>此外，还有n个细节需要注意：</p><ol><li>区间长度为偶数，异或和不需要取反，长度为奇数要取反</li><li>如果区间长度为偶数，那么取或操作应该改为取反后取与（因为某一位如果有偶数个1，那么异或和就是0）</li><li>是否取反的标记，应该使用 <strong>异或</strong> 操作,因为取反两次就相当于没有取反，如果用了赋值会出错。</li></ol><h3 id="代码：">代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> a[<span class="hljs-number">500100</span>];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tag</span>&#123;<br>    <span class="hljs-type">int</span> val, v_and = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>, v_or = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> rev = <span class="hljs-number">0</span>;<br>&#125;t[<span class="hljs-number">2000100</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ls</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<span class="hljs-keyword">return</span> p&lt;&lt;<span class="hljs-number">1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">rs</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<span class="hljs-keyword">return</span> p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<br>    t[p].val = t[<span class="hljs-built_in">ls</span>(p)].val ^ t[<span class="hljs-built_in">rs</span>(p)].val;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">lazy</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> vand, <span class="hljs-type">int</span> vor, <span class="hljs-type">bool</span> isrev)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(isrev)&#123;<br>        <span class="hljs-type">int</span> temp = t[p].v_and;<br>        t[p].v_and = (~t[p].v_or);<br>        t[p].v_or = (~temp);<br>        <span class="hljs-keyword">if</span>(((r-l+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>)==<span class="hljs-number">1</span>)t[p].val= (~t[p].val);<br>    &#125;<br>    <span class="hljs-keyword">if</span>((r-l+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>        t[p].val &amp;= vand;<br>        t[p].val &amp;= (~vor);       <br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        t[p].val &amp;= vand;<br>        t[p].val |= vor;<br>    &#125;<br>    <br>    t[p].rev ^= isrev; <br>    t[p].v_and &amp;= vand;<br>    t[p].v_and |= vor;<br>    t[p].v_or |= vor;<br>    t[p].v_or &amp;= vand;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">lazy</span>(<span class="hljs-built_in">ls</span>(p),l,mid,t[p].v_and,t[p].v_or,t[p].rev);<br>    <span class="hljs-built_in">lazy</span>(<span class="hljs-built_in">rs</span>(p),mid+<span class="hljs-number">1</span>,r,t[p].v_and,t[p].v_or,t[p].rev);<br>    t[p].v_and = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>;<br>    t[p].v_or = <span class="hljs-number">0</span>;<br>    t[p].rev = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)&#123;t[p].val=a[l];<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p), l, mid);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p), mid+<span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> nl, <span class="hljs-type">int</span> nr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> vand, <span class="hljs-type">int</span> vor, <span class="hljs-type">bool</span> isrev)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(nl &lt;= l &amp;&amp; nr &gt;=r)&#123;<span class="hljs-built_in">pushdown</span>(p,l,r);<span class="hljs-built_in">lazy</span>(p,l,r,vand,vor,isrev);<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-built_in">pushdown</span>(p,l,r);<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(nl&lt;=mid)<span class="hljs-built_in">update</span>(nl, nr, l, mid, <span class="hljs-built_in">ls</span>(p), vand, vor, isrev);<br>    <span class="hljs-keyword">if</span>(nr &gt;mid)<span class="hljs-built_in">update</span>(nl, nr, mid+<span class="hljs-number">1</span>, r, <span class="hljs-built_in">rs</span>(p), vand, vor, isrev);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> nl, <span class="hljs-type">int</span> nr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(nl &lt;= l &amp;&amp; nr&gt;=r)&#123;<span class="hljs-built_in">pushdown</span>(p,l,r);<span class="hljs-keyword">return</span> t[p].val;&#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushdown</span>(p, l, r);<br>    <span class="hljs-type">int</span> mid = (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(nl&lt;=mid)res^=<span class="hljs-built_in">query</span>(nl, nr, l, mid, <span class="hljs-built_in">ls</span>(p));<br>    <span class="hljs-keyword">if</span>(nr&gt; mid)res^=<span class="hljs-built_in">query</span>(nl, nr, mid+<span class="hljs-number">1</span>,r,<span class="hljs-built_in">rs</span>(p));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> ci;<br>        cin&gt;&gt;ci;<br>        <span class="hljs-keyword">while</span>(ci--)&#123;<br>            <span class="hljs-type">int</span> u;<br>            cin&gt;&gt;u;<br>            a[i] += (<span class="hljs-number">1</span>&lt;&lt;u);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-type">int</span> op;<br>        cin&gt;&gt;op;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> l,r,c;<br>            cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;<br>            <span class="hljs-built_in">update</span>(l,r,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>), (<span class="hljs-number">1</span>&lt;&lt;c), <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-type">int</span> l ,r;<br>            cin&gt;&gt;l&gt;&gt;r;<br>            <span class="hljs-built_in">update</span>(l,r,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">23</span>)<span class="hljs-number">-1</span>), <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">int</span> l, r, c;<br>            cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;<br>            cout&lt;&lt;((<span class="hljs-built_in">query</span>(l, r, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>) &amp; (<span class="hljs-number">1</span>&lt;&lt;c))?<span class="hljs-string">&quot;Yes&quot;</span>:<span class="hljs-string">&quot;No&quot;</span> )&lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-新建文件夹"><a href="https://www.luogu.com.cn/problem/U399877">B.新建文件夹</a></h2><p>在出这道题之前，我开玩笑地说“题目已经在出了（新建文件夹）”，于是干脆就把这题叫作新建文件夹好了，题目大意也跟我出题的过程有关，只能说当时的精神状态极为良好（笑）</p><h3 id="概括：">概括：</h3><p>以深度优先的顺序访问一棵树的每个节点，直到访问到目标的叶子节点结束。询问访问节点数量的期望。</p><h3 id="思路：-2">思路：</h3><p>这题可以说跟上一题相比非常简单了。</p><p>我们可以发现，从根节点到目标叶子节点的这一条链，是一定会被访问到的。也就是说访问到这些节点的概率为1。</p><p>那么其它的节点呢？我们会发现，对于链上的每一个节点，他们的兄弟节点被访问的概率都是相等的，它们要么被访问到，要么没有被访问到，概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。<br>对于这些节点的所有子孙节点，他们都是一定会被访问到的。因为只有把这些节点全部走完才可能返回上一级，所以他们的概率也是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p><p>那么答案就出来了：从根节点到目标叶子节点的这一条链节点的数量+其它节点数量/2.</p><p>总码量奇短无比。</p><h3 id="代码：-2">代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,target,len;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">3000010</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> c;<br>        cin&gt;&gt;c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;c;j++)&#123;<br>            <span class="hljs-type">int</span> x;<br>            cin&gt;&gt;x;<br>            fa[x] = i;<br>        &#125;<br>    &#125;<br>    cin&gt;&gt;target;<br>    <span class="hljs-keyword">while</span> (target != <span class="hljs-number">0</span>)<br>    &#123;<br>        len++;<br>        target = fa[target];<br>    &#125;<br>    cout&lt;&lt;len + (n-len)/<span class="hljs-number">2</span>&lt;&lt;((n-len)%<span class="hljs-number">2</span>?<span class="hljs-string">&quot;.500000&quot;</span>:<span class="hljs-string">&quot;.000000&quot;</span>)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>OI</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闪回 蝉鸣 再不会回来的你</title>
    <link href="/2024/01/03/%E5%86%8D%E4%B8%8D%E4%BC%9A%E5%9B%9E%E6%9D%A5%E7%9A%84%E4%BD%A0/"/>
    <url>/2024/01/03/%E5%86%8D%E4%B8%8D%E4%BC%9A%E5%9B%9E%E6%9D%A5%E7%9A%84%E4%BD%A0/</url>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1334077117&auto=1&height=66"></iframe><p><strong>刚遇见X的时候，我也只还是个小孩子。</strong></p><p>毕业，告别，来到新城市上学。新的学校，新的城市，新的人。一切都是那么的陌生而让人恐惧。话虽这么说，但当初我自己的嚣张和开朗还是能做到让现在的我十分吃惊的程度 <em>（换做现在的我，就算是真的表现还可以也会挺低调的罢可能）</em> 。有什么知道的就说，展示自己所会的东西，但其实充其量就是个幼稚鬼。</p><p>那是的我是一个十分矛盾的人，一边会因为身边全是比我强几倍的人而心生恐惧，另一边又会非常激动地炫耀自己所会的东西。可能是我对以前的自己恨之入骨罢，所以一想到那时，就会抽自己几个巴掌。</p><p>我兴奋地操弄教室的一体机，也就是这个时候碰见的X。</p><p>最开始，我也仅仅是把X当作计算机方面的同好，我经常说一些对计算机的浅薄看法，而X真的会对此做一些具体的分析，而这里面则不可避免地掺杂着若干我听不懂的名词。</p><p>X是一个无法被当时幼稚的我所理解的一个“奇怪”的人。好像不喜欢做一般12岁孩子爱做的任何事情。我喜欢凑热闹，而X一点也不喜欢凑热闹。我喜欢宣扬一些网络烂梗，而X虽然对此了解，但是也不会像我一样当一个复读机。在人际交流之间完全没有什么顾虑的13岁，我跟不太熟的人线上聊天也会轻松发一句“在吗”，而X则喜欢以“你好”开头；那时的我们可能只要聊得来，或者说过几句话就能以“朋友”相称，可是X从来也没有说过某人是“朋友”。</p><p>我在暑假时略微学过一点点python，而X前端的水平却已经不是一星半点了。X在当时已经可以使用前端去写音乐播放器，2048等，而我的python水平只能对着命令行傻乐。不过，13岁的我，总有挺多新奇的想法呢。令我印象深刻的，比如说用另一种特殊的方式去写中文，或者是创造一门新的编程语言之类的。由于学识有限，但是创造的东西也只能用幼稚来形容，但是X在想这些的时候，可能真的很快乐吧。</p><p>仔细想来，X也真的在很多方面影响了我呢。</p><p>“我的天哪，你真的好强。”有的时候我会不自禁地对X发出赞叹。</p><p><strong>“我是废物。”</strong> 我第一次听到这句话的时候是真被吓了一跳。X与一般人的谦虚不同，别人的谦虚可能只是为了低调，为了不让自己骄傲的举措，然而本人还是自信的。但是X在描述自己的时候，是真的会给人一种非常自卑，对自己心生怨恨，想要骂死自己的感觉。</p><p>为什么我这么清楚？大概是因为我也受到了影响吧。 <strong>写这段的时候就像在写我自己一样。</strong> 在X的影响与现实的打击下，我也成为了一个非常自卑，对自己心生怨恨的人。在描述自己的时候，也是恨不得骂死自己。连走路也开始跟X一样低着头弯着腰，好像不想见到任何人。</p><hr><p><strong>OI给了我和X一个更大的共同话题。</strong></p><p>不知什么时候开始，我和X开始不约而同地学起了C++。在我还完全不懂X所讲的什么<code>Vue.js</code>,<code>Grid</code>之类的东西为何物时，至少C++给了我们一个差不多同等的平台吧。大概在语法起步的时候，他带我找到了我们学校负责OI的一个老师，还带我去找了隔壁班的S。我们一起注册了洛谷账号，OI的旅程也就从这里开始了。</p><p>我不会学习。与之相反，X是一个天才。在做题数量差不多的情况下，X可以赛时完成一大部分题目拿高分，而弱小的我不说去能达到X的高度，只要争取不爆零已经是一种奢望。每次想到与X相比的事，就会让我心理感到不平衡想退役。 <strong>所以，我也只是一直望着X的背影越走越远，直到我再也看不见，也捉摸不透……</strong></p><p>在语文课的自由阅读时间一起看《C++ Primer》被发现，整一些莫名其妙的接龙，在社团里出一些有意思的题目，OI确实比我想象的要有趣的多呢…这也可能是我中学时期，唯一一件可以让我感到“学习很快乐”的事情。</p><p>然而，就算学习过程中有着鲜花，也掩盖不住这段路程的艰难呢。我所获得的，远比我所希望的要少。初一刚起步，初二NOIP初赛就被打爆，初三，NOIP又莫名其妙的被取消，取而代之的是一个叫做CSP的“有实无名”的比赛。 <em>“初三不拿普及一等奖，以后也别想了。”</em> 我这么想着。</p><p>初赛正常地通过，接下来就是最重要的复赛了呢。那几个月里，我不管午休，以最快的速度做完作业，然后立马用晚课的剩下时间冲去机房开始做题。虽然说作业写得十分快，但是好像质量也还不错。那段时间，可能是我初中学习最认真的时候了。此时的我，已经不记得跟老师打过多少次的晚课申请，也不记得重新打过多少次模板，虽然我很不想说，但是可能“紧张而充实”真的是那时候的最佳写照吧。</p><p>时间一天天流过，终于到了前往南京的日子呢。南航的键盘果然用起来很舒服。晚上，比赛结束，走上归程，当时我们也只是有说有笑， <strong>我也根本没有想到，可能快乐会就这样画上句号，我更没有想到，之后会走上那样的结局。</strong></p><p>“你考了多少？”几天之后，我问X。<br>“我估分265，要是到了我就女装。”X说。<br>“好巧，我也估分265，到了我也女装。”我笑着回答。</p><p>结果出来了，我因为忘记骗分的原因拿了255，而X幸运地正好265分。X要女装了，不过我们都完成了应有的使命——拿到普及一等奖。根据条约，X不负众望地，在寒假用灵梦的cos服女装了。 <em>我很开心，不知道X又是以什么心情去面对这件事的呢…</em></p><hr><p><strong>写到这里，曾经的快乐时光一起向我涌来，内心五味杂陈。</strong></p><p>寒假。</p><p>“你穿成这样，真的不冷吗？？”我惊讶地看着X，在寒冷的冬天，最外面的一层却只是一件一点也不厚的长袖校服。</p><p>“确实不冷。”X的父亲说，不穿羽绒服就别想出门了，然而就这样X也只是拿着羽绒服，并没有穿。“你也太nb了。”我笑着说。</p><p>“这杯可乐你要吗？送你了。”在一家麦当劳里，我对X说。跟不喜欢喝可乐的我相比，X好像很喜欢喝可乐。这样吃麦当劳的时候倒也正合适。“谢谢。”X回答。不知道为什么，这句话从X口中说出，好像确实对我来说有点陌生。</p><p>“你真的好像一只猫啊，哦不对，你就是猫。”我说道。“晚上不睡觉，抗寒能力强，而且还会编程。”我不知怎么的，就莫名其妙的把“猫”和“编程”这两个事情联系了起来。“哦对，Github图标的那只猫肯定就是你！”我恍然大悟地说道。</p><p>“不。”X回答。这是一句经典且简单的反驳，很有X的风格。</p><p>“按照你以前说的你家的地方，你乘地铁不应该跟我一个方向吗，为什么总跟我反向乘地铁？”我很疑惑，“哦我知道了，你有一个房子，但是有两个地址。”我说道。这种不合逻辑的荒诞的话，可能我也只会跟X说了。因为只有跟X说才能get到这种风格话的笑点。</p><p>“对。”X笑了，我也笑了。</p><p>说起来，确实很巧呢。X是出了名的不睡觉，我也是出了名的不吃饭。X很喜欢把一些看不清的东西乱读来整笑点，我也喜欢空耳别人的话变成来整笑点。不知道是我向来如此，还是一定程度上受了影响呢。</p><p>初三的最后一次秋游。</p><p>一共就没多大地地方，可整个上午我好像没有见到一个人，只是跟X在漫无目的地走着。而没有我，X早就不想秋游，而是在平板上玩自己的Arcaea了。“你不能这样，你跟班主任报备说自己不玩手机游戏，结果就在这玩平板了，跟我去看小猪跳水。”</p><p>就这样兜兜转转，聊了什么我早已忘记，一个上午也就这样过去。与大部队会合之后，他们都对我什么项目都没去而感到吃惊，而这之后，我也去玩了项目而不去管X在干什么。那时候的X，究竟在做什么呢……</p><p>初中的时候班级办过很多活动，而在我印象里有很多很多的活动我都是和X一起度过的。就连班主任也评价道：“有着相同的兴趣，就算性格不同也能关系很好呢。”是不是只有兴趣相同这么简单呢？我也不知道。</p><p>“我的有些话，难道会去跟其他那些人去交流吗？肯定是找你吧。”残存的记忆中，好像X确实是对我说过这么一段话。</p><p><strong>春风刮起，天气逐渐温暖，可我的心却从未这么寒冷过。</strong></p><p>“你要退役了？”我惊讶地说。</p><p>“啊对。”</p><p>“不是，为啥？你这么强，而且还刚拿了一等奖，拿完奖还写了一长篇文章来描述你的心路历程，怎么现在又说要退役了？”</p><p>“是这样的。”X笑了笑，说，“我感觉我现在想要研究一个叫⌈编程语言基础⌋的东西。而且将来我也肯定不会走高考路线的，我要去国际班。”</p><p>“啊啊…好吧，恭喜你。”我也不知道应该说什么了。是啊，不一直是这么一个有主见的人吗，我想着。一直让人猜不透。而且，X的能力也过于强，导致我无论在哪里，也都只能望着背影，深深感到自己的弱小。我大抵是会走高考路线，也不会放弃OI的吧，毕竟我也想有一个能和X并肩的机会啊。</p><p><em>不过现在回想起来，我高中的OI不能说学的很少吧，也真的是约等于没学了。这其中，学校的压力，学习的压力，可能只占一小部分。可能最大的原因，只是，我失去了向前的动力罢。</em></p><p><strong>终于还是要再见了，如果能是一场体面的告别该有多好，可惜…</strong></p><p>X的情绪不稳定确实也不是一天两天了（当然我也没什么资格说别人情绪不稳定）。在有几个学期的期末，我会被不知道为什么的冷言以对。那种感觉说实话有点让人恐惧，我也不明白自己做错了什么。但是与其他时候不同，这次X没有对我冷淡，跟我保持着良好的关系的同时，好像对其它的事情充满了愤怒。</p><p>大概是那次换座位开始的吧。本来是在正常不过的两周一次换座位，班级换座位的效率却异常之低。X一怒之下，拿起自己的笔，朝自己的后颈戳去……</p><p>我愣住了。到底发生了什么？我也就这样子恍惚着，终于到了晚课下课。</p><p>“我感觉，这些负面情绪的来源全都在于这个班级。离开这个班，很多问题都会解决的，我只要在等几个月就好了。”X对我说。</p><p>“为什么？”</p><p>“这个班里面有了太多我看不惯的人，或者说，他们的思想水平都很低。”</p><p>大概X的确是有资格说出这句话的吧。大概在初中的这段时间，X一直给我科普各种各样的事情，有网上的，有现实的。从X在网上发言的语气以及思想深度来看，确实已经比同年龄段的人要高出太多了。我在高中时时常不停感叹：“我在主动接受这些信息的时候要在高中，而X已经走在我前面三年了。”也多亏了X，让我能在初中时期，能有如此之大的媒介素养的提升。</p><p>“你不能这样，你得有一颗包容的心。不能因为怎么怎么就看不惯别人啊。”我这么对X说。</p><p>X回复了什么，说实话我确实已经忘记了。但是我忘不掉X持续了几个月的，红的有点发黑的后颈。</p><p>短短的一个学期，X似乎干了很多次这种事情。但是每一次事情发生后，我都会去问发生了什么。说实话，我能讲的大道理也就这么多，X也真的快让我词穷了。X会先肯定我说的话，但是之后却还是那么干。我也才知道，我以为我很了解X，其实我一无所知罢了。</p><p>中考的压力压得我喘不过气来，然而我还是时不时的在为X担心着。有一天，X又找到我。“你说的很对，我看来是一个严重的反社会人格。”然后笑着，拿出了一张满是血迹的餐巾纸。我很心痛，但是更多的却又是愤怒。因为我无论怎么去劝说X，得到的还是这样的结局，还是在不断地自残。</p><p>“你知道吗，现在我很想揍你。”以前X有时会这么对我说，但今天却是我说出来的。</p><p>“但我知道，你不会这么做的。” <strong>现在看来，X说出这句话完全是处于对我的信任吧。但我却完全会错了意。</strong> 当时的我甚至以为X在挑战我的底线。</p><p><strong>“我感觉你从来没把我说的话当一回事，那这样吧，我以后不会再跟你说任何一句话了。”</strong></p><p>我和X的关系就这样莫名其妙地结束了。结束的很突然，最令我感到痛苦的是，居然是由我以一个莫名其妙的原因亲手结束掉的。之后的几天，我无法理解我到底为什么要这么做。跟一个人绝交，竟然是因为对这人太关心？太荒谬了。但是事实却就是这样也已经无法挽回了。</p><p>我曾经以为，我的朋友很多，而X只是一个连朋友都称不上的人。但是我错了，在最后的几天里，我总是不知道为什么自己一个人低着头走出教室，看看X在哪里，甚至希望能重新回来找我。但是……明明是我说的不再跟别人说话，却希望着别人重新回来找我，我也真是有够蠢的。我也不知道X到底发生了什么会这样。也许我知道了之后，就不会这么做了吧。可能，我确实低估了X在我心中的地位吧。</p><p>夏天到了呢。我还是跟往常一样，确实有时会萌生一些有趣的想法，但我已经不知道，能跟谁说了。</p><p>中考时，蝉在外面鸣叫，大雨倾盆而下。我因为午休的时候打呼噜被人嘲讽，不想再回宿舍午休。而X也没有去宿舍。</p><p>教室里又只剩下了我跟X两个人。</p><p>教室里真安静啊，除了外面的雨声什么也听不到。</p><p>想去跟X说些什么，最后还是什么也没敢说。就在两个人一言不发的情况下，中午结束了，初中生涯也马上要画上句号。我想，我和X可能以后也再不会相见了吧。</p><p>此时的我怎么还会去乞求别人的原谅呢？我连自己都原谅不了自己。X就算到了现在一直恨着我的话，我想也是理所当然的。</p><p>我很不喜欢用“后悔”的字眼，因为我觉得一切都是命中注定，唯独这件事情，我可能真的会后悔一辈子吧。</p><blockquote><p>是啊 你是朋友 握住我的手吧<br>是啊 你是一个人的 没什么能呆的地方吧<br>不断反复的<br>闪回 蝉鸣 再不会回来的你<br>永远破碎掉的 两人同一款的钥匙圈<br>夏日已然消去 只想对洁白肌肤的少女<br>近乎悲伤般 着迷起来<br>——《少女レイ》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回忆</tag>
      
      <tag>OI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【魔芋种植】蒟蒻的博客搭建故事</title>
    <link href="/2023/11/30/bloglog/"/>
    <url>/2023/11/30/bloglog/</url>
    
    <content type="html"><![CDATA[<h2 id="记录一下搭建服务器以及创建博客的历程">记录一下搭建服务器以及创建博客的历程</h2><blockquote><p>写在前面</p><p>其实是这几天摆烂太久了，又加上发烧，使得我突然又重新想去做点什么事情来把我的想法记录下来，于是就觉得搭个博客是必要的<br>~~话说我需要一直记录自己的过去，是因为已经老了吗（笑）~~但是不可避免地，在时候几天肯定会在这个上面出现很多很多问题，于是就想着把这个记下来好了</p></blockquote><h3 id="day1：23-11-30">day1：23.11.30</h3><p>搞了个腾讯云账号，已经不知道怎么办了，现在想办法整到最便宜的办法吧</p><h3 id="day2-23-12-1">day2: 23.12.1</h3><p>花了一百多块钱，买了个一年的服务器，哎呀我心疼的要死，之前确实还没有在网上花过钱，感觉心在滴血好吧…<br>这样的话不得不好好维护一下这个新博客了。</p><p>之后又花了35块钱买了个貌似是比较便宜的域名，还要实名认证啥的，反正挺麻烦的。算了，我这钱都出了总不能白出吧，大不了每个月少吃一顿麦当劳好了。</p><p>后面是真难搞，做了一系列心理准备，干脆把系统重装了得了（指服务器系统）</p><p>经过了一系列的莫名其妙瞎折腾，我居然已经把wordpress给安装完成了，但是很可怕的一点是，我宝塔的用户名和密码忘了，但愿之后不要伏笔回收（</p><h3 id="day3-23-12-2">day3: 23.12.2</h3><p>出人意料的是，在整个网页的制作当中，考验代码能力的阶段几乎是没有的，大概也只是因为我根本不会前端罢。下了个<em>Hestia</em>主题，就差不多可以进行一系列页面的编辑啊啥的了，总的来说还挺顺利。（说实话，在搞wordpress之前， 我真的一直以为别人的博客是完全自己做了个网页上去）</p><p>那现在也差不多这个空间也算是完成了 可能这个文章也算完结了罢（</p><h3 id="dayn-23-12-24">dayn: 23.12.24</h3><p>就是说突然发现博客不能用了（笑）。原因是我没有进行备案。</p><p>但是有一说一，那个备案的过程也真是有够哈人的，啥信息都要上交过去，万一有啥问题，我可遭不住。</p><p>想来想去，还是决定放弃掉原来的那个地方，而在github上面重新搞。</p><p>看到别人说什么，在github上部署wordpress要下载mamp之类的，我也没想着是怎么一回事反正就下了，最后还是竹篮打水一场空，可见不动脑子的下场。</p><h3 id="day-n-x-23-12-28">day n+x 23.12.28</h3><p>在搞了不知道有几天，终于是把hexo的框架重新搞定了。现在写文章应该是不会遇到什么问题，而且心中更加安全了（没想到最开始买的那个服务器没起到应尽的责任，算了，就让它跑跑服务好了。。。</p><h3 id="搭建博客的过程总算是结束了。其中的过程真的是有够艰难的了，可能是我脑子不够的原因吧，能让本来还比较简单的事情搞得那么复杂…">搭建博客的过程总算是结束了。其中的过程真的是有够艰难的了，可能是我脑子不够的原因吧，能让本来还比较简单的事情搞得那么复杂…</h3><p><img src="/img/19260817.png" alt=""><br><img src="/img/003720020.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>服务器</tag>
      
      <tag>github</tag>
      
      <tag>魔芋种植</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【洛谷日报】浅谈后缀数组算法</title>
    <link href="/2020/02/24/%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/"/>
    <url>/2020/02/24/%E6%B5%85%E8%B0%88%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>浅谈后缀数组算法</h1><blockquote><p>后缀数组(suffix array)是一个通过对字符串的所有后缀经过排序后得到的数组。<br>后缀数组同时也是后缀树的一个替代品，它比后缀树更好写，所以OIers通常会使用后缀数组，而非后缀树。</p></blockquote><p>参考资料（转侵删）：</p><blockquote><p><a href="https://xminh.github.io/2018/02/27/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%9C%80%E8%AF%A6%E7%BB%86(maybe)%E8%AE%B2%E8%A7%A3.html">xminh的blog</a><br><a href="https://zh.wikipedia.org/zh-hans/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84">后缀数组-Wikipedia</a><br><a href="https://wenku.baidu.com/view/5b886b1ea76e58fafab00374.html">国家集训队2009论文</a><br><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F">基数排序-百度百科</a><br>《算法竞赛入门经典》刘汝佳</p></blockquote><h2 id="前言">前言</h2><p>最近看到了一些将后缀数组的文章，看上去写的不错，便对后缀数组这个算法心生兴趣，学了之后发现，他写起代码来还是对萌新有一些难度的（比如说我），所以我想把自己在学习的过程中遇到的一些困难记录下来，以免大家也在此环节纠缠不清。嫌我啰嗦的就挑代码看吧。</p><h2 id="一些约定-介绍">一些约定&amp;介绍</h2><p>所谓后缀数组，数组大家都知道，那啥是后缀嘞？</p><p>一个字符串S，它里面有很多个<strong>子串</strong>，所谓子串，也就是字符串以任意字符为开头，再在它后面的任意一个字符结尾的字符串。之后以<code>str[i,j](i&lt;=j)</code>来表示从S[i]~S[j]的字符串。</p><p>而<strong>后缀</strong>，则是子串里面特殊的一种，如果它的长度为<code>n</code>，下标以0位开头,那么<code>j=n-1</code>。z之后以<code>suf(i)</code>表示以<code>i</code>为开头的后缀</p><p><strong>后缀数组</strong>(<code>sa[]</code>)，就是处理这些后缀的排名。也就是说，如果把一个字符串里的所有后缀全都取出来(共n个)，再让他们以<strong>字典序排列</strong>，我们可以通过后缀数组来清楚地看到排第一、第二、第三……的后缀是从几开头的。</p><p>后缀数组，通常还会带有一个“附加产品”——<strong>名次数组</strong>(<code>rk[]</code>)，这个数组，可以让人知道从i开头的后缀，在所有后缀中能排第几。</p><p>如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/838huxxs.png" alt=""></p><p><em>简单来说，<code>sa[]</code>记录的是 <strong>“排第几的是谁”</strong>，而<code>rk[]</code>记录的是 <strong>“它排第几”</strong>。</em></p><p>同时，我们还能发现一个性质：<code>sa[rk[i]] = rk[sa[i]] = i</code>。</p><p>理解了后缀数组到底是什么之后，我们就可以学习后缀数组的求法。</p><h2 id="实现一个后缀数组">实现一个后缀数组</h2><p>怎么求后缀数组，可以说是本文最主要，最重要的部分。我们有很多种求法。</p><h3 id="O-n-2-log-n-做法"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 做法</h3><p>非常简单，就是最暴力的做法：把每个后缀当一个字符串，再将其扔进<code>sort()</code>里完事。<code>sort()</code>的复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，再加上字符串大小比较的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>总共就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2 \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。这么暴力的东西谁都会写，当然也比正解要慢了许多。</p><h3 id="O-n-log-n-做法"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 做法</h3><p>一共有两种著名的求后缀数组的算法，我们先讲简单易学好理解的<strong>倍增</strong>算法。</p><h4 id="倍增算法">倍增算法</h4><p><s>好学归好学，关键难理解</s></p><p>刚才字符串暴力排序的复杂度之所以高，那是因为他直接<em>横向</em>地比较了每个字符串的大小，这样根本没有优化的空间和方法。但如果我们换个思路，纵向比较呢？</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/myq8g4q8.png" alt=""></p><p>有人要说：这样做不是跟刚才一样吗？</p><p>但是其实不是，首先，我们抛弃了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的排序比较，有更大的优化空间。第二，人是活的，我们可以将其稍加调整，不对其字符进行比较，而使用其字符所在的排名进行比较。如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qnya82mq.png" alt=""></p><p>每个字符串的第一个字符已经比较完毕，根据字典序比较的原则，接下来就应该比较第二个字符。当然，比较第二个字符的前提是第一个字符也要按照字典序排列。也就是说，我们形成了一个<strong>双关键字</strong>的排序。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1arqmdxz.png" alt=""></p><p>那接下来呢？比较第三个字符吗？并不是。倍增算法就体现在这里。我们会发现，其实应该将它们两两合并，变成4个关键字仍然不影响排序。但是，我们上一步已经两两合并了，也就是说，4个关键字，实质上只要管2个关键字，这就是<em>倍增</em>。接下来倍增为8，依然如此。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5vjgnace.png" alt=""></p><p><strong>那么我们什么时候可以停止倍增呢？</strong></p><p>要知道，如果像奥尔加团长一样不停下来的话，就会<strong>TLE</strong>，所以，当倍增数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的时候，就可以停了。（因为所有第二关键字都是0）并且，如图所示，如果<code>sa[]</code>数组没有任何数字是相同的话，也可以提前停止。（因为第一关键字不出现相等的情况）。</p><p>不过，排序是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的，倍增一共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 次，咋就<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>呐？</p><p>要知道，字符的排序，有一个特性：最大值较小。因为字符数量有限，考虑所有数字和字母，最大的’z’也不过一百多。再加上特殊的双关键字排序，我们完全可以不用快排，而改用<strong>基数排序</strong>。</p><h4 id="基数排序">基数排序</h4><p>基数排序就是把数据统统扔进桶里面的排序（<br>在执行基数排序的时候，我们要建一个数组，这个数组的没一个元素，就是所谓的“桶”。</p><p><em>例 ： 排序<code>(1,2)</code>,<code>(3,2)</code>,<code>(1,3)</code>，第一个数为第一关键字，第二个数为第一关键字。</em></p><ol><li><p>我们先按照<strong>第二关键字</strong>，一个一个把数据扔进桶里。</p><table><thead><tr><th></th><th>桶1</th><th>桶2</th><th>桶3</th></tr></thead><tbody><tr><td>无</td><td><code>(1,2)</code>,<code>(3,2)</code></td><td><code>(1,3)</code></td><td></td></tr></tbody></table></li><li><p>将桶里面的东西全抽出来，不改变在桶内的数据，然后再按<strong>第一关键字</strong>扔进桶里。<br>|        |  桶1   |       桶2       |    桶3 |<br>|  ----  | --------------- | ------ | ------ |<br>| <code>(1,2)</code>,<code>(1,3)</code>     | 无 | <code>(3,2)</code>|</p></li></ol><p>再将其抽出来后，就是一个排完序的数组啦~</p><p>这样排序的正确性在于：我们第一次排完序之后，实际上就已经保证了<strong>同一第一关键字，第二关键字的相对顺序正确</strong>。这样，我们只要保持原来相对顺序不变，只管第一关键字排序就行了。这也是第一次排序是按照第二关键字的原因。</p><p>那么，我们先看一下基数排序的代码（单关键字，双关键字本质上就是做它两遍）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//b数组：桶</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[s[i]]++;<br><span class="hljs-comment">//++表示将一个数据放入桶</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-comment">//通过求前缀和的方法，将每一个桶内的东西排上名次</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[s[i]]]=i;<br><span class="hljs-comment">//由于我们求得是sa[],所以b[s[i]]表示排名（刚才已经前缀和过了）而--的原因是为了消除并列的情况，i表示此后缀的标号。</span><br></code></pre></td></tr></table></figure><p>不难发现，使用基数排序后，排序的复杂度达到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。再加上倍增所用的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，总复杂度就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>思路都讲完了，接下来就上代码了。理解了思路不一定写的出代码，因为代码有很多细节需要考虑。</p><p>首先，是初始化的代码。初始化先使用基数排序，直接求出倍增之前的<code>sa[]</code>数组,顺便还能初始化一下<code>x[]</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*初始化阶段：基数排序*/</span><br><span class="hljs-comment">//m是桶的上限，也就是ascii码中最大的编号</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[i]=s[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[i]]]=i;<br></code></pre></td></tr></table></figure><p>接下来就到了倍增的环节。大家可能认为，每一次倍增就要进行基数排序两次（双关键字），其实不然。我们对第二关键字的排序结果是可以直接通过在初始化时的<code>sa[]</code>数组直接算出的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;=n;k*=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//倍增的开头，k就是长度</span><br>    num = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//y[i]:记录第二关键字排序之后排第i位的对应x[]数组的下标是谁（有点拗口）</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n-k;i&lt;n;i++)y[num++] = i;<br>    <span class="hljs-comment">//通过前几幅图的观察得知，数组中后k个数的y值都是0，肯定最小，所以排名肯定最高</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)y[num++] = sa[i]-k;<br>    <span class="hljs-comment">//sa[i]&lt;k的，不可能成为一个第二关键词。在之后-k，是因为对应x[]数组</span><br></code></pre></td></tr></table></figure><p>接下来，对第一关键字的基数排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=m;i++)b[i] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[y[i]]]++;<br><span class="hljs-comment">//因为y[]指向的是x[]下标，它就顺理成章地成为了这次基数排序时x的下标,整个基数排序的过程相当于把i换成了y[i]</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[y[i]]]]=y[i],y[i]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//y[i]=0可以顺便对y[]进行初始化</span><br></code></pre></td></tr></table></figure><p>那么是不是排完一遍序，倍增的一个循环就结束了呢？当然不是。因为我们并没有更新<code>x[]</code>的值（<code>y[]</code>的值已经提前求出），所以，接下来就可以利用更新完的<code>sa[]</code>来更新<code>x[]</code>数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">swap</span>(x,y);<span class="hljs-comment">//这里看似是交换，其实是利用已经初始化的y[]来建一个原有x[]的副本</span><br>num = <span class="hljs-number">0</span>;<span class="hljs-comment">//归零</span><br>x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<span class="hljs-comment">//排第一的人的排名是第一（废话）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;n;i++)x[sa[i]] = (y[sa[i]]==y[sa[i<span class="hljs-number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="hljs-number">-1</span>]+k])?num:++num;<br><span class="hljs-comment">//上面的for:如果他们的第一关键字和第二关键字都和上一名相同，他们本质上是同一排名。如果不相同，那么排名++</span><br><span class="hljs-keyword">if</span>(num==n)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//num=n代表整个x数组内没有一个相同的排名，说明倍增可以停止了</span><br>m=num;<span class="hljs-comment">//同时，整个数组的最大值就是num，不可能有更大的桶存在</span><br></code></pre></td></tr></table></figure><p>好的！这就是求后缀数组的全部代码！接着，带上你的完整代码，去AC <a href="https://www.luogu.com.cn/problem/P3809">P3809</a>吧！（注意数组范围，注意卡常）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> s[<span class="hljs-number">10001000</span>];<br><span class="hljs-comment">//在定义数组的时候，有一个小细节，这里的y[]必须开两倍大小</span><br><span class="hljs-type">int</span> b[<span class="hljs-number">7501000</span>],x[<span class="hljs-number">7501000</span>],y[<span class="hljs-number">7501000</span>],sa[<span class="hljs-number">7501000</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SA</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[i]=s[i]]++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[i]]]=i;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k&lt;n;k*=<span class="hljs-number">2</span>)&#123;<br>        num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n-k;i&lt;n;i++)y[num++] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-keyword">if</span>(sa[i]&gt;=k)y[num++] = sa[i]-k;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;=m;i++)b[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)b[x[y[i]]]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)b[i]+=b[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)sa[--b[x[y[i]]]]=y[i],y[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">swap</span>(x,y);<br>        num = <span class="hljs-number">0</span>;<br>        x[sa[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;n;i++)x[sa[i]] = (y[sa[i]]==y[sa[i<span class="hljs-number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="hljs-number">-1</span>]+k])?num:++num;<br>        <span class="hljs-keyword">if</span>(num==n)<span class="hljs-keyword">break</span>;<br>        m=num;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">gets</span>(s);<br>    n = <span class="hljs-built_in">strlen</span>(s);<br>m = <span class="hljs-number">128</span>;<br><span class="hljs-built_in">SA</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,sa[i]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sa[n<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了倍增算法，还有一种奇特的DC3算法，写起来很复杂，也快不了多少，个人认为OIer只要学倍增算法就够了。</p><h2 id="后缀数组的应用">后缀数组的应用</h2><p>既然我们已经生成了后缀数组，那么它到底可以用来干什么呢？它可以用来做哪些题目呢？</p><h3 id="LCP">LCP</h3><p><strong>所谓LCP，就是Longest Common Prefix,最长公共前缀。</strong>~~话说叫LC的怎么那么多：LCT,LCA,LCM,LCP…~~比如说：字符串<code>abbaa</code>与<code>abaab</code>的lcp就是2.因为他们的前两个字符相同。之后的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>函数中的i与j，表示的是它们在后缀数组<code>sa[]</code>中的的下标，这也是为什么我们刚才要求后缀数组的原因。</p><p>通过求<code>sa[]</code>,我们可以求出它们两两之间的LCP，从而解决各种问题。那么这个LCP该如何求呢？</p><p>对此，我们可以证明几个小定理。（不需要可以跳过）：</p><h4 id="显然的">显然的</h4><p>LCP交换律：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,j)=LCP(j,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span><br>自己跟自己的lcp：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>−</mo><mi>s</mi><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">LCP(i,i)=len(i)=n-sa_i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">s</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>通过上述两条，我们继续推出：</p><p>（篇幅有限，对两条定理感兴趣的可以去<a href="https://xminh.github.io/2018/02/27/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E6%9C%80%E8%AF%A6%E7%BB%86">xminh的blog</a>阅读）</p><h4 id="LCP-Lemma">LCP Lemma</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,k) = min (LCP(i,j),LCP(j,k)) (i \le j \le k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span><br>这个可以很容易的用图示感性理解：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/em1bfhwc.png" alt=""></p><h4 id="LCP-Theorem">LCP Theorem</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>L</mi><mi>C</mi><mi>P</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LCP(i,k)=min (LCP(j,j-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span></span> ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 &lt; i \leq j \leq k \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> )</p><h4 id="求出LCP的方法">求出LCP的方法</h4><p>知道了LCP Lemma和LCP Theorem了之后，其实是远远不够的。因为我们还是不知道求LCP的方法。如果使用暴力的话，那么求出所有lcp也需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，这比求SA数组还要慢得多。所以不能这样，对此可以进行一些优化。</p><p>我们求LCP，其实并不需要求一个二位数组，而是使用一个数组<code>height[]</code>，来表示在<code>sa[]</code>中，相邻两个后缀的LCP。同时再建一个数组<code>h[]</code>作为辅助，<code>h[i] = height[rk[i]]</code> （写代码时并不需要建立<code>h[]</code>）。通过建这个数组，我们可以推一个最为重要的定理： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。这个就有必要证明一下了。</p><p>我们在<code>sa[]</code>数组里面找一个后缀，设它在原字符串的下标为<code>i-1</code>。在<code>sa[]</code>中的前面一个后缀，它在原字符串的下标为<code>k</code>。现在，把它们两个后缀的首字母都砍掉，它们就变成了<code>i</code>和<code>k+1</code>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g4aqb00f.png" alt=""></p><p>这张图我们也可以看出，当两者的首字母相同时，删除首字母后排名先后肯定也是不变的。而且，它们的LCP长度为<code>h[i-1]-1</code>。而根据LCP Theorem，我们可以知道，这个LCP长度是这个区间中最小的，因此 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>那么当两者首字母不同呢？那就更简单了，首字母不同，它们的LCP一定是0，不可能有比他更小的了。综上所述，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>h</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h_i \ge h_{i-1} -1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p><p>应用这个定理，可以排除很多情况，直接将复杂度降到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><p>接下来就是代码的实现问题了，直接上代码吧！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">height</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-comment">//k可以看做当前的h[i-1]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i) rk[sa[i]]=i;<span class="hljs-comment">//这个在文章的开头就提到过</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)  <br>    &#123;<br>        <span class="hljs-keyword">if</span> (rk[i]==<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//height[0]肯定为0</span><br>        <span class="hljs-keyword">if</span> (k) k--;<span class="hljs-comment">//h[i] &gt;= h[i-1]-1,所以直接从h[i-1]-1开始枚举</span><br>        <span class="hljs-type">int</span> j=sa[rk[i]<span class="hljs-number">-1</span>];<span class="hljs-comment">//j是i相邻的一个后缀，求height</span><br>        <span class="hljs-keyword">while</span> (j+k&lt;=n &amp;&amp; i+k&lt;=n &amp;&amp; s[i+k]==s[j+k]) k++;<span class="hljs-comment">//枚举它们的LCP</span><br>        ht[rk[i]]=k;<span class="hljs-comment">//k就是LCP的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们求出了height数组！那么如何利用height，来求LCP呢？</p><p>根据LCP Theorem，我们知道，这可以转化为一个<strong>RMQ</strong>问题，使用<strong>st表</strong>(Sparse-Table，稀疏表)来解决这个问题。感兴趣的可以移步关于st表的博客。</p><h3 id="例题">例题</h3><p>学会了如何写一个后缀数组以及LCP之后，我们就可以利用它们做几道题了。</p><h4 id="P2408-不同子串个数">P2408 <a href="https://www.luogu.com.cn/problem/P2408">不同子串个数</a></h4><blockquote><p>给你一个长为N的字符串，求不同的子串的个数。</p></blockquote><p>这道可以说是一道SA最简单的裸题了。<s>算法标签里面没标sa</s>一般我们找不同子串，都是按照长度枚举之后暴力去重。但是我们运用后缀数组，就可以实现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>去重。</p><p>具体是这样的：我们知道，对于每一个后缀，它都能产生自身长度个前缀。而<strong>所有后缀的所有前缀</strong>，其实就是这个字符串的所有子串。然后怎么去重呢？这就要使用<code>height[]</code>数组了。我们知道，相邻两个后缀的LCP大小，其实就是这两个后缀的子串中，有几个是重复的。因此我们只要把所有子串的个数，减去<code>height[]</code>数组的每一项，就可以了。</p><p>而且，所有子串的个数，我们还可以使用公式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">T_i = \frac{n(n+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>来<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>求得，那就更方便了！</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*抄是过不了的，要看清本题数据范围*/</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        ans-=ht[i];<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br></code></pre></td></tr></table></figure><h4 id="UVA11107Life-Forms">UVA11107<a href="https://www.luogu.com.cn/problem/UVA11107">Life Forms</a></h4><blockquote><p>给n个字符串，求长度最大字符串，要求在超过一半的字符串中出现。</p></blockquote><p>这道题有很多的解法，先介绍一下在蓝书里面的后缀数组解法。</p><p>首先把所有字符串拼起来。将这个大字符串求后缀数组和<code>height[]</code>。然后，我们可以进行二分答案来判定这个“长度最大字符串”的长度<code>l</code>。每当碰到一个<code>height[]</code>中的元素小于这个所判定的长度，就给它分段。如图所示。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7ajzp9nc.png" alt=""></p><p>（绿色横线表示分段）</p><p>如果说都一段中，有超过n/2个原串，那么说明这个长度<code>l</code>是合法的。</p><p>但是万一有两个不同原串拼在一起变成了一个新串导致lcp错误怎么办？没有关系。我们可以在每两个原串中，放一个从来没有出现过的字符，这样子就能使两个不同原串强制分段，lcp=0.比如说有3个串：<code>abcd</code>,<code>acbd</code>,<code>cdba</code>，我们这样子拼起来：<code>abcd-acbd_cdbaJ</code>（最后一个字符也要加）。</p><h2 id="结语">结语</h2><p>好了，这就是关于后缀数组的全部内容了，可以在评论区留言。后缀数组的功能远不止这些，我也只是挑了2道较易理解的题。希望对大家有所帮助~祝大家在OI之路上顺利，各个吊打我！/cy</p><blockquote><p>本文写于2020年。然而现在的我已经完全不会后缀数组了，令人感叹。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>OI</tag>
      
      <tag>后缀数组</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
